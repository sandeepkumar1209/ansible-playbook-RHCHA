/* This file is autogenerated by tracetool, do not edit. */

probe qemu.user.aarch64.breakpoint_insert = process("/usr/bin/qemu-aarch64").mark("breakpoint_insert")
{
  cpu_index = $arg1;
  pc = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.breakpoint_remove = process("/usr/bin/qemu-aarch64").mark("breakpoint_remove")
{
  cpu_index = $arg1;
  pc = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.breakpoint_singlestep = process("/usr/bin/qemu-aarch64").mark("breakpoint_singlestep")
{
  cpu_index = $arg1;
  enabled = $arg2;
}
probe qemu.user.aarch64.dma_blk_io = process("/usr/bin/qemu-aarch64").mark("dma_blk_io")
{
  dbs = $arg1;
  bs = $arg2;
  offset = $arg3;
  to_dev = $arg4;
}
probe qemu.user.aarch64.dma_aio_cancel = process("/usr/bin/qemu-aarch64").mark("dma_aio_cancel")
{
  dbs = $arg1;
}
probe qemu.user.aarch64.dma_complete = process("/usr/bin/qemu-aarch64").mark("dma_complete")
{
  dbs = $arg1;
  ret = $arg2;
  cb = $arg3;
}
probe qemu.user.aarch64.dma_blk_cb = process("/usr/bin/qemu-aarch64").mark("dma_blk_cb")
{
  dbs = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.dma_map_wait = process("/usr/bin/qemu-aarch64").mark("dma_map_wait")
{
  dbs = $arg1;
}
probe qemu.user.aarch64.find_ram_offset = process("/usr/bin/qemu-aarch64").mark("find_ram_offset")
{
  size = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.find_ram_offset_loop = process("/usr/bin/qemu-aarch64").mark("find_ram_offset_loop")
{
  size = $arg1;
  candidate = $arg2;
  offset = $arg3;
  next_ = $arg4;
  mingap = $arg5;
}
probe qemu.user.aarch64.ram_block_discard_range = process("/usr/bin/qemu-aarch64").mark("ram_block_discard_range")
{
  rbname = $arg1;
  hva = $arg2;
  length = $arg3;
  need_madvise = $arg4;
  need_fallocate = $arg5;
  ret = $arg6;
}
probe qemu.user.aarch64.memory_notdirty_write_access = process("/usr/bin/qemu-aarch64").mark("memory_notdirty_write_access")
{
  vaddr = $arg1;
  ram_addr = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.memory_notdirty_set_dirty = process("/usr/bin/qemu-aarch64").mark("memory_notdirty_set_dirty")
{
  vaddr = $arg1;
}
probe qemu.user.aarch64.job_state_transition = process("/usr/bin/qemu-aarch64").mark("job_state_transition")
{
  job = $arg1;
  ret = $arg2;
  legal = $arg3;
  s0 = $arg4;
  s1 = $arg5;
}
probe qemu.user.aarch64.job_apply_verb = process("/usr/bin/qemu-aarch64").mark("job_apply_verb")
{
  job = $arg1;
  state = $arg2;
  verb = $arg3;
  legal = $arg4;
}
probe qemu.user.aarch64.job_completed = process("/usr/bin/qemu-aarch64").mark("job_completed")
{
  job = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.qmp_job_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_job_cancel")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_job_pause = process("/usr/bin/qemu-aarch64").mark("qmp_job_pause")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_job_resume = process("/usr/bin/qemu-aarch64").mark("qmp_job_resume")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_job_complete = process("/usr/bin/qemu-aarch64").mark("qmp_job_complete")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_job_finalize = process("/usr/bin/qemu-aarch64").mark("qmp_job_finalize")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_job_dismiss = process("/usr/bin/qemu-aarch64").mark("qmp_job_dismiss")
{
  job = $arg1;
}
probe qemu.user.aarch64.guest_cpu_enter = process("/usr/bin/qemu-aarch64").mark("guest_cpu_enter")
{
  __cpu = $arg1;
}
probe qemu.user.aarch64.guest_cpu_exit = process("/usr/bin/qemu-aarch64").mark("guest_cpu_exit")
{
  __cpu = $arg1;
}
probe qemu.user.aarch64.guest_cpu_reset = process("/usr/bin/qemu-aarch64").mark("guest_cpu_reset")
{
  __cpu = $arg1;
}
probe qemu.user.aarch64.guest_user_syscall = process("/usr/bin/qemu-aarch64").mark("guest_user_syscall")
{
  __cpu = $arg1;
  num = $arg2;
  arg1 = $arg3;
  arg2 = $arg4;
  arg3 = $arg5;
  arg4 = $arg6;
  arg5 = $arg7;
  arg6 = $arg8;
  arg7 = $arg9;
  arg8 = $arg10;
}
probe qemu.user.aarch64.guest_user_syscall_ret = process("/usr/bin/qemu-aarch64").mark("guest_user_syscall_ret")
{
  __cpu = $arg1;
  num = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.qcrypto_tls_creds_load_dh = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_load_dh")
{
  creds = $arg1;
  filename = $arg2;
}
probe qemu.user.aarch64.qcrypto_tls_creds_get_path = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_get_path")
{
  creds = $arg1;
  filename = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.qcrypto_tls_creds_anon_load = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_anon_load")
{
  creds = $arg1;
  dir = $arg2;
}
probe qemu.user.aarch64.qcrypto_tls_creds_psk_load = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_psk_load")
{
  creds = $arg1;
  dir = $arg2;
}
probe qemu.user.aarch64.qcrypto_tls_creds_x509_load = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_x509_load")
{
  creds = $arg1;
  dir = $arg2;
}
probe qemu.user.aarch64.qcrypto_tls_creds_x509_check_basic_constraints = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_x509_check_basic_constraints")
{
  creds = $arg1;
  file = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.qcrypto_tls_creds_x509_check_key_usage = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_x509_check_key_usage")
{
  creds = $arg1;
  file = $arg2;
  status = $arg3;
  usage = $arg4;
  critical = $arg5;
}
probe qemu.user.aarch64.qcrypto_tls_creds_x509_check_key_purpose = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_x509_check_key_purpose")
{
  creds = $arg1;
  file = $arg2;
  status = $arg3;
  usage = $arg4;
  critical = $arg5;
}
probe qemu.user.aarch64.qcrypto_tls_creds_x509_load_cert = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_x509_load_cert")
{
  creds = $arg1;
  isServer = $arg2;
  file = $arg3;
}
probe qemu.user.aarch64.qcrypto_tls_creds_x509_load_cert_list = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_creds_x509_load_cert_list")
{
  creds = $arg1;
  file = $arg2;
}
probe qemu.user.aarch64.qcrypto_tls_session_new = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_session_new")
{
  session = $arg1;
  creds = $arg2;
  hostname = $arg3;
  authzid = $arg4;
  endpoint = $arg5;
}
probe qemu.user.aarch64.qcrypto_tls_session_check_creds = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_session_check_creds")
{
  session = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.qcrypto_tls_cipher_suite_priority = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_cipher_suite_priority")
{
  name = $arg1;
}
probe qemu.user.aarch64.qcrypto_tls_cipher_suite_info = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_cipher_suite_info")
{
  data0 = $arg1;
  data1 = $arg2;
  version = $arg3;
  name = $arg4;
}
probe qemu.user.aarch64.qcrypto_tls_cipher_suite_count = process("/usr/bin/qemu-aarch64").mark("qcrypto_tls_cipher_suite_count")
{
  count = $arg1;
}
probe qemu.user.aarch64.visit_free = process("/usr/bin/qemu-aarch64").mark("visit_free")
{
  v = $arg1;
}
probe qemu.user.aarch64.visit_complete = process("/usr/bin/qemu-aarch64").mark("visit_complete")
{
  v = $arg1;
  opaque = $arg2;
}
probe qemu.user.aarch64.visit_start_struct = process("/usr/bin/qemu-aarch64").mark("visit_start_struct")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.visit_check_struct = process("/usr/bin/qemu-aarch64").mark("visit_check_struct")
{
  v = $arg1;
}
probe qemu.user.aarch64.visit_end_struct = process("/usr/bin/qemu-aarch64").mark("visit_end_struct")
{
  v = $arg1;
  obj = $arg2;
}
probe qemu.user.aarch64.visit_start_list = process("/usr/bin/qemu-aarch64").mark("visit_start_list")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.visit_next_list = process("/usr/bin/qemu-aarch64").mark("visit_next_list")
{
  v = $arg1;
  tail = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.visit_check_list = process("/usr/bin/qemu-aarch64").mark("visit_check_list")
{
  v = $arg1;
}
probe qemu.user.aarch64.visit_end_list = process("/usr/bin/qemu-aarch64").mark("visit_end_list")
{
  v = $arg1;
  obj = $arg2;
}
probe qemu.user.aarch64.visit_start_alternate = process("/usr/bin/qemu-aarch64").mark("visit_start_alternate")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.visit_end_alternate = process("/usr/bin/qemu-aarch64").mark("visit_end_alternate")
{
  v = $arg1;
  obj = $arg2;
}
probe qemu.user.aarch64.visit_optional = process("/usr/bin/qemu-aarch64").mark("visit_optional")
{
  v = $arg1;
  name = $arg2;
  present = $arg3;
}
probe qemu.user.aarch64.visit_policy_reject = process("/usr/bin/qemu-aarch64").mark("visit_policy_reject")
{
  v = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.visit_policy_skip = process("/usr/bin/qemu-aarch64").mark("visit_policy_skip")
{
  v = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.visit_type_enum = process("/usr/bin/qemu-aarch64").mark("visit_type_enum")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_int = process("/usr/bin/qemu-aarch64").mark("visit_type_int")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_uint8 = process("/usr/bin/qemu-aarch64").mark("visit_type_uint8")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_uint16 = process("/usr/bin/qemu-aarch64").mark("visit_type_uint16")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_uint32 = process("/usr/bin/qemu-aarch64").mark("visit_type_uint32")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_uint64 = process("/usr/bin/qemu-aarch64").mark("visit_type_uint64")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_int8 = process("/usr/bin/qemu-aarch64").mark("visit_type_int8")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_int16 = process("/usr/bin/qemu-aarch64").mark("visit_type_int16")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_int32 = process("/usr/bin/qemu-aarch64").mark("visit_type_int32")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_int64 = process("/usr/bin/qemu-aarch64").mark("visit_type_int64")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_size = process("/usr/bin/qemu-aarch64").mark("visit_type_size")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_bool = process("/usr/bin/qemu-aarch64").mark("visit_type_bool")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_str = process("/usr/bin/qemu-aarch64").mark("visit_type_str")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_number = process("/usr/bin/qemu-aarch64").mark("visit_type_number")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_any = process("/usr/bin/qemu-aarch64").mark("visit_type_any")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.visit_type_null = process("/usr/bin/qemu-aarch64").mark("visit_type_null")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.aarch64.object_dynamic_cast_assert = process("/usr/bin/qemu-aarch64").mark("object_dynamic_cast_assert")
{
  type = $arg1;
  target = $arg2;
  file = $arg3;
  line = $arg4;
  func = $arg5;
}
probe qemu.user.aarch64.object_class_dynamic_cast_assert = process("/usr/bin/qemu-aarch64").mark("object_class_dynamic_cast_assert")
{
  type = $arg1;
  target = $arg2;
  file = $arg3;
  line = $arg4;
  func = $arg5;
}
probe qemu.user.aarch64.handle_hmp_command = process("/usr/bin/qemu-aarch64").mark("handle_hmp_command")
{
  mon = $arg1;
  cmdline = $arg2;
}
probe qemu.user.aarch64.monitor_protocol_event_handler = process("/usr/bin/qemu-aarch64").mark("monitor_protocol_event_handler")
{
  event = $arg1;
  qdict = $arg2;
}
probe qemu.user.aarch64.monitor_protocol_event_emit = process("/usr/bin/qemu-aarch64").mark("monitor_protocol_event_emit")
{
  event = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.monitor_protocol_event_queue = process("/usr/bin/qemu-aarch64").mark("monitor_protocol_event_queue")
{
  event = $arg1;
  qdict = $arg2;
  rate = $arg3;
}
probe qemu.user.aarch64.monitor_suspend = process("/usr/bin/qemu-aarch64").mark("monitor_suspend")
{
  ptr = $arg1;
  cnt = $arg2;
}
probe qemu.user.aarch64.monitor_qmp_in_band_enqueue = process("/usr/bin/qemu-aarch64").mark("monitor_qmp_in_band_enqueue")
{
  req = $arg1;
  mon = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.monitor_qmp_in_band_dequeue = process("/usr/bin/qemu-aarch64").mark("monitor_qmp_in_band_dequeue")
{
  req = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.monitor_qmp_cmd_in_band = process("/usr/bin/qemu-aarch64").mark("monitor_qmp_cmd_in_band")
{
  id = $arg1;
}
probe qemu.user.aarch64.monitor_qmp_err_in_band = process("/usr/bin/qemu-aarch64").mark("monitor_qmp_err_in_band")
{
  desc = $arg1;
}
probe qemu.user.aarch64.monitor_qmp_cmd_out_of_band = process("/usr/bin/qemu-aarch64").mark("monitor_qmp_cmd_out_of_band")
{
  id = $arg1;
}
probe qemu.user.aarch64.monitor_qmp_respond = process("/usr/bin/qemu-aarch64").mark("monitor_qmp_respond")
{
  mon = $arg1;
  json = $arg2;
}
probe qemu.user.aarch64.handle_qmp_command = process("/usr/bin/qemu-aarch64").mark("handle_qmp_command")
{
  mon = $arg1;
  req = $arg2;
}
probe qemu.user.aarch64.run_poll_handlers_begin = process("/usr/bin/qemu-aarch64").mark("run_poll_handlers_begin")
{
  ctx = $arg1;
  max_ns = $arg2;
  timeout = $arg3;
}
probe qemu.user.aarch64.run_poll_handlers_end = process("/usr/bin/qemu-aarch64").mark("run_poll_handlers_end")
{
  ctx = $arg1;
  progress = $arg2;
  timeout = $arg3;
}
probe qemu.user.aarch64.poll_shrink = process("/usr/bin/qemu-aarch64").mark("poll_shrink")
{
  ctx = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.poll_grow = process("/usr/bin/qemu-aarch64").mark("poll_grow")
{
  ctx = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.poll_add = process("/usr/bin/qemu-aarch64").mark("poll_add")
{
  ctx = $arg1;
  node = $arg2;
  fd = $arg3;
  revents = $arg4;
}
probe qemu.user.aarch64.poll_remove = process("/usr/bin/qemu-aarch64").mark("poll_remove")
{
  ctx = $arg1;
  node = $arg2;
  fd = $arg3;
}
probe qemu.user.aarch64.aio_co_schedule = process("/usr/bin/qemu-aarch64").mark("aio_co_schedule")
{
  ctx = $arg1;
  co = $arg2;
}
probe qemu.user.aarch64.aio_co_schedule_bh_cb = process("/usr/bin/qemu-aarch64").mark("aio_co_schedule_bh_cb")
{
  ctx = $arg1;
  co = $arg2;
}
probe qemu.user.aarch64.thread_pool_submit = process("/usr/bin/qemu-aarch64").mark("thread_pool_submit")
{
  pool = $arg1;
  req = $arg2;
  opaque = $arg3;
}
probe qemu.user.aarch64.thread_pool_complete = process("/usr/bin/qemu-aarch64").mark("thread_pool_complete")
{
  pool = $arg1;
  req = $arg2;
  opaque = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.thread_pool_cancel = process("/usr/bin/qemu-aarch64").mark("thread_pool_cancel")
{
  req = $arg1;
  opaque = $arg2;
}
probe qemu.user.aarch64.buffer_resize = process("/usr/bin/qemu-aarch64").mark("buffer_resize")
{
  buf = $arg1;
  olen = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.buffer_move_empty = process("/usr/bin/qemu-aarch64").mark("buffer_move_empty")
{
  buf = $arg1;
  len = $arg2;
  from = $arg3;
}
probe qemu.user.aarch64.buffer_move = process("/usr/bin/qemu-aarch64").mark("buffer_move")
{
  buf = $arg1;
  len = $arg2;
  from = $arg3;
}
probe qemu.user.aarch64.buffer_free = process("/usr/bin/qemu-aarch64").mark("buffer_free")
{
  buf = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.qemu_file_monitor_add_watch = process("/usr/bin/qemu-aarch64").mark("qemu_file_monitor_add_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  filename = $arg3;
  cb = $arg4;
  opaque = $arg5;
  id = $arg6;
}
probe qemu.user.aarch64.qemu_file_monitor_remove_watch = process("/usr/bin/qemu-aarch64").mark("qemu_file_monitor_remove_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  id = $arg3;
}
probe qemu.user.aarch64.qemu_file_monitor_new = process("/usr/bin/qemu-aarch64").mark("qemu_file_monitor_new")
{
  mon = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.qemu_file_monitor_enable_watch = process("/usr/bin/qemu-aarch64").mark("qemu_file_monitor_enable_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  id = $arg3;
}
probe qemu.user.aarch64.qemu_file_monitor_disable_watch = process("/usr/bin/qemu-aarch64").mark("qemu_file_monitor_disable_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  id = $arg3;
}
probe qemu.user.aarch64.qemu_file_monitor_event = process("/usr/bin/qemu-aarch64").mark("qemu_file_monitor_event")
{
  mon = $arg1;
  dirpath = $arg2;
  filename = $arg3;
  mask = $arg4;
  id = $arg5;
}
probe qemu.user.aarch64.qemu_file_monitor_dispatch = process("/usr/bin/qemu-aarch64").mark("qemu_file_monitor_dispatch")
{
  mon = $arg1;
  dirpath = $arg2;
  filename = $arg3;
  ev = $arg4;
  cb = $arg5;
  opaque = $arg6;
  id = $arg7;
}
probe qemu.user.aarch64.qemu_aio_coroutine_enter = process("/usr/bin/qemu-aarch64").mark("qemu_aio_coroutine_enter")
{
  ctx = $arg1;
  from = $arg2;
  to = $arg3;
  opaque = $arg4;
}
probe qemu.user.aarch64.qemu_coroutine_yield = process("/usr/bin/qemu-aarch64").mark("qemu_coroutine_yield")
{
  from = $arg1;
  to = $arg2;
}
probe qemu.user.aarch64.qemu_coroutine_terminate = process("/usr/bin/qemu-aarch64").mark("qemu_coroutine_terminate")
{
  co = $arg1;
}
probe qemu.user.aarch64.qemu_co_mutex_lock_uncontended = process("/usr/bin/qemu-aarch64").mark("qemu_co_mutex_lock_uncontended")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.aarch64.qemu_co_mutex_lock_entry = process("/usr/bin/qemu-aarch64").mark("qemu_co_mutex_lock_entry")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.aarch64.qemu_co_mutex_lock_return = process("/usr/bin/qemu-aarch64").mark("qemu_co_mutex_lock_return")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.aarch64.qemu_co_mutex_unlock_entry = process("/usr/bin/qemu-aarch64").mark("qemu_co_mutex_unlock_entry")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.aarch64.qemu_co_mutex_unlock_return = process("/usr/bin/qemu-aarch64").mark("qemu_co_mutex_unlock_return")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.aarch64.qemu_memalign = process("/usr/bin/qemu-aarch64").mark("qemu_memalign")
{
  alignment = $arg1;
  size = $arg2;
  ptr = $arg3;
}
probe qemu.user.aarch64.qemu_anon_ram_alloc = process("/usr/bin/qemu-aarch64").mark("qemu_anon_ram_alloc")
{
  size = $arg1;
  ptr = $arg2;
}
probe qemu.user.aarch64.qemu_vfree = process("/usr/bin/qemu-aarch64").mark("qemu_vfree")
{
  ptr = $arg1;
}
probe qemu.user.aarch64.qemu_anon_ram_free = process("/usr/bin/qemu-aarch64").mark("qemu_anon_ram_free")
{
  ptr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.hbitmap_iter_skip_words = process("/usr/bin/qemu-aarch64").mark("hbitmap_iter_skip_words")
{
  hb = $arg1;
  hbi = $arg2;
  pos = $arg3;
  cur = $arg4;
}
probe qemu.user.aarch64.hbitmap_reset = process("/usr/bin/qemu-aarch64").mark("hbitmap_reset")
{
  hb = $arg1;
  start = $arg2;
  count = $arg3;
  sbit = $arg4;
  ebit = $arg5;
}
probe qemu.user.aarch64.hbitmap_set = process("/usr/bin/qemu-aarch64").mark("hbitmap_set")
{
  hb = $arg1;
  start = $arg2;
  count = $arg3;
  sbit = $arg4;
  ebit = $arg5;
}
probe qemu.user.aarch64.lockcnt_fast_path_attempt = process("/usr/bin/qemu-aarch64").mark("lockcnt_fast_path_attempt")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.lockcnt_fast_path_success = process("/usr/bin/qemu-aarch64").mark("lockcnt_fast_path_success")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.lockcnt_unlock_attempt = process("/usr/bin/qemu-aarch64").mark("lockcnt_unlock_attempt")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.lockcnt_unlock_success = process("/usr/bin/qemu-aarch64").mark("lockcnt_unlock_success")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.lockcnt_futex_wait_prepare = process("/usr/bin/qemu-aarch64").mark("lockcnt_futex_wait_prepare")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.lockcnt_futex_wait = process("/usr/bin/qemu-aarch64").mark("lockcnt_futex_wait")
{
  lockcnt = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.lockcnt_futex_wait_resume = process("/usr/bin/qemu-aarch64").mark("lockcnt_futex_wait_resume")
{
  lockcnt = $arg1;
  new = $arg2;
}
probe qemu.user.aarch64.lockcnt_futex_wake = process("/usr/bin/qemu-aarch64").mark("lockcnt_futex_wake")
{
  lockcnt = $arg1;
}
probe qemu.user.aarch64.socket_listen = process("/usr/bin/qemu-aarch64").mark("socket_listen")
{
  num = $arg1;
}
probe qemu.user.aarch64.qemu_mutex_lock = process("/usr/bin/qemu-aarch64").mark("qemu_mutex_lock")
{
  mutex = $arg1;
  file = $arg2;
  line = $arg3;
}
probe qemu.user.aarch64.qemu_mutex_locked = process("/usr/bin/qemu-aarch64").mark("qemu_mutex_locked")
{
  mutex = $arg1;
  file = $arg2;
  line = $arg3;
}
probe qemu.user.aarch64.qemu_mutex_unlock = process("/usr/bin/qemu-aarch64").mark("qemu_mutex_unlock")
{
  mutex = $arg1;
  file = $arg2;
  line = $arg3;
}
probe qemu.user.aarch64.qemu_vfio_dma_reset_temporary = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_dma_reset_temporary")
{
  s = $arg1;
}
probe qemu.user.aarch64.qemu_vfio_ram_block_added = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_ram_block_added")
{
  s = $arg1;
  p = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.qemu_vfio_ram_block_removed = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_ram_block_removed")
{
  s = $arg1;
  p = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.qemu_vfio_dump_mapping = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_dump_mapping")
{
  host = $arg1;
  iova = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.qemu_vfio_find_mapping = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_find_mapping")
{
  s = $arg1;
  p = $arg2;
}
probe qemu.user.aarch64.qemu_vfio_new_mapping = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_new_mapping")
{
  s = $arg1;
  host = $arg2;
  size = $arg3;
  index = $arg4;
  iova = $arg5;
}
probe qemu.user.aarch64.qemu_vfio_do_mapping = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_do_mapping")
{
  s = $arg1;
  host = $arg2;
  iova = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.qemu_vfio_dma_map = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_dma_map")
{
  s = $arg1;
  host = $arg2;
  size = $arg3;
  temporary = $arg4;
  iova = $arg5;
}
probe qemu.user.aarch64.qemu_vfio_dma_mapped = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_dma_mapped")
{
  s = $arg1;
  host = $arg2;
  iova = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.qemu_vfio_dma_unmap = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_dma_unmap")
{
  s = $arg1;
  host = $arg2;
}
probe qemu.user.aarch64.qemu_vfio_pci_read_config = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_pci_read_config")
{
  buf = $arg1;
  ofs = $arg2;
  size = $arg3;
  region_ofs = $arg4;
  region_size = $arg5;
}
probe qemu.user.aarch64.qemu_vfio_pci_write_config = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_pci_write_config")
{
  buf = $arg1;
  ofs = $arg2;
  size = $arg3;
  region_ofs = $arg4;
  region_size = $arg5;
}
probe qemu.user.aarch64.qemu_vfio_region_info = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_region_info")
{
  desc = $arg1;
  region_ofs = $arg2;
  region_size = $arg3;
  cap_offset = $arg4;
}
probe qemu.user.aarch64.qemu_vfio_pci_map_bar = process("/usr/bin/qemu-aarch64").mark("qemu_vfio_pci_map_bar")
{
  index = $arg1;
  region_ofs = $arg2;
  region_size = $arg3;
  ofs = $arg4;
  host = $arg5;
}
probe qemu.user.aarch64.uffd_query_features_nosys = process("/usr/bin/qemu-aarch64").mark("uffd_query_features_nosys")
{
  err = $arg1;
}
probe qemu.user.aarch64.uffd_query_features_api_failed = process("/usr/bin/qemu-aarch64").mark("uffd_query_features_api_failed")
{
  err = $arg1;
}
probe qemu.user.aarch64.uffd_create_fd_nosys = process("/usr/bin/qemu-aarch64").mark("uffd_create_fd_nosys")
{
  err = $arg1;
}
probe qemu.user.aarch64.uffd_create_fd_api_failed = process("/usr/bin/qemu-aarch64").mark("uffd_create_fd_api_failed")
{
  err = $arg1;
}
probe qemu.user.aarch64.uffd_create_fd_api_noioctl = process("/usr/bin/qemu-aarch64").mark("uffd_create_fd_api_noioctl")
{
  ioctl_req = $arg1;
  ioctl_supp = $arg2;
}
probe qemu.user.aarch64.uffd_register_memory_failed = process("/usr/bin/qemu-aarch64").mark("uffd_register_memory_failed")
{
  addr = $arg1;
  length = $arg2;
  mode = $arg3;
  err = $arg4;
}
probe qemu.user.aarch64.uffd_unregister_memory_failed = process("/usr/bin/qemu-aarch64").mark("uffd_unregister_memory_failed")
{
  addr = $arg1;
  length = $arg2;
  err = $arg3;
}
probe qemu.user.aarch64.module_load_module = process("/usr/bin/qemu-aarch64").mark("module_load_module")
{
  name = $arg1;
}
probe qemu.user.aarch64.module_lookup_object_type = process("/usr/bin/qemu-aarch64").mark("module_lookup_object_type")
{
  name = $arg1;
}
probe qemu.user.aarch64.gdbstub_op_start = process("/usr/bin/qemu-aarch64").mark("gdbstub_op_start")
{
  device = $arg1;
}
probe qemu.user.aarch64.gdbstub_op_exiting = process("/usr/bin/qemu-aarch64").mark("gdbstub_op_exiting")
{
  code = $arg1;
}
probe qemu.user.aarch64.gdbstub_op_continue = process("/usr/bin/qemu-aarch64").mark("gdbstub_op_continue")
{
}
probe qemu.user.aarch64.gdbstub_op_continue_cpu = process("/usr/bin/qemu-aarch64").mark("gdbstub_op_continue_cpu")
{
  cpu_index = $arg1;
}
probe qemu.user.aarch64.gdbstub_op_stepping = process("/usr/bin/qemu-aarch64").mark("gdbstub_op_stepping")
{
  cpu_index = $arg1;
}
probe qemu.user.aarch64.gdbstub_op_extra_info = process("/usr/bin/qemu-aarch64").mark("gdbstub_op_extra_info")
{
  info = $arg1;
}
probe qemu.user.aarch64.gdbstub_hit_watchpoint = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_watchpoint")
{
  type = $arg1;
  cpu_gdb_index = $arg2;
  vaddr = $arg3;
}
probe qemu.user.aarch64.gdbstub_hit_internal_error = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_internal_error")
{
}
probe qemu.user.aarch64.gdbstub_hit_break = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_break")
{
}
probe qemu.user.aarch64.gdbstub_hit_paused = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_paused")
{
}
probe qemu.user.aarch64.gdbstub_hit_shutdown = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_shutdown")
{
}
probe qemu.user.aarch64.gdbstub_hit_io_error = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_io_error")
{
}
probe qemu.user.aarch64.gdbstub_hit_watchdog = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_watchdog")
{
}
probe qemu.user.aarch64.gdbstub_hit_unknown = process("/usr/bin/qemu-aarch64").mark("gdbstub_hit_unknown")
{
  state = $arg1;
}
probe qemu.user.aarch64.gdbstub_io_reply = process("/usr/bin/qemu-aarch64").mark("gdbstub_io_reply")
{
  message = $arg1;
}
probe qemu.user.aarch64.gdbstub_io_binaryreply = process("/usr/bin/qemu-aarch64").mark("gdbstub_io_binaryreply")
{
  ofs = $arg1;
  line = $arg2;
}
probe qemu.user.aarch64.gdbstub_io_command = process("/usr/bin/qemu-aarch64").mark("gdbstub_io_command")
{
  command = $arg1;
}
probe qemu.user.aarch64.gdbstub_io_got_ack = process("/usr/bin/qemu-aarch64").mark("gdbstub_io_got_ack")
{
}
probe qemu.user.aarch64.gdbstub_io_got_unexpected = process("/usr/bin/qemu-aarch64").mark("gdbstub_io_got_unexpected")
{
  ch = $arg1;
}
probe qemu.user.aarch64.gdbstub_err_got_nack = process("/usr/bin/qemu-aarch64").mark("gdbstub_err_got_nack")
{
}
probe qemu.user.aarch64.gdbstub_err_garbage = process("/usr/bin/qemu-aarch64").mark("gdbstub_err_garbage")
{
  ch = $arg1;
}
probe qemu.user.aarch64.gdbstub_err_overrun = process("/usr/bin/qemu-aarch64").mark("gdbstub_err_overrun")
{
}
probe qemu.user.aarch64.gdbstub_err_invalid_repeat = process("/usr/bin/qemu-aarch64").mark("gdbstub_err_invalid_repeat")
{
  ch = $arg1;
}
probe qemu.user.aarch64.gdbstub_err_invalid_rle = process("/usr/bin/qemu-aarch64").mark("gdbstub_err_invalid_rle")
{
}
probe qemu.user.aarch64.gdbstub_err_checksum_invalid = process("/usr/bin/qemu-aarch64").mark("gdbstub_err_checksum_invalid")
{
  ch = $arg1;
}
probe qemu.user.aarch64.gdbstub_err_checksum_incorrect = process("/usr/bin/qemu-aarch64").mark("gdbstub_err_checksum_incorrect")
{
  expected = $arg1;
  got = $arg2;
}
probe qemu.user.aarch64.signal_table_init = process("/usr/bin/qemu-aarch64").mark("signal_table_init")
{
  i = $arg1;
}
probe qemu.user.aarch64.signal_do_sigaction_guest = process("/usr/bin/qemu-aarch64").mark("signal_do_sigaction_guest")
{
  sig = $arg1;
  max = $arg2;
}
probe qemu.user.aarch64.signal_do_sigaction_host = process("/usr/bin/qemu-aarch64").mark("signal_do_sigaction_host")
{
  sig = $arg1;
  max = $arg2;
}
probe qemu.user.aarch64.user_setup_frame = process("/usr/bin/qemu-aarch64").mark("user_setup_frame")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.aarch64.user_setup_rt_frame = process("/usr/bin/qemu-aarch64").mark("user_setup_rt_frame")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.aarch64.user_do_rt_sigreturn = process("/usr/bin/qemu-aarch64").mark("user_do_rt_sigreturn")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.aarch64.user_do_sigreturn = process("/usr/bin/qemu-aarch64").mark("user_do_sigreturn")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.aarch64.user_dump_core_and_abort = process("/usr/bin/qemu-aarch64").mark("user_dump_core_and_abort")
{
  env = $arg1;
  target_sig = $arg2;
  host_sig = $arg3;
}
probe qemu.user.aarch64.user_handle_signal = process("/usr/bin/qemu-aarch64").mark("user_handle_signal")
{
  env = $arg1;
  target_sig = $arg2;
}
probe qemu.user.aarch64.user_host_signal = process("/usr/bin/qemu-aarch64").mark("user_host_signal")
{
  env = $arg1;
  host_sig = $arg2;
  target_sig = $arg3;
}
probe qemu.user.aarch64.user_queue_signal = process("/usr/bin/qemu-aarch64").mark("user_queue_signal")
{
  env = $arg1;
  target_sig = $arg2;
}
probe qemu.user.aarch64.user_s390x_restore_sigregs = process("/usr/bin/qemu-aarch64").mark("user_s390x_restore_sigregs")
{
  env = $arg1;
  sc_psw_addr = $arg2;
  env_psw_addr = $arg3;
}
probe qemu.user.aarch64.target_mprotect = process("/usr/bin/qemu-aarch64").mark("target_mprotect")
{
  start = $arg1;
  len = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.target_mmap = process("/usr/bin/qemu-aarch64").mark("target_mmap")
{
  start = $arg1;
  len = $arg2;
  pflags = $arg3;
  mflags = $arg4;
  fd = $arg5;
  offset = $arg6;
}
probe qemu.user.aarch64.target_mmap_complete = process("/usr/bin/qemu-aarch64").mark("target_mmap_complete")
{
  retaddr = $arg1;
}
probe qemu.user.aarch64.target_munmap = process("/usr/bin/qemu-aarch64").mark("target_munmap")
{
  start = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.qauthz_is_allowed = process("/usr/bin/qemu-aarch64").mark("qauthz_is_allowed")
{
  authz = $arg1;
  identity = $arg2;
  allowed = $arg3;
}
probe qemu.user.aarch64.qauthz_simple_is_allowed = process("/usr/bin/qemu-aarch64").mark("qauthz_simple_is_allowed")
{
  authz = $arg1;
  wantidentity = $arg2;
  gotidentity = $arg3;
}
probe qemu.user.aarch64.qauthz_list_check_rule = process("/usr/bin/qemu-aarch64").mark("qauthz_list_check_rule")
{
  authz = $arg1;
  identity = $arg2;
  rule = $arg3;
  format = $arg4;
  policy = $arg5;
}
probe qemu.user.aarch64.qauthz_list_default_policy = process("/usr/bin/qemu-aarch64").mark("qauthz_list_default_policy")
{
  authz = $arg1;
  identity = $arg2;
  policy = $arg3;
}
probe qemu.user.aarch64.qauthz_list_file_load = process("/usr/bin/qemu-aarch64").mark("qauthz_list_file_load")
{
  authz = $arg1;
  filename = $arg2;
}
probe qemu.user.aarch64.qauthz_list_file_refresh = process("/usr/bin/qemu-aarch64").mark("qauthz_list_file_refresh")
{
  authz = $arg1;
  filename = $arg2;
  success = $arg3;
}
probe qemu.user.aarch64.qauthz_pam_check = process("/usr/bin/qemu-aarch64").mark("qauthz_pam_check")
{
  authz = $arg1;
  identity = $arg2;
  service = $arg3;
}
probe qemu.user.aarch64.bdrv_open_common = process("/usr/bin/qemu-aarch64").mark("bdrv_open_common")
{
  bs = $arg1;
  filename = $arg2;
  flags = $arg3;
  format_name = $arg4;
}
probe qemu.user.aarch64.bdrv_lock_medium = process("/usr/bin/qemu-aarch64").mark("bdrv_lock_medium")
{
  bs = $arg1;
  locked = $arg2;
}
probe qemu.user.aarch64.blk_co_preadv = process("/usr/bin/qemu-aarch64").mark("blk_co_preadv")
{
  blk = $arg1;
  bs = $arg2;
  offset = $arg3;
  bytes = $arg4;
  flags = $arg5;
}
probe qemu.user.aarch64.blk_co_pwritev = process("/usr/bin/qemu-aarch64").mark("blk_co_pwritev")
{
  blk = $arg1;
  bs = $arg2;
  offset = $arg3;
  bytes = $arg4;
  flags = $arg5;
}
probe qemu.user.aarch64.blk_root_attach = process("/usr/bin/qemu-aarch64").mark("blk_root_attach")
{
  child = $arg1;
  blk = $arg2;
  bs = $arg3;
}
probe qemu.user.aarch64.blk_root_detach = process("/usr/bin/qemu-aarch64").mark("blk_root_detach")
{
  child = $arg1;
  blk = $arg2;
  bs = $arg3;
}
probe qemu.user.aarch64.bdrv_co_preadv_part = process("/usr/bin/qemu-aarch64").mark("bdrv_co_preadv_part")
{
  bs = $arg1;
  offset = $arg2;
  bytes = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.bdrv_co_pwritev_part = process("/usr/bin/qemu-aarch64").mark("bdrv_co_pwritev_part")
{
  bs = $arg1;
  offset = $arg2;
  bytes = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.bdrv_co_pwrite_zeroes = process("/usr/bin/qemu-aarch64").mark("bdrv_co_pwrite_zeroes")
{
  bs = $arg1;
  offset = $arg2;
  bytes = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.bdrv_co_do_copy_on_readv = process("/usr/bin/qemu-aarch64").mark("bdrv_co_do_copy_on_readv")
{
  bs = $arg1;
  offset = $arg2;
  bytes = $arg3;
  cluster_offset = $arg4;
  cluster_bytes = $arg5;
}
probe qemu.user.aarch64.bdrv_co_copy_range_from = process("/usr/bin/qemu-aarch64").mark("bdrv_co_copy_range_from")
{
  src = $arg1;
  src_offset = $arg2;
  dst = $arg3;
  dst_offset = $arg4;
  bytes = $arg5;
  read_flags = $arg6;
  write_flags = $arg7;
}
probe qemu.user.aarch64.bdrv_co_copy_range_to = process("/usr/bin/qemu-aarch64").mark("bdrv_co_copy_range_to")
{
  src = $arg1;
  src_offset = $arg2;
  dst = $arg3;
  dst_offset = $arg4;
  bytes = $arg5;
  read_flags = $arg6;
  write_flags = $arg7;
}
probe qemu.user.aarch64.stream_one_iteration = process("/usr/bin/qemu-aarch64").mark("stream_one_iteration")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
  is_allocated = $arg4;
}
probe qemu.user.aarch64.stream_start = process("/usr/bin/qemu-aarch64").mark("stream_start")
{
  bs = $arg1;
  base = $arg2;
  s = $arg3;
}
probe qemu.user.aarch64.commit_one_iteration = process("/usr/bin/qemu-aarch64").mark("commit_one_iteration")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
  is_allocated = $arg4;
}
probe qemu.user.aarch64.commit_start = process("/usr/bin/qemu-aarch64").mark("commit_start")
{
  bs = $arg1;
  base = $arg2;
  top = $arg3;
  s = $arg4;
}
probe qemu.user.aarch64.mirror_start = process("/usr/bin/qemu-aarch64").mark("mirror_start")
{
  bs = $arg1;
  s = $arg2;
  opaque = $arg3;
}
probe qemu.user.aarch64.mirror_restart_iter = process("/usr/bin/qemu-aarch64").mark("mirror_restart_iter")
{
  s = $arg1;
  cnt = $arg2;
}
probe qemu.user.aarch64.mirror_before_flush = process("/usr/bin/qemu-aarch64").mark("mirror_before_flush")
{
  s = $arg1;
}
probe qemu.user.aarch64.mirror_before_drain = process("/usr/bin/qemu-aarch64").mark("mirror_before_drain")
{
  s = $arg1;
  cnt = $arg2;
}
probe qemu.user.aarch64.mirror_before_sleep = process("/usr/bin/qemu-aarch64").mark("mirror_before_sleep")
{
  s = $arg1;
  cnt = $arg2;
  synced = $arg3;
  delay_ns = $arg4;
}
probe qemu.user.aarch64.mirror_one_iteration = process("/usr/bin/qemu-aarch64").mark("mirror_one_iteration")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.mirror_iteration_done = process("/usr/bin/qemu-aarch64").mark("mirror_iteration_done")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.mirror_yield = process("/usr/bin/qemu-aarch64").mark("mirror_yield")
{
  s = $arg1;
  cnt = $arg2;
  buf_free_count = $arg3;
  in_flight = $arg4;
}
probe qemu.user.aarch64.mirror_yield_in_flight = process("/usr/bin/qemu-aarch64").mark("mirror_yield_in_flight")
{
  s = $arg1;
  offset = $arg2;
  in_flight = $arg3;
}
probe qemu.user.aarch64.backup_do_cow_enter = process("/usr/bin/qemu-aarch64").mark("backup_do_cow_enter")
{
  job = $arg1;
  start = $arg2;
  offset = $arg3;
  bytes = $arg4;
}
probe qemu.user.aarch64.backup_do_cow_return = process("/usr/bin/qemu-aarch64").mark("backup_do_cow_return")
{
  job = $arg1;
  offset = $arg2;
  bytes = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.block_copy_skip_range = process("/usr/bin/qemu-aarch64").mark("block_copy_skip_range")
{
  bcs = $arg1;
  start = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.block_copy_process = process("/usr/bin/qemu-aarch64").mark("block_copy_process")
{
  bcs = $arg1;
  start = $arg2;
}
probe qemu.user.aarch64.block_copy_copy_range_fail = process("/usr/bin/qemu-aarch64").mark("block_copy_copy_range_fail")
{
  bcs = $arg1;
  start = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.block_copy_read_fail = process("/usr/bin/qemu-aarch64").mark("block_copy_read_fail")
{
  bcs = $arg1;
  start = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.block_copy_write_fail = process("/usr/bin/qemu-aarch64").mark("block_copy_write_fail")
{
  bcs = $arg1;
  start = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.block_copy_write_zeroes_fail = process("/usr/bin/qemu-aarch64").mark("block_copy_write_zeroes_fail")
{
  bcs = $arg1;
  start = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.qmp_block_job_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_block_job_cancel")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_block_job_pause = process("/usr/bin/qemu-aarch64").mark("qmp_block_job_pause")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_block_job_resume = process("/usr/bin/qemu-aarch64").mark("qmp_block_job_resume")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_block_job_complete = process("/usr/bin/qemu-aarch64").mark("qmp_block_job_complete")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_block_job_finalize = process("/usr/bin/qemu-aarch64").mark("qmp_block_job_finalize")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_block_job_dismiss = process("/usr/bin/qemu-aarch64").mark("qmp_block_job_dismiss")
{
  job = $arg1;
}
probe qemu.user.aarch64.qmp_block_stream = process("/usr/bin/qemu-aarch64").mark("qmp_block_stream")
{
  bs = $arg1;
}
probe qemu.user.aarch64.file_paio_submit = process("/usr/bin/qemu-aarch64").mark("file_paio_submit")
{
  acb = $arg1;
  opaque = $arg2;
  offset = $arg3;
  count = $arg4;
  type = $arg5;
}
probe qemu.user.aarch64.luring_init_state = process("/usr/bin/qemu-aarch64").mark("luring_init_state")
{
  s = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.luring_cleanup_state = process("/usr/bin/qemu-aarch64").mark("luring_cleanup_state")
{
  s = $arg1;
}
probe qemu.user.aarch64.luring_io_plug = process("/usr/bin/qemu-aarch64").mark("luring_io_plug")
{
  s = $arg1;
}
probe qemu.user.aarch64.luring_io_unplug = process("/usr/bin/qemu-aarch64").mark("luring_io_unplug")
{
  s = $arg1;
  blocked = $arg2;
  plugged = $arg3;
  queued = $arg4;
  inflight = $arg5;
}
probe qemu.user.aarch64.luring_do_submit = process("/usr/bin/qemu-aarch64").mark("luring_do_submit")
{
  s = $arg1;
  blocked = $arg2;
  plugged = $arg3;
  queued = $arg4;
  inflight = $arg5;
}
probe qemu.user.aarch64.luring_do_submit_done = process("/usr/bin/qemu-aarch64").mark("luring_do_submit_done")
{
  s = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.luring_co_submit = process("/usr/bin/qemu-aarch64").mark("luring_co_submit")
{
  bs = $arg1;
  s = $arg2;
  luringcb = $arg3;
  fd = $arg4;
  offset = $arg5;
  nbytes = $arg6;
  type = $arg7;
}
probe qemu.user.aarch64.luring_process_completion = process("/usr/bin/qemu-aarch64").mark("luring_process_completion")
{
  s = $arg1;
  aiocb = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.luring_io_uring_submit = process("/usr/bin/qemu-aarch64").mark("luring_io_uring_submit")
{
  s = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.luring_resubmit_short_read = process("/usr/bin/qemu-aarch64").mark("luring_resubmit_short_read")
{
  s = $arg1;
  luringcb = $arg2;
  nread = $arg3;
}
probe qemu.user.aarch64.qcow2_add_task = process("/usr/bin/qemu-aarch64").mark("qcow2_add_task")
{
  co = $arg1;
  bs = $arg2;
  pool = $arg3;
  action = $arg4;
  cluster_type = $arg5;
  host_offset = $arg6;
  offset = $arg7;
  bytes = $arg8;
  qiov = $arg9;
  qiov_offset = $arg10;
}
probe qemu.user.aarch64.qcow2_writev_start_req = process("/usr/bin/qemu-aarch64").mark("qcow2_writev_start_req")
{
  co = $arg1;
  offset = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.qcow2_writev_done_req = process("/usr/bin/qemu-aarch64").mark("qcow2_writev_done_req")
{
  co = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.qcow2_writev_start_part = process("/usr/bin/qemu-aarch64").mark("qcow2_writev_start_part")
{
  co = $arg1;
}
probe qemu.user.aarch64.qcow2_writev_done_part = process("/usr/bin/qemu-aarch64").mark("qcow2_writev_done_part")
{
  co = $arg1;
  cur_bytes = $arg2;
}
probe qemu.user.aarch64.qcow2_writev_data = process("/usr/bin/qemu-aarch64").mark("qcow2_writev_data")
{
  co = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.qcow2_pwrite_zeroes_start_req = process("/usr/bin/qemu-aarch64").mark("qcow2_pwrite_zeroes_start_req")
{
  co = $arg1;
  offset = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.qcow2_pwrite_zeroes = process("/usr/bin/qemu-aarch64").mark("qcow2_pwrite_zeroes")
{
  co = $arg1;
  offset = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.qcow2_skip_cow = process("/usr/bin/qemu-aarch64").mark("qcow2_skip_cow")
{
  co = $arg1;
  offset = $arg2;
  nb_clusters = $arg3;
}
probe qemu.user.aarch64.qcow2_alloc_clusters_offset = process("/usr/bin/qemu-aarch64").mark("qcow2_alloc_clusters_offset")
{
  co = $arg1;
  offset = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.qcow2_handle_copied = process("/usr/bin/qemu-aarch64").mark("qcow2_handle_copied")
{
  co = $arg1;
  guest_offset = $arg2;
  host_offset = $arg3;
  bytes = $arg4;
}
probe qemu.user.aarch64.qcow2_handle_alloc = process("/usr/bin/qemu-aarch64").mark("qcow2_handle_alloc")
{
  co = $arg1;
  guest_offset = $arg2;
  host_offset = $arg3;
  bytes = $arg4;
}
probe qemu.user.aarch64.qcow2_do_alloc_clusters_offset = process("/usr/bin/qemu-aarch64").mark("qcow2_do_alloc_clusters_offset")
{
  co = $arg1;
  guest_offset = $arg2;
  host_offset = $arg3;
  nb_clusters = $arg4;
}
probe qemu.user.aarch64.qcow2_cluster_alloc_phys = process("/usr/bin/qemu-aarch64").mark("qcow2_cluster_alloc_phys")
{
  co = $arg1;
}
probe qemu.user.aarch64.qcow2_cluster_link_l2 = process("/usr/bin/qemu-aarch64").mark("qcow2_cluster_link_l2")
{
  co = $arg1;
  nb_clusters = $arg2;
}
probe qemu.user.aarch64.qcow2_l2_allocate = process("/usr/bin/qemu-aarch64").mark("qcow2_l2_allocate")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.user.aarch64.qcow2_l2_allocate_get_empty = process("/usr/bin/qemu-aarch64").mark("qcow2_l2_allocate_get_empty")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.user.aarch64.qcow2_l2_allocate_write_l2 = process("/usr/bin/qemu-aarch64").mark("qcow2_l2_allocate_write_l2")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.user.aarch64.qcow2_l2_allocate_write_l1 = process("/usr/bin/qemu-aarch64").mark("qcow2_l2_allocate_write_l1")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.user.aarch64.qcow2_l2_allocate_done = process("/usr/bin/qemu-aarch64").mark("qcow2_l2_allocate_done")
{
  bs = $arg1;
  l1_index = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.qcow2_cache_get = process("/usr/bin/qemu-aarch64").mark("qcow2_cache_get")
{
  co = $arg1;
  c = $arg2;
  offset = $arg3;
  read_from_disk = $arg4;
}
probe qemu.user.aarch64.qcow2_cache_get_replace_entry = process("/usr/bin/qemu-aarch64").mark("qcow2_cache_get_replace_entry")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.user.aarch64.qcow2_cache_get_read = process("/usr/bin/qemu-aarch64").mark("qcow2_cache_get_read")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.user.aarch64.qcow2_cache_get_done = process("/usr/bin/qemu-aarch64").mark("qcow2_cache_get_done")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.user.aarch64.qcow2_cache_flush = process("/usr/bin/qemu-aarch64").mark("qcow2_cache_flush")
{
  co = $arg1;
  c = $arg2;
}
probe qemu.user.aarch64.qcow2_cache_entry_flush = process("/usr/bin/qemu-aarch64").mark("qcow2_cache_entry_flush")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.user.aarch64.qcow2_process_discards_failed_region = process("/usr/bin/qemu-aarch64").mark("qcow2_process_discards_failed_region")
{
  offset = $arg1;
  bytes = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.qed_alloc_l2_cache_entry = process("/usr/bin/qemu-aarch64").mark("qed_alloc_l2_cache_entry")
{
  l2_cache = $arg1;
  entry = $arg2;
}
probe qemu.user.aarch64.qed_unref_l2_cache_entry = process("/usr/bin/qemu-aarch64").mark("qed_unref_l2_cache_entry")
{
  entry = $arg1;
  ref = $arg2;
}
probe qemu.user.aarch64.qed_find_l2_cache_entry = process("/usr/bin/qemu-aarch64").mark("qed_find_l2_cache_entry")
{
  l2_cache = $arg1;
  entry = $arg2;
  offset = $arg3;
  ref = $arg4;
}
probe qemu.user.aarch64.qed_read_table = process("/usr/bin/qemu-aarch64").mark("qed_read_table")
{
  s = $arg1;
  offset = $arg2;
  table = $arg3;
}
probe qemu.user.aarch64.qed_read_table_cb = process("/usr/bin/qemu-aarch64").mark("qed_read_table_cb")
{
  s = $arg1;
  table = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.qed_write_table = process("/usr/bin/qemu-aarch64").mark("qed_write_table")
{
  s = $arg1;
  offset = $arg2;
  table = $arg3;
  index = $arg4;
  n = $arg5;
}
probe qemu.user.aarch64.qed_write_table_cb = process("/usr/bin/qemu-aarch64").mark("qed_write_table_cb")
{
  s = $arg1;
  table = $arg2;
  flush = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.qed_need_check_timer_cb = process("/usr/bin/qemu-aarch64").mark("qed_need_check_timer_cb")
{
  s = $arg1;
}
probe qemu.user.aarch64.qed_start_need_check_timer = process("/usr/bin/qemu-aarch64").mark("qed_start_need_check_timer")
{
  s = $arg1;
}
probe qemu.user.aarch64.qed_cancel_need_check_timer = process("/usr/bin/qemu-aarch64").mark("qed_cancel_need_check_timer")
{
  s = $arg1;
}
probe qemu.user.aarch64.qed_aio_complete = process("/usr/bin/qemu-aarch64").mark("qed_aio_complete")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.qed_aio_setup = process("/usr/bin/qemu-aarch64").mark("qed_aio_setup")
{
  s = $arg1;
  acb = $arg2;
  sector_num = $arg3;
  nb_sectors = $arg4;
  opaque = $arg5;
  flags = $arg6;
}
probe qemu.user.aarch64.qed_aio_next_io = process("/usr/bin/qemu-aarch64").mark("qed_aio_next_io")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  cur_pos = $arg4;
}
probe qemu.user.aarch64.qed_aio_read_data = process("/usr/bin/qemu-aarch64").mark("qed_aio_read_data")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.qed_aio_write_data = process("/usr/bin/qemu-aarch64").mark("qed_aio_write_data")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.qed_aio_write_prefill = process("/usr/bin/qemu-aarch64").mark("qed_aio_write_prefill")
{
  s = $arg1;
  acb = $arg2;
  start = $arg3;
  len = $arg4;
  offset = $arg5;
}
probe qemu.user.aarch64.qed_aio_write_postfill = process("/usr/bin/qemu-aarch64").mark("qed_aio_write_postfill")
{
  s = $arg1;
  acb = $arg2;
  start = $arg3;
  len = $arg4;
  offset = $arg5;
}
probe qemu.user.aarch64.qed_aio_write_main = process("/usr/bin/qemu-aarch64").mark("qed_aio_write_main")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.nvme_controller_capability_raw = process("/usr/bin/qemu-aarch64").mark("nvme_controller_capability_raw")
{
  value = $arg1;
}
probe qemu.user.aarch64.nvme_controller_capability = process("/usr/bin/qemu-aarch64").mark("nvme_controller_capability")
{
  desc = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.nvme_controller_spec_version = process("/usr/bin/qemu-aarch64").mark("nvme_controller_spec_version")
{
  mjr = $arg1;
  mnr = $arg2;
  ter = $arg3;
}
probe qemu.user.aarch64.nvme_kick = process("/usr/bin/qemu-aarch64").mark("nvme_kick")
{
  s = $arg1;
  q_index = $arg2;
}
probe qemu.user.aarch64.nvme_dma_flush_queue_wait = process("/usr/bin/qemu-aarch64").mark("nvme_dma_flush_queue_wait")
{
  s = $arg1;
}
probe qemu.user.aarch64.nvme_error = process("/usr/bin/qemu-aarch64").mark("nvme_error")
{
  cmd_specific = $arg1;
  sq_head = $arg2;
  sqid = $arg3;
  cid = $arg4;
  status = $arg5;
}
probe qemu.user.aarch64.nvme_process_completion = process("/usr/bin/qemu-aarch64").mark("nvme_process_completion")
{
  s = $arg1;
  q_index = $arg2;
  inflight = $arg3;
}
probe qemu.user.aarch64.nvme_process_completion_queue_plugged = process("/usr/bin/qemu-aarch64").mark("nvme_process_completion_queue_plugged")
{
  s = $arg1;
  q_index = $arg2;
}
probe qemu.user.aarch64.nvme_complete_command = process("/usr/bin/qemu-aarch64").mark("nvme_complete_command")
{
  s = $arg1;
  q_index = $arg2;
  cid = $arg3;
}
probe qemu.user.aarch64.nvme_submit_command = process("/usr/bin/qemu-aarch64").mark("nvme_submit_command")
{
  s = $arg1;
  q_index = $arg2;
  cid = $arg3;
}
probe qemu.user.aarch64.nvme_submit_command_raw = process("/usr/bin/qemu-aarch64").mark("nvme_submit_command_raw")
{
  c0 = $arg1;
  c1 = $arg2;
  c2 = $arg3;
  c3 = $arg4;
  c4 = $arg5;
  c5 = $arg6;
  c6 = $arg7;
  c7 = $arg8;
}
probe qemu.user.aarch64.nvme_handle_event = process("/usr/bin/qemu-aarch64").mark("nvme_handle_event")
{
  s = $arg1;
}
probe qemu.user.aarch64.nvme_poll_queue = process("/usr/bin/qemu-aarch64").mark("nvme_poll_queue")
{
  s = $arg1;
  q_index = $arg2;
}
probe qemu.user.aarch64.nvme_prw_aligned = process("/usr/bin/qemu-aarch64").mark("nvme_prw_aligned")
{
  s = $arg1;
  is_write = $arg2;
  offset = $arg3;
  bytes = $arg4;
  flags = $arg5;
  niov = $arg6;
}
probe qemu.user.aarch64.nvme_write_zeroes = process("/usr/bin/qemu-aarch64").mark("nvme_write_zeroes")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.nvme_qiov_unaligned = process("/usr/bin/qemu-aarch64").mark("nvme_qiov_unaligned")
{
  qiov = $arg1;
  n = $arg2;
  base = $arg3;
  size = $arg4;
  align = $arg5;
}
probe qemu.user.aarch64.nvme_prw_buffered = process("/usr/bin/qemu-aarch64").mark("nvme_prw_buffered")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
  niov = $arg4;
  is_write = $arg5;
}
probe qemu.user.aarch64.nvme_rw_done = process("/usr/bin/qemu-aarch64").mark("nvme_rw_done")
{
  s = $arg1;
  is_write = $arg2;
  offset = $arg3;
  bytes = $arg4;
  ret = $arg5;
}
probe qemu.user.aarch64.nvme_dsm = process("/usr/bin/qemu-aarch64").mark("nvme_dsm")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.nvme_dsm_done = process("/usr/bin/qemu-aarch64").mark("nvme_dsm_done")
{
  s = $arg1;
  offset = $arg2;
  bytes = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.nvme_dma_map_flush = process("/usr/bin/qemu-aarch64").mark("nvme_dma_map_flush")
{
  s = $arg1;
}
probe qemu.user.aarch64.nvme_free_req_queue_wait = process("/usr/bin/qemu-aarch64").mark("nvme_free_req_queue_wait")
{
  s = $arg1;
  q_index = $arg2;
}
probe qemu.user.aarch64.nvme_create_queue_pair = process("/usr/bin/qemu-aarch64").mark("nvme_create_queue_pair")
{
  q_index = $arg1;
  q = $arg2;
  size = $arg3;
  aio_context = $arg4;
  fd = $arg5;
}
probe qemu.user.aarch64.nvme_free_queue_pair = process("/usr/bin/qemu-aarch64").mark("nvme_free_queue_pair")
{
  q_index = $arg1;
  q = $arg2;
  cq = $arg3;
  sq = $arg4;
}
probe qemu.user.aarch64.nvme_cmd_map_qiov = process("/usr/bin/qemu-aarch64").mark("nvme_cmd_map_qiov")
{
  s = $arg1;
  cmd = $arg2;
  req = $arg3;
  qiov = $arg4;
  entries = $arg5;
}
probe qemu.user.aarch64.nvme_cmd_map_qiov_pages = process("/usr/bin/qemu-aarch64").mark("nvme_cmd_map_qiov_pages")
{
  s = $arg1;
  i = $arg2;
  page = $arg3;
}
probe qemu.user.aarch64.nvme_cmd_map_qiov_iov = process("/usr/bin/qemu-aarch64").mark("nvme_cmd_map_qiov_iov")
{
  s = $arg1;
  i = $arg2;
  page = $arg3;
  pages = $arg4;
}
probe qemu.user.aarch64.iscsi_xcopy = process("/usr/bin/qemu-aarch64").mark("iscsi_xcopy")
{
  src_lun = $arg1;
  src_off = $arg2;
  dst_lun = $arg3;
  dst_off = $arg4;
  bytes = $arg5;
  ret = $arg6;
}
probe qemu.user.aarch64.nbd_parse_blockstatus_compliance = process("/usr/bin/qemu-aarch64").mark("nbd_parse_blockstatus_compliance")
{
  err = $arg1;
}
probe qemu.user.aarch64.nbd_structured_read_compliance = process("/usr/bin/qemu-aarch64").mark("nbd_structured_read_compliance")
{
  type = $arg1;
}
probe qemu.user.aarch64.nbd_read_reply_entry_fail = process("/usr/bin/qemu-aarch64").mark("nbd_read_reply_entry_fail")
{
  ret = $arg1;
  err = $arg2;
}
probe qemu.user.aarch64.nbd_co_request_fail = process("/usr/bin/qemu-aarch64").mark("nbd_co_request_fail")
{
  from = $arg1;
  len = $arg2;
  handle = $arg3;
  flags = $arg4;
  type = $arg5;
  name = $arg6;
  ret = $arg7;
  err = $arg8;
}
probe qemu.user.aarch64.nbd_client_handshake = process("/usr/bin/qemu-aarch64").mark("nbd_client_handshake")
{
  export_name = $arg1;
}
probe qemu.user.aarch64.nbd_client_handshake_success = process("/usr/bin/qemu-aarch64").mark("nbd_client_handshake_success")
{
  export_name = $arg1;
}
probe qemu.user.aarch64.nbd_reconnect_attempt = process("/usr/bin/qemu-aarch64").mark("nbd_reconnect_attempt")
{
  in_flight = $arg1;
}
probe qemu.user.aarch64.nbd_reconnect_attempt_result = process("/usr/bin/qemu-aarch64").mark("nbd_reconnect_attempt_result")
{
  ret = $arg1;
  in_flight = $arg2;
}
probe qemu.user.aarch64.ssh_restart_coroutine = process("/usr/bin/qemu-aarch64").mark("ssh_restart_coroutine")
{
  co = $arg1;
}
probe qemu.user.aarch64.ssh_flush = process("/usr/bin/qemu-aarch64").mark("ssh_flush")
{
}
probe qemu.user.aarch64.ssh_check_host_key_knownhosts = process("/usr/bin/qemu-aarch64").mark("ssh_check_host_key_knownhosts")
{
}
probe qemu.user.aarch64.ssh_connect_to_ssh = process("/usr/bin/qemu-aarch64").mark("ssh_connect_to_ssh")
{
  path = $arg1;
  flags = $arg2;
  mode = $arg3;
}
probe qemu.user.aarch64.ssh_co_yield = process("/usr/bin/qemu-aarch64").mark("ssh_co_yield")
{
  sock = $arg1;
  rd_handler = $arg2;
  wr_handler = $arg3;
}
probe qemu.user.aarch64.ssh_co_yield_back = process("/usr/bin/qemu-aarch64").mark("ssh_co_yield_back")
{
  sock = $arg1;
}
probe qemu.user.aarch64.ssh_getlength = process("/usr/bin/qemu-aarch64").mark("ssh_getlength")
{
  length = $arg1;
}
probe qemu.user.aarch64.ssh_co_create_opts = process("/usr/bin/qemu-aarch64").mark("ssh_co_create_opts")
{
  size = $arg1;
}
probe qemu.user.aarch64.ssh_read = process("/usr/bin/qemu-aarch64").mark("ssh_read")
{
  offset = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.ssh_read_buf = process("/usr/bin/qemu-aarch64").mark("ssh_read_buf")
{
  buf = $arg1;
  size = $arg2;
  actual_size = $arg3;
}
probe qemu.user.aarch64.ssh_read_return = process("/usr/bin/qemu-aarch64").mark("ssh_read_return")
{
  ret = $arg1;
  sftp_err = $arg2;
}
probe qemu.user.aarch64.ssh_write = process("/usr/bin/qemu-aarch64").mark("ssh_write")
{
  offset = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.ssh_write_buf = process("/usr/bin/qemu-aarch64").mark("ssh_write_buf")
{
  buf = $arg1;
  size = $arg2;
  actual_size = $arg3;
}
probe qemu.user.aarch64.ssh_write_return = process("/usr/bin/qemu-aarch64").mark("ssh_write_return")
{
  ret = $arg1;
  sftp_err = $arg2;
}
probe qemu.user.aarch64.ssh_seek = process("/usr/bin/qemu-aarch64").mark("ssh_seek")
{
  offset = $arg1;
}
probe qemu.user.aarch64.ssh_auth_methods = process("/usr/bin/qemu-aarch64").mark("ssh_auth_methods")
{
  methods = $arg1;
}
probe qemu.user.aarch64.ssh_server_status = process("/usr/bin/qemu-aarch64").mark("ssh_server_status")
{
  status = $arg1;
}
probe qemu.user.aarch64.curl_timer_cb = process("/usr/bin/qemu-aarch64").mark("curl_timer_cb")
{
  timeout_ms = $arg1;
}
probe qemu.user.aarch64.curl_sock_cb = process("/usr/bin/qemu-aarch64").mark("curl_sock_cb")
{
  action = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.curl_read_cb = process("/usr/bin/qemu-aarch64").mark("curl_read_cb")
{
  realsize = $arg1;
}
probe qemu.user.aarch64.curl_open = process("/usr/bin/qemu-aarch64").mark("curl_open")
{
  file = $arg1;
}
probe qemu.user.aarch64.curl_open_size = process("/usr/bin/qemu-aarch64").mark("curl_open_size")
{
  size = $arg1;
}
probe qemu.user.aarch64.curl_setup_preadv = process("/usr/bin/qemu-aarch64").mark("curl_setup_preadv")
{
  bytes = $arg1;
  start = $arg2;
  range = $arg3;
}
probe qemu.user.aarch64.curl_close = process("/usr/bin/qemu-aarch64").mark("curl_close")
{
}
probe qemu.user.aarch64.file_copy_file_range = process("/usr/bin/qemu-aarch64").mark("file_copy_file_range")
{
  bs = $arg1;
  src = $arg2;
  src_off = $arg3;
  dst = $arg4;
  dst_off = $arg5;
  bytes = $arg6;
  flags = $arg7;
  ret = $arg8;
}
probe qemu.user.aarch64.file_FindEjectableOpticalMedia = process("/usr/bin/qemu-aarch64").mark("file_FindEjectableOpticalMedia")
{
  media = $arg1;
}
probe qemu.user.aarch64.file_setup_cdrom = process("/usr/bin/qemu-aarch64").mark("file_setup_cdrom")
{
  partition = $arg1;
}
probe qemu.user.aarch64.file_hdev_is_sg = process("/usr/bin/qemu-aarch64").mark("file_hdev_is_sg")
{
  type = $arg1;
  version = $arg2;
}
probe qemu.user.aarch64.file_flush_fdatasync_failed = process("/usr/bin/qemu-aarch64").mark("file_flush_fdatasync_failed")
{
  err = $arg1;
}
probe qemu.user.aarch64.sftp_error = process("/usr/bin/qemu-aarch64").mark("sftp_error")
{
  op = $arg1;
  ssh_err = $arg2;
  ssh_err_code = $arg3;
  sftp_err_code = $arg4;
}
probe qemu.user.aarch64.qio_task_new = process("/usr/bin/qemu-aarch64").mark("qio_task_new")
{
  task = $arg1;
  source = $arg2;
  func = $arg3;
  opaque = $arg4;
}
probe qemu.user.aarch64.qio_task_complete = process("/usr/bin/qemu-aarch64").mark("qio_task_complete")
{
  task = $arg1;
}
probe qemu.user.aarch64.qio_task_thread_start = process("/usr/bin/qemu-aarch64").mark("qio_task_thread_start")
{
  task = $arg1;
  worker = $arg2;
  opaque = $arg3;
}
probe qemu.user.aarch64.qio_task_thread_run = process("/usr/bin/qemu-aarch64").mark("qio_task_thread_run")
{
  task = $arg1;
}
probe qemu.user.aarch64.qio_task_thread_exit = process("/usr/bin/qemu-aarch64").mark("qio_task_thread_exit")
{
  task = $arg1;
}
probe qemu.user.aarch64.qio_task_thread_result = process("/usr/bin/qemu-aarch64").mark("qio_task_thread_result")
{
  task = $arg1;
}
probe qemu.user.aarch64.qio_task_thread_source_attach = process("/usr/bin/qemu-aarch64").mark("qio_task_thread_source_attach")
{
  task = $arg1;
  source = $arg2;
}
probe qemu.user.aarch64.qio_task_thread_source_cancel = process("/usr/bin/qemu-aarch64").mark("qio_task_thread_source_cancel")
{
  task = $arg1;
  source = $arg2;
}
probe qemu.user.aarch64.qio_channel_null_new = process("/usr/bin/qemu-aarch64").mark("qio_channel_null_new")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_socket_new = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_new")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_socket_new_fd = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_new_fd")
{
  ioc = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.qio_channel_socket_connect_sync = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_connect_sync")
{
  ioc = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.qio_channel_socket_connect_async = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_connect_async")
{
  ioc = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.qio_channel_socket_connect_fail = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_connect_fail")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_socket_connect_complete = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_connect_complete")
{
  ioc = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.qio_channel_socket_listen_sync = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_listen_sync")
{
  ioc = $arg1;
  addr = $arg2;
  num = $arg3;
}
probe qemu.user.aarch64.qio_channel_socket_listen_async = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_listen_async")
{
  ioc = $arg1;
  addr = $arg2;
  num = $arg3;
}
probe qemu.user.aarch64.qio_channel_socket_listen_fail = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_listen_fail")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_socket_listen_complete = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_listen_complete")
{
  ioc = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.qio_channel_socket_dgram_sync = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_dgram_sync")
{
  ioc = $arg1;
  localAddr = $arg2;
  remoteAddr = $arg3;
}
probe qemu.user.aarch64.qio_channel_socket_dgram_async = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_dgram_async")
{
  ioc = $arg1;
  localAddr = $arg2;
  remoteAddr = $arg3;
}
probe qemu.user.aarch64.qio_channel_socket_dgram_fail = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_dgram_fail")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_socket_dgram_complete = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_dgram_complete")
{
  ioc = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.qio_channel_socket_accept = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_accept")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_socket_accept_fail = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_accept_fail")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_socket_accept_complete = process("/usr/bin/qemu-aarch64").mark("qio_channel_socket_accept_complete")
{
  ioc = $arg1;
  cioc = $arg2;
  fd = $arg3;
}
probe qemu.user.aarch64.qio_channel_file_new_fd = process("/usr/bin/qemu-aarch64").mark("qio_channel_file_new_fd")
{
  ioc = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.qio_channel_file_new_path = process("/usr/bin/qemu-aarch64").mark("qio_channel_file_new_path")
{
  ioc = $arg1;
  path = $arg2;
  flags = $arg3;
  mode = $arg4;
  fd = $arg5;
}
probe qemu.user.aarch64.qio_channel_tls_new_client = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_new_client")
{
  ioc = $arg1;
  master = $arg2;
  creds = $arg3;
  hostname = $arg4;
}
probe qemu.user.aarch64.qio_channel_tls_new_server = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_new_server")
{
  ioc = $arg1;
  master = $arg2;
  creds = $arg3;
  aclname = $arg4;
}
probe qemu.user.aarch64.qio_channel_tls_handshake_start = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_handshake_start")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_tls_handshake_pending = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_handshake_pending")
{
  ioc = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.qio_channel_tls_handshake_fail = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_handshake_fail")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_tls_handshake_complete = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_handshake_complete")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_tls_credentials_allow = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_credentials_allow")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_tls_credentials_deny = process("/usr/bin/qemu-aarch64").mark("qio_channel_tls_credentials_deny")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_websock_new_server = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_new_server")
{
  ioc = $arg1;
  master = $arg2;
}
probe qemu.user.aarch64.qio_channel_websock_handshake_start = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_handshake_start")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_websock_handshake_pending = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_handshake_pending")
{
  ioc = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.qio_channel_websock_handshake_reply = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_handshake_reply")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_websock_handshake_fail = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_handshake_fail")
{
  ioc = $arg1;
  msg = $arg2;
}
probe qemu.user.aarch64.qio_channel_websock_handshake_complete = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_handshake_complete")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_websock_http_greeting = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_http_greeting")
{
  ioc = $arg1;
  greeting = $arg2;
}
probe qemu.user.aarch64.qio_channel_websock_http_request = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_http_request")
{
  ioc = $arg1;
  protocols = $arg2;
  version = $arg3;
  host = $arg4;
  connection = $arg5;
  upgrade = $arg6;
  key = $arg7;
}
probe qemu.user.aarch64.qio_channel_websock_header_partial_decode = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_header_partial_decode")
{
  ioc = $arg1;
  payloadlen = $arg2;
  fin = $arg3;
  opcode = $arg4;
  has_mask = $arg5;
}
probe qemu.user.aarch64.qio_channel_websock_header_full_decode = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_header_full_decode")
{
  ioc = $arg1;
  headerlen = $arg2;
  payloadlen = $arg3;
  mask = $arg4;
}
probe qemu.user.aarch64.qio_channel_websock_payload_decode = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_payload_decode")
{
  ioc = $arg1;
  opcode = $arg2;
  payload_remain = $arg3;
}
probe qemu.user.aarch64.qio_channel_websock_encode = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_encode")
{
  ioc = $arg1;
  opcode = $arg2;
  payloadlen = $arg3;
  headerlen = $arg4;
}
probe qemu.user.aarch64.qio_channel_websock_close = process("/usr/bin/qemu-aarch64").mark("qio_channel_websock_close")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.qio_channel_command_new_pid = process("/usr/bin/qemu-aarch64").mark("qio_channel_command_new_pid")
{
  ioc = $arg1;
  writefd = $arg2;
  readfd = $arg3;
  pid = $arg4;
}
probe qemu.user.aarch64.qio_channel_command_new_spawn = process("/usr/bin/qemu-aarch64").mark("qio_channel_command_new_spawn")
{
  ioc = $arg1;
  binary = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.qio_channel_command_abort = process("/usr/bin/qemu-aarch64").mark("qio_channel_command_abort")
{
  ioc = $arg1;
  pid = $arg2;
}
probe qemu.user.aarch64.qio_channel_command_wait = process("/usr/bin/qemu-aarch64").mark("qio_channel_command_wait")
{
  ioc = $arg1;
  pid = $arg2;
  ret = $arg3;
  status = $arg4;
}
probe qemu.user.aarch64.nbd_send_option_request = process("/usr/bin/qemu-aarch64").mark("nbd_send_option_request")
{
  opt = $arg1;
  name = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.nbd_receive_option_reply = process("/usr/bin/qemu-aarch64").mark("nbd_receive_option_reply")
{
  option = $arg1;
  optname = $arg2;
  type = $arg3;
  typename = $arg4;
  length = $arg5;
}
probe qemu.user.aarch64.nbd_server_error_msg = process("/usr/bin/qemu-aarch64").mark("nbd_server_error_msg")
{
  err = $arg1;
  type = $arg2;
  msg = $arg3;
}
probe qemu.user.aarch64.nbd_reply_err_ignored = process("/usr/bin/qemu-aarch64").mark("nbd_reply_err_ignored")
{
  option = $arg1;
  name = $arg2;
  reply = $arg3;
  reply_name = $arg4;
}
probe qemu.user.aarch64.nbd_receive_list = process("/usr/bin/qemu-aarch64").mark("nbd_receive_list")
{
  name = $arg1;
  desc = $arg2;
}
probe qemu.user.aarch64.nbd_opt_info_go_start = process("/usr/bin/qemu-aarch64").mark("nbd_opt_info_go_start")
{
  opt = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.nbd_opt_info_go_success = process("/usr/bin/qemu-aarch64").mark("nbd_opt_info_go_success")
{
  opt = $arg1;
}
probe qemu.user.aarch64.nbd_opt_info_unknown = process("/usr/bin/qemu-aarch64").mark("nbd_opt_info_unknown")
{
  info = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.nbd_opt_info_block_size = process("/usr/bin/qemu-aarch64").mark("nbd_opt_info_block_size")
{
  minimum = $arg1;
  preferred = $arg2;
  maximum = $arg3;
}
probe qemu.user.aarch64.nbd_receive_query_exports_start = process("/usr/bin/qemu-aarch64").mark("nbd_receive_query_exports_start")
{
  wantname = $arg1;
}
probe qemu.user.aarch64.nbd_receive_query_exports_success = process("/usr/bin/qemu-aarch64").mark("nbd_receive_query_exports_success")
{
  wantname = $arg1;
}
probe qemu.user.aarch64.nbd_receive_starttls_new_client = process("/usr/bin/qemu-aarch64").mark("nbd_receive_starttls_new_client")
{
}
probe qemu.user.aarch64.nbd_receive_starttls_tls_handshake = process("/usr/bin/qemu-aarch64").mark("nbd_receive_starttls_tls_handshake")
{
}
probe qemu.user.aarch64.nbd_opt_meta_request = process("/usr/bin/qemu-aarch64").mark("nbd_opt_meta_request")
{
  optname = $arg1;
  context = $arg2;
  export = $arg3;
}
probe qemu.user.aarch64.nbd_opt_meta_reply = process("/usr/bin/qemu-aarch64").mark("nbd_opt_meta_reply")
{
  optname = $arg1;
  context = $arg2;
  id = $arg3;
}
probe qemu.user.aarch64.nbd_start_negotiate = process("/usr/bin/qemu-aarch64").mark("nbd_start_negotiate")
{
  tlscreds = $arg1;
  hostname = $arg2;
}
probe qemu.user.aarch64.nbd_receive_negotiate_magic = process("/usr/bin/qemu-aarch64").mark("nbd_receive_negotiate_magic")
{
  magic = $arg1;
}
probe qemu.user.aarch64.nbd_receive_negotiate_server_flags = process("/usr/bin/qemu-aarch64").mark("nbd_receive_negotiate_server_flags")
{
  globalflags = $arg1;
}
probe qemu.user.aarch64.nbd_receive_negotiate_name = process("/usr/bin/qemu-aarch64").mark("nbd_receive_negotiate_name")
{
  name = $arg1;
}
probe qemu.user.aarch64.nbd_receive_negotiate_size_flags = process("/usr/bin/qemu-aarch64").mark("nbd_receive_negotiate_size_flags")
{
  size = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.nbd_init_set_socket = process("/usr/bin/qemu-aarch64").mark("nbd_init_set_socket")
{
}
probe qemu.user.aarch64.nbd_init_set_block_size = process("/usr/bin/qemu-aarch64").mark("nbd_init_set_block_size")
{
  block_size = $arg1;
}
probe qemu.user.aarch64.nbd_init_set_size = process("/usr/bin/qemu-aarch64").mark("nbd_init_set_size")
{
  sectors = $arg1;
}
probe qemu.user.aarch64.nbd_init_trailing_bytes = process("/usr/bin/qemu-aarch64").mark("nbd_init_trailing_bytes")
{
  ignored_bytes = $arg1;
}
probe qemu.user.aarch64.nbd_init_set_readonly = process("/usr/bin/qemu-aarch64").mark("nbd_init_set_readonly")
{
}
probe qemu.user.aarch64.nbd_init_finish = process("/usr/bin/qemu-aarch64").mark("nbd_init_finish")
{
}
probe qemu.user.aarch64.nbd_client_loop = process("/usr/bin/qemu-aarch64").mark("nbd_client_loop")
{
}
probe qemu.user.aarch64.nbd_client_loop_ret = process("/usr/bin/qemu-aarch64").mark("nbd_client_loop_ret")
{
  ret = $arg1;
  error = $arg2;
}
probe qemu.user.aarch64.nbd_client_clear_queue = process("/usr/bin/qemu-aarch64").mark("nbd_client_clear_queue")
{
}
probe qemu.user.aarch64.nbd_client_clear_socket = process("/usr/bin/qemu-aarch64").mark("nbd_client_clear_socket")
{
}
probe qemu.user.aarch64.nbd_send_request = process("/usr/bin/qemu-aarch64").mark("nbd_send_request")
{
  from = $arg1;
  len = $arg2;
  handle = $arg3;
  flags = $arg4;
  type = $arg5;
  name = $arg6;
}
probe qemu.user.aarch64.nbd_receive_simple_reply = process("/usr/bin/qemu-aarch64").mark("nbd_receive_simple_reply")
{
  error = $arg1;
  errname = $arg2;
  handle = $arg3;
}
probe qemu.user.aarch64.nbd_receive_structured_reply_chunk = process("/usr/bin/qemu-aarch64").mark("nbd_receive_structured_reply_chunk")
{
  flags = $arg1;
  type = $arg2;
  name = $arg3;
  handle = $arg4;
  length = $arg5;
}
probe qemu.user.aarch64.nbd_unknown_error = process("/usr/bin/qemu-aarch64").mark("nbd_unknown_error")
{
  err = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_send_rep_len = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_send_rep_len")
{
  opt = $arg1;
  optname = $arg2;
  type = $arg3;
  typename = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.nbd_negotiate_send_rep_err = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_send_rep_err")
{
  msg = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_send_rep_list = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_send_rep_list")
{
  name = $arg1;
  desc = $arg2;
}
probe qemu.user.aarch64.nbd_negotiate_handle_export_name = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_handle_export_name")
{
}
probe qemu.user.aarch64.nbd_negotiate_handle_export_name_request = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_handle_export_name_request")
{
  name = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_send_info = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_send_info")
{
  info = $arg1;
  name = $arg2;
  length = $arg3;
}
probe qemu.user.aarch64.nbd_negotiate_handle_info_requests = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_handle_info_requests")
{
  requests = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_handle_info_request = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_handle_info_request")
{
  request = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.nbd_negotiate_handle_info_block_size = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_handle_info_block_size")
{
  minimum = $arg1;
  preferred = $arg2;
  maximum = $arg3;
}
probe qemu.user.aarch64.nbd_negotiate_handle_starttls = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_handle_starttls")
{
}
probe qemu.user.aarch64.nbd_negotiate_handle_starttls_handshake = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_handle_starttls_handshake")
{
}
probe qemu.user.aarch64.nbd_negotiate_meta_context = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_meta_context")
{
  optname = $arg1;
  export = $arg2;
  queries = $arg3;
}
probe qemu.user.aarch64.nbd_negotiate_meta_query_skip = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_meta_query_skip")
{
  reason = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_meta_query_parse = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_meta_query_parse")
{
  query = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_meta_query_reply = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_meta_query_reply")
{
  context = $arg1;
  id = $arg2;
}
probe qemu.user.aarch64.nbd_negotiate_options_flags = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_options_flags")
{
  flags = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_options_check_magic = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_options_check_magic")
{
  magic = $arg1;
}
probe qemu.user.aarch64.nbd_negotiate_options_check_option = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_options_check_option")
{
  option = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.nbd_negotiate_begin = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_begin")
{
}
probe qemu.user.aarch64.nbd_negotiate_new_style_size_flags = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_new_style_size_flags")
{
  size = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.nbd_negotiate_success = process("/usr/bin/qemu-aarch64").mark("nbd_negotiate_success")
{
}
probe qemu.user.aarch64.nbd_receive_request = process("/usr/bin/qemu-aarch64").mark("nbd_receive_request")
{
  magic = $arg1;
  flags = $arg2;
  type = $arg3;
  from = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.nbd_blk_aio_attached = process("/usr/bin/qemu-aarch64").mark("nbd_blk_aio_attached")
{
  name = $arg1;
  ctx = $arg2;
}
probe qemu.user.aarch64.nbd_blk_aio_detach = process("/usr/bin/qemu-aarch64").mark("nbd_blk_aio_detach")
{
  name = $arg1;
  ctx = $arg2;
}
probe qemu.user.aarch64.nbd_co_send_simple_reply = process("/usr/bin/qemu-aarch64").mark("nbd_co_send_simple_reply")
{
  handle = $arg1;
  error = $arg2;
  errname = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.nbd_co_send_structured_done = process("/usr/bin/qemu-aarch64").mark("nbd_co_send_structured_done")
{
  handle = $arg1;
}
probe qemu.user.aarch64.nbd_co_send_structured_read = process("/usr/bin/qemu-aarch64").mark("nbd_co_send_structured_read")
{
  handle = $arg1;
  offset = $arg2;
  data = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.nbd_co_send_structured_read_hole = process("/usr/bin/qemu-aarch64").mark("nbd_co_send_structured_read_hole")
{
  handle = $arg1;
  offset = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.nbd_co_send_extents = process("/usr/bin/qemu-aarch64").mark("nbd_co_send_extents")
{
  handle = $arg1;
  extents = $arg2;
  id = $arg3;
  length = $arg4;
  last = $arg5;
}
probe qemu.user.aarch64.nbd_co_send_structured_error = process("/usr/bin/qemu-aarch64").mark("nbd_co_send_structured_error")
{
  handle = $arg1;
  err = $arg2;
  errname = $arg3;
  msg = $arg4;
}
probe qemu.user.aarch64.nbd_co_receive_request_decode_type = process("/usr/bin/qemu-aarch64").mark("nbd_co_receive_request_decode_type")
{
  handle = $arg1;
  type = $arg2;
  name = $arg3;
}
probe qemu.user.aarch64.nbd_co_receive_request_payload_received = process("/usr/bin/qemu-aarch64").mark("nbd_co_receive_request_payload_received")
{
  handle = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.nbd_co_receive_align_compliance = process("/usr/bin/qemu-aarch64").mark("nbd_co_receive_align_compliance")
{
  op = $arg1;
  from = $arg2;
  len = $arg3;
  align = $arg4;
}
probe qemu.user.aarch64.nbd_trip = process("/usr/bin/qemu-aarch64").mark("nbd_trip")
{
}
probe qemu.user.aarch64.nbd_connect_thread_sleep = process("/usr/bin/qemu-aarch64").mark("nbd_connect_thread_sleep")
{
  timeout = $arg1;
}
probe qemu.user.aarch64.pr_manager_execute = process("/usr/bin/qemu-aarch64").mark("pr_manager_execute")
{
  fd = $arg1;
  cmd = $arg2;
  sa = $arg3;
}
probe qemu.user.aarch64.pr_manager_run = process("/usr/bin/qemu-aarch64").mark("pr_manager_run")
{
  fd = $arg1;
  cmd = $arg2;
  sa = $arg3;
}
probe qemu.user.aarch64.kvm_ioctl = process("/usr/bin/qemu-aarch64").mark("kvm_ioctl")
{
  type = $arg1;
  arg = $arg2;
}
probe qemu.user.aarch64.kvm_vm_ioctl = process("/usr/bin/qemu-aarch64").mark("kvm_vm_ioctl")
{
  type = $arg1;
  arg = $arg2;
}
probe qemu.user.aarch64.kvm_vcpu_ioctl = process("/usr/bin/qemu-aarch64").mark("kvm_vcpu_ioctl")
{
  cpu_index = $arg1;
  type = $arg2;
  arg = $arg3;
}
probe qemu.user.aarch64.kvm_run_exit = process("/usr/bin/qemu-aarch64").mark("kvm_run_exit")
{
  cpu_index = $arg1;
  reason = $arg2;
}
probe qemu.user.aarch64.kvm_device_ioctl = process("/usr/bin/qemu-aarch64").mark("kvm_device_ioctl")
{
  fd = $arg1;
  type = $arg2;
  arg = $arg3;
}
probe qemu.user.aarch64.kvm_failed_reg_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_reg_get")
{
  id = $arg1;
  msg = $arg2;
}
probe qemu.user.aarch64.kvm_failed_reg_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_reg_set")
{
  id = $arg1;
  msg = $arg2;
}
probe qemu.user.aarch64.kvm_init_vcpu = process("/usr/bin/qemu-aarch64").mark("kvm_init_vcpu")
{
  cpu_index = $arg1;
  arch_cpu_id = $arg2;
}
probe qemu.user.aarch64.kvm_irqchip_commit_routes = process("/usr/bin/qemu-aarch64").mark("kvm_irqchip_commit_routes")
{
}
probe qemu.user.aarch64.kvm_irqchip_add_msi_route = process("/usr/bin/qemu-aarch64").mark("kvm_irqchip_add_msi_route")
{
  name = $arg1;
  vector = $arg2;
  virq = $arg3;
}
probe qemu.user.aarch64.kvm_irqchip_update_msi_route = process("/usr/bin/qemu-aarch64").mark("kvm_irqchip_update_msi_route")
{
  virq = $arg1;
}
probe qemu.user.aarch64.kvm_irqchip_release_virq = process("/usr/bin/qemu-aarch64").mark("kvm_irqchip_release_virq")
{
  virq = $arg1;
}
probe qemu.user.aarch64.kvm_set_ioeventfd_mmio = process("/usr/bin/qemu-aarch64").mark("kvm_set_ioeventfd_mmio")
{
  fd = $arg1;
  addr = $arg2;
  val = $arg3;
  assign = $arg4;
  size = $arg5;
  datamatch = $arg6;
}
probe qemu.user.aarch64.kvm_set_ioeventfd_pio = process("/usr/bin/qemu-aarch64").mark("kvm_set_ioeventfd_pio")
{
  fd = $arg1;
  addr = $arg2;
  val = $arg3;
  assign = $arg4;
  size = $arg5;
  datamatch = $arg6;
}
probe qemu.user.aarch64.kvm_set_user_memory = process("/usr/bin/qemu-aarch64").mark("kvm_set_user_memory")
{
  slot = $arg1;
  flags = $arg2;
  guest_phys_addr = $arg3;
  memory_size = $arg4;
  userspace_addr = $arg5;
  ret = $arg6;
}
probe qemu.user.aarch64.kvm_clear_dirty_log = process("/usr/bin/qemu-aarch64").mark("kvm_clear_dirty_log")
{
  slot = $arg1;
  start = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.kvm_resample_fd_notify = process("/usr/bin/qemu-aarch64").mark("kvm_resample_fd_notify")
{
  gsi = $arg1;
}
probe qemu.user.aarch64.kvm_dirty_ring_full = process("/usr/bin/qemu-aarch64").mark("kvm_dirty_ring_full")
{
  id = $arg1;
}
probe qemu.user.aarch64.kvm_dirty_ring_reap_vcpu = process("/usr/bin/qemu-aarch64").mark("kvm_dirty_ring_reap_vcpu")
{
  id = $arg1;
}
probe qemu.user.aarch64.kvm_dirty_ring_page = process("/usr/bin/qemu-aarch64").mark("kvm_dirty_ring_page")
{
  vcpu = $arg1;
  slot = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.kvm_dirty_ring_reaper = process("/usr/bin/qemu-aarch64").mark("kvm_dirty_ring_reaper")
{
  s = $arg1;
}
probe qemu.user.aarch64.kvm_dirty_ring_reap = process("/usr/bin/qemu-aarch64").mark("kvm_dirty_ring_reap")
{
  count = $arg1;
  t = $arg2;
}
probe qemu.user.aarch64.kvm_dirty_ring_reaper_kick = process("/usr/bin/qemu-aarch64").mark("kvm_dirty_ring_reaper_kick")
{
  reason = $arg1;
}
probe qemu.user.aarch64.kvm_dirty_ring_flush = process("/usr/bin/qemu-aarch64").mark("kvm_dirty_ring_flush")
{
  finished = $arg1;
}
probe qemu.user.aarch64.alsa_revents = process("/usr/bin/qemu-aarch64").mark("alsa_revents")
{
  revents = $arg1;
}
probe qemu.user.aarch64.alsa_pollout = process("/usr/bin/qemu-aarch64").mark("alsa_pollout")
{
  i = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.alsa_set_handler = process("/usr/bin/qemu-aarch64").mark("alsa_set_handler")
{
  events = $arg1;
  index = $arg2;
  fd = $arg3;
  err = $arg4;
}
probe qemu.user.aarch64.alsa_wrote_zero = process("/usr/bin/qemu-aarch64").mark("alsa_wrote_zero")
{
  len = $arg1;
}
probe qemu.user.aarch64.alsa_read_zero = process("/usr/bin/qemu-aarch64").mark("alsa_read_zero")
{
  len = $arg1;
}
probe qemu.user.aarch64.alsa_xrun_out = process("/usr/bin/qemu-aarch64").mark("alsa_xrun_out")
{
}
probe qemu.user.aarch64.alsa_xrun_in = process("/usr/bin/qemu-aarch64").mark("alsa_xrun_in")
{
}
probe qemu.user.aarch64.alsa_resume_out = process("/usr/bin/qemu-aarch64").mark("alsa_resume_out")
{
}
probe qemu.user.aarch64.oss_version = process("/usr/bin/qemu-aarch64").mark("oss_version")
{
  version = $arg1;
}
probe qemu.user.aarch64.dbus_audio_register = process("/usr/bin/qemu-aarch64").mark("dbus_audio_register")
{
  s = $arg1;
  dir = $arg2;
}
probe qemu.user.aarch64.dbus_audio_put_buffer_out = process("/usr/bin/qemu-aarch64").mark("dbus_audio_put_buffer_out")
{
  len = $arg1;
}
probe qemu.user.aarch64.dbus_audio_read = process("/usr/bin/qemu-aarch64").mark("dbus_audio_read")
{
  len = $arg1;
}
probe qemu.user.aarch64.audio_timer_start = process("/usr/bin/qemu-aarch64").mark("audio_timer_start")
{
  interval = $arg1;
}
probe qemu.user.aarch64.audio_timer_stop = process("/usr/bin/qemu-aarch64").mark("audio_timer_stop")
{
}
probe qemu.user.aarch64.audio_timer_delayed = process("/usr/bin/qemu-aarch64").mark("audio_timer_delayed")
{
  interval = $arg1;
}
probe qemu.user.aarch64.dbus_vmstate_pre_save = process("/usr/bin/qemu-aarch64").mark("dbus_vmstate_pre_save")
{
}
probe qemu.user.aarch64.dbus_vmstate_post_load = process("/usr/bin/qemu-aarch64").mark("dbus_vmstate_post_load")
{
  version_id = $arg1;
}
probe qemu.user.aarch64.dbus_vmstate_loading = process("/usr/bin/qemu-aarch64").mark("dbus_vmstate_loading")
{
  id = $arg1;
}
probe qemu.user.aarch64.dbus_vmstate_saving = process("/usr/bin/qemu-aarch64").mark("dbus_vmstate_saving")
{
  id = $arg1;
}
probe qemu.user.aarch64.tpm_passthrough_handle_request = process("/usr/bin/qemu-aarch64").mark("tpm_passthrough_handle_request")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.tpm_passthrough_reset = process("/usr/bin/qemu-aarch64").mark("tpm_passthrough_reset")
{
}
probe qemu.user.aarch64.tpm_util_get_buffer_size_hdr_len = process("/usr/bin/qemu-aarch64").mark("tpm_util_get_buffer_size_hdr_len")
{
  len = $arg1;
  expected = $arg2;
}
probe qemu.user.aarch64.tpm_util_get_buffer_size_len = process("/usr/bin/qemu-aarch64").mark("tpm_util_get_buffer_size_len")
{
  len = $arg1;
  expected = $arg2;
}
probe qemu.user.aarch64.tpm_util_get_buffer_size_hdr_len2 = process("/usr/bin/qemu-aarch64").mark("tpm_util_get_buffer_size_hdr_len2")
{
  len = $arg1;
  expected = $arg2;
}
probe qemu.user.aarch64.tpm_util_get_buffer_size_len2 = process("/usr/bin/qemu-aarch64").mark("tpm_util_get_buffer_size_len2")
{
  len = $arg1;
  expected = $arg2;
}
probe qemu.user.aarch64.tpm_util_get_buffer_size = process("/usr/bin/qemu-aarch64").mark("tpm_util_get_buffer_size")
{
  len = $arg1;
}
probe qemu.user.aarch64.tpm_util_show_buffer = process("/usr/bin/qemu-aarch64").mark("tpm_util_show_buffer")
{
  direction = $arg1;
  len = $arg2;
  buf = $arg3;
}
probe qemu.user.aarch64.tpm_emulator_set_locality = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_set_locality")
{
  locty = $arg1;
}
probe qemu.user.aarch64.tpm_emulator_handle_request = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_handle_request")
{
}
probe qemu.user.aarch64.tpm_emulator_probe_caps = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_probe_caps")
{
  caps = $arg1;
}
probe qemu.user.aarch64.tpm_emulator_set_buffer_size = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_set_buffer_size")
{
  buffersize = $arg1;
  minsize = $arg2;
  maxsize = $arg3;
}
probe qemu.user.aarch64.tpm_emulator_startup_tpm_resume = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_startup_tpm_resume")
{
  is_resume = $arg1;
  buffersize = $arg2;
}
probe qemu.user.aarch64.tpm_emulator_get_tpm_established_flag = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_get_tpm_established_flag")
{
  flag = $arg1;
}
probe qemu.user.aarch64.tpm_emulator_cancel_cmd_not_supt = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_cancel_cmd_not_supt")
{
}
probe qemu.user.aarch64.tpm_emulator_lock_storage_cmd_not_supt = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_lock_storage_cmd_not_supt")
{
}
probe qemu.user.aarch64.tpm_emulator_vm_state_change = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_vm_state_change")
{
  running = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.tpm_emulator_handle_device_opts_tpm12 = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_handle_device_opts_tpm12")
{
}
probe qemu.user.aarch64.tpm_emulator_handle_device_opts_tpm2 = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_handle_device_opts_tpm2")
{
}
probe qemu.user.aarch64.tpm_emulator_handle_device_opts_unspec = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_handle_device_opts_unspec")
{
}
probe qemu.user.aarch64.tpm_emulator_handle_device_opts_startup_error = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_handle_device_opts_startup_error")
{
}
probe qemu.user.aarch64.tpm_emulator_get_state_blob = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_get_state_blob")
{
  type = $arg1;
  size = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.tpm_emulator_set_state_blob = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_set_state_blob")
{
  type = $arg1;
  size = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.tpm_emulator_set_state_blobs = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_set_state_blobs")
{
}
probe qemu.user.aarch64.tpm_emulator_set_state_blobs_error = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_set_state_blobs_error")
{
  msg = $arg1;
}
probe qemu.user.aarch64.tpm_emulator_set_state_blobs_done = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_set_state_blobs_done")
{
}
probe qemu.user.aarch64.tpm_emulator_pre_save = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_pre_save")
{
}
probe qemu.user.aarch64.tpm_emulator_inst_init = process("/usr/bin/qemu-aarch64").mark("tpm_emulator_inst_init")
{
}
probe qemu.user.aarch64.wct_init = process("/usr/bin/qemu-aarch64").mark("wct_init")
{
}
probe qemu.user.aarch64.wct_cmd_re = process("/usr/bin/qemu-aarch64").mark("wct_cmd_re")
{
}
probe qemu.user.aarch64.wct_cmd_st = process("/usr/bin/qemu-aarch64").mark("wct_cmd_st")
{
}
probe qemu.user.aarch64.wct_cmd_sp = process("/usr/bin/qemu-aarch64").mark("wct_cmd_sp")
{
}
probe qemu.user.aarch64.wct_cmd_ts = process("/usr/bin/qemu-aarch64").mark("wct_cmd_ts")
{
  input = $arg1;
}
probe qemu.user.aarch64.wct_cmd_other = process("/usr/bin/qemu-aarch64").mark("wct_cmd_other")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.wct_speed = process("/usr/bin/qemu-aarch64").mark("wct_speed")
{
  speed = $arg1;
}
probe qemu.user.aarch64.spice_chr_discard_write = process("/usr/bin/qemu-aarch64").mark("spice_chr_discard_write")
{
  len = $arg1;
}
probe qemu.user.aarch64.spice_vmc_write = process("/usr/bin/qemu-aarch64").mark("spice_vmc_write")
{
  out = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.spice_vmc_read = process("/usr/bin/qemu-aarch64").mark("spice_vmc_read")
{
  bytes = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.spice_vmc_register_interface = process("/usr/bin/qemu-aarch64").mark("spice_vmc_register_interface")
{
  scd = $arg1;
}
probe qemu.user.aarch64.spice_vmc_unregister_interface = process("/usr/bin/qemu-aarch64").mark("spice_vmc_unregister_interface")
{
  scd = $arg1;
}
probe qemu.user.aarch64.spice_vmc_event = process("/usr/bin/qemu-aarch64").mark("spice_vmc_event")
{
  event = $arg1;
}
probe qemu.user.aarch64.ebpf_error = process("/usr/bin/qemu-aarch64").mark("ebpf_error")
{
  s1 = $arg1;
  s2 = $arg2;
}
probe qemu.user.aarch64.v9fs_rcancel = process("/usr/bin/qemu-aarch64").mark("v9fs_rcancel")
{
  tag = $arg1;
  id = $arg2;
}
probe qemu.user.aarch64.v9fs_rerror = process("/usr/bin/qemu-aarch64").mark("v9fs_rerror")
{
  tag = $arg1;
  id = $arg2;
  err = $arg3;
}
probe qemu.user.aarch64.v9fs_version = process("/usr/bin/qemu-aarch64").mark("v9fs_version")
{
  tag = $arg1;
  id = $arg2;
  msize = $arg3;
  version = $arg4;
}
probe qemu.user.aarch64.v9fs_version_return = process("/usr/bin/qemu-aarch64").mark("v9fs_version_return")
{
  tag = $arg1;
  id = $arg2;
  msize = $arg3;
  version = $arg4;
}
probe qemu.user.aarch64.v9fs_attach = process("/usr/bin/qemu-aarch64").mark("v9fs_attach")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  afid = $arg4;
  uname = $arg5;
  aname = $arg6;
}
probe qemu.user.aarch64.v9fs_attach_return = process("/usr/bin/qemu-aarch64").mark("v9fs_attach_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
}
probe qemu.user.aarch64.v9fs_stat = process("/usr/bin/qemu-aarch64").mark("v9fs_stat")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.user.aarch64.v9fs_stat_return = process("/usr/bin/qemu-aarch64").mark("v9fs_stat_return")
{
  tag = $arg1;
  id = $arg2;
  mode = $arg3;
  atime = $arg4;
  mtime = $arg5;
  length = $arg6;
}
probe qemu.user.aarch64.v9fs_getattr = process("/usr/bin/qemu-aarch64").mark("v9fs_getattr")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  request_mask = $arg4;
}
probe qemu.user.aarch64.v9fs_getattr_return = process("/usr/bin/qemu-aarch64").mark("v9fs_getattr_return")
{
  tag = $arg1;
  id = $arg2;
  result_mask = $arg3;
  mode = $arg4;
  uid = $arg5;
  gid = $arg6;
}
probe qemu.user.aarch64.v9fs_walk = process("/usr/bin/qemu-aarch64").mark("v9fs_walk")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  newfid = $arg4;
  nwnames = $arg5;
}
probe qemu.user.aarch64.v9fs_walk_return = process("/usr/bin/qemu-aarch64").mark("v9fs_walk_return")
{
  tag = $arg1;
  id = $arg2;
  nwnames = $arg3;
  qids = $arg4;
}
probe qemu.user.aarch64.v9fs_open = process("/usr/bin/qemu-aarch64").mark("v9fs_open")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  mode = $arg4;
}
probe qemu.user.aarch64.v9fs_open_return = process("/usr/bin/qemu-aarch64").mark("v9fs_open_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  iounit = $arg6;
}
probe qemu.user.aarch64.v9fs_lcreate = process("/usr/bin/qemu-aarch64").mark("v9fs_lcreate")
{
  tag = $arg1;
  id = $arg2;
  dfid = $arg3;
  flags = $arg4;
  mode = $arg5;
  gid = $arg6;
}
probe qemu.user.aarch64.v9fs_lcreate_return = process("/usr/bin/qemu-aarch64").mark("v9fs_lcreate_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  iounit = $arg6;
}
probe qemu.user.aarch64.v9fs_fsync = process("/usr/bin/qemu-aarch64").mark("v9fs_fsync")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  datasync = $arg4;
}
probe qemu.user.aarch64.v9fs_clunk = process("/usr/bin/qemu-aarch64").mark("v9fs_clunk")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.user.aarch64.v9fs_read = process("/usr/bin/qemu-aarch64").mark("v9fs_read")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  off = $arg4;
  max_count = $arg5;
}
probe qemu.user.aarch64.v9fs_read_return = process("/usr/bin/qemu-aarch64").mark("v9fs_read_return")
{
  tag = $arg1;
  id = $arg2;
  count = $arg3;
  err = $arg4;
}
probe qemu.user.aarch64.v9fs_readdir = process("/usr/bin/qemu-aarch64").mark("v9fs_readdir")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  offset = $arg4;
  max_count = $arg5;
}
probe qemu.user.aarch64.v9fs_readdir_return = process("/usr/bin/qemu-aarch64").mark("v9fs_readdir_return")
{
  tag = $arg1;
  id = $arg2;
  count = $arg3;
  retval = $arg4;
}
probe qemu.user.aarch64.v9fs_write = process("/usr/bin/qemu-aarch64").mark("v9fs_write")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  off = $arg4;
  count = $arg5;
  cnt = $arg6;
}
probe qemu.user.aarch64.v9fs_write_return = process("/usr/bin/qemu-aarch64").mark("v9fs_write_return")
{
  tag = $arg1;
  id = $arg2;
  total = $arg3;
  err = $arg4;
}
probe qemu.user.aarch64.v9fs_create = process("/usr/bin/qemu-aarch64").mark("v9fs_create")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  perm = $arg5;
  mode = $arg6;
}
probe qemu.user.aarch64.v9fs_create_return = process("/usr/bin/qemu-aarch64").mark("v9fs_create_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  iounit = $arg6;
}
probe qemu.user.aarch64.v9fs_symlink = process("/usr/bin/qemu-aarch64").mark("v9fs_symlink")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  symname = $arg5;
  gid = $arg6;
}
probe qemu.user.aarch64.v9fs_symlink_return = process("/usr/bin/qemu-aarch64").mark("v9fs_symlink_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
}
probe qemu.user.aarch64.v9fs_flush = process("/usr/bin/qemu-aarch64").mark("v9fs_flush")
{
  tag = $arg1;
  id = $arg2;
  flush_tag = $arg3;
}
probe qemu.user.aarch64.v9fs_link = process("/usr/bin/qemu-aarch64").mark("v9fs_link")
{
  tag = $arg1;
  id = $arg2;
  dfid = $arg3;
  oldfid = $arg4;
  name = $arg5;
}
probe qemu.user.aarch64.v9fs_remove = process("/usr/bin/qemu-aarch64").mark("v9fs_remove")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.user.aarch64.v9fs_wstat = process("/usr/bin/qemu-aarch64").mark("v9fs_wstat")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  mode = $arg4;
  atime = $arg5;
  mtime = $arg6;
}
probe qemu.user.aarch64.v9fs_mknod = process("/usr/bin/qemu-aarch64").mark("v9fs_mknod")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  mode = $arg4;
  major = $arg5;
  minor = $arg6;
}
probe qemu.user.aarch64.v9fs_mknod_return = process("/usr/bin/qemu-aarch64").mark("v9fs_mknod_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
}
probe qemu.user.aarch64.v9fs_lock = process("/usr/bin/qemu-aarch64").mark("v9fs_lock")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  type = $arg4;
  start = $arg5;
  length = $arg6;
}
probe qemu.user.aarch64.v9fs_lock_return = process("/usr/bin/qemu-aarch64").mark("v9fs_lock_return")
{
  tag = $arg1;
  id = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.v9fs_getlock = process("/usr/bin/qemu-aarch64").mark("v9fs_getlock")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  type = $arg4;
  start = $arg5;
  length = $arg6;
}
probe qemu.user.aarch64.v9fs_getlock_return = process("/usr/bin/qemu-aarch64").mark("v9fs_getlock_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  start = $arg4;
  length = $arg5;
  proc_id = $arg6;
}
probe qemu.user.aarch64.v9fs_mkdir = process("/usr/bin/qemu-aarch64").mark("v9fs_mkdir")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  mode = $arg5;
  gid = $arg6;
}
probe qemu.user.aarch64.v9fs_mkdir_return = process("/usr/bin/qemu-aarch64").mark("v9fs_mkdir_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  err = $arg6;
}
probe qemu.user.aarch64.v9fs_xattrwalk = process("/usr/bin/qemu-aarch64").mark("v9fs_xattrwalk")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  newfid = $arg4;
  name = $arg5;
}
probe qemu.user.aarch64.v9fs_xattrwalk_return = process("/usr/bin/qemu-aarch64").mark("v9fs_xattrwalk_return")
{
  tag = $arg1;
  id = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.v9fs_xattrcreate = process("/usr/bin/qemu-aarch64").mark("v9fs_xattrcreate")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  size = $arg5;
  flags = $arg6;
}
probe qemu.user.aarch64.v9fs_readlink = process("/usr/bin/qemu-aarch64").mark("v9fs_readlink")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.user.aarch64.v9fs_readlink_return = process("/usr/bin/qemu-aarch64").mark("v9fs_readlink_return")
{
  tag = $arg1;
  id = $arg2;
  target = $arg3;
}
probe qemu.user.aarch64.v9fs_setattr = process("/usr/bin/qemu-aarch64").mark("v9fs_setattr")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  valid = $arg4;
  mode = $arg5;
  uid = $arg6;
  gid = $arg7;
  size = $arg8;
  atime_sec = $arg9;
  mtime_sec = $arg10;
}
probe qemu.user.aarch64.v9fs_setattr_return = process("/usr/bin/qemu-aarch64").mark("v9fs_setattr_return")
{
  tag = $arg1;
  id = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_invalid_slot_selected = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_invalid_slot_selected")
{
  slot = $arg1;
}
probe qemu.user.aarch64.mhp_acpi_ejecting_invalid_slot = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_ejecting_invalid_slot")
{
  slot = $arg1;
}
probe qemu.user.aarch64.mhp_acpi_read_addr_lo = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_read_addr_lo")
{
  slot = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_read_addr_hi = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_read_addr_hi")
{
  slot = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_read_size_lo = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_read_size_lo")
{
  slot = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_read_size_hi = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_read_size_hi")
{
  slot = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_read_pxm = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_read_pxm")
{
  slot = $arg1;
  pxm = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_read_flags = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_read_flags")
{
  slot = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_write_slot = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_write_slot")
{
  slot = $arg1;
}
probe qemu.user.aarch64.mhp_acpi_write_ost_ev = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_write_ost_ev")
{
  slot = $arg1;
  ev = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_write_ost_status = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_write_ost_status")
{
  slot = $arg1;
  st = $arg2;
}
probe qemu.user.aarch64.mhp_acpi_clear_insert_evt = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_clear_insert_evt")
{
  slot = $arg1;
}
probe qemu.user.aarch64.mhp_acpi_clear_remove_evt = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_clear_remove_evt")
{
  slot = $arg1;
}
probe qemu.user.aarch64.mhp_acpi_pc_dimm_deleted = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_pc_dimm_deleted")
{
  slot = $arg1;
}
probe qemu.user.aarch64.mhp_acpi_pc_dimm_delete_failed = process("/usr/bin/qemu-aarch64").mark("mhp_acpi_pc_dimm_delete_failed")
{
  slot = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_invalid_idx_selected = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_invalid_idx_selected")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_read_flags = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_read_flags")
{
  idx = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.cpuhp_acpi_write_idx = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_write_idx")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_write_cmd = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_write_cmd")
{
  idx = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.cpuhp_acpi_read_cmd_data = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_read_cmd_data")
{
  idx = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.cpuhp_acpi_read_cmd_data2 = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_read_cmd_data2")
{
  idx = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.cpuhp_acpi_cpu_has_events = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_cpu_has_events")
{
  idx = $arg1;
  ins = $arg2;
  rm = $arg3;
}
probe qemu.user.aarch64.cpuhp_acpi_clear_inserting_evt = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_clear_inserting_evt")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_clear_remove_evt = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_clear_remove_evt")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_ejecting_invalid_cpu = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_ejecting_invalid_cpu")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_ejecting_cpu = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_ejecting_cpu")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_fw_remove_invalid_cpu = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_fw_remove_invalid_cpu")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_fw_remove_cpu = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_fw_remove_cpu")
{
  idx = $arg1;
}
probe qemu.user.aarch64.cpuhp_acpi_write_ost_ev = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_write_ost_ev")
{
  slot = $arg1;
  ev = $arg2;
}
probe qemu.user.aarch64.cpuhp_acpi_write_ost_status = process("/usr/bin/qemu-aarch64").mark("cpuhp_acpi_write_ost_status")
{
  slot = $arg1;
  st = $arg2;
}
probe qemu.user.aarch64.acpi_pci_eject_slot = process("/usr/bin/qemu-aarch64").mark("acpi_pci_eject_slot")
{
  bsel = $arg1;
  slot = $arg2;
}
probe qemu.user.aarch64.acpi_pci_unplug = process("/usr/bin/qemu-aarch64").mark("acpi_pci_unplug")
{
  bsel = $arg1;
  slot = $arg2;
}
probe qemu.user.aarch64.acpi_pci_unplug_request = process("/usr/bin/qemu-aarch64").mark("acpi_pci_unplug_request")
{
  bsel = $arg1;
  slot = $arg2;
}
probe qemu.user.aarch64.acpi_pci_up_read = process("/usr/bin/qemu-aarch64").mark("acpi_pci_up_read")
{
  val = $arg1;
}
probe qemu.user.aarch64.acpi_pci_down_read = process("/usr/bin/qemu-aarch64").mark("acpi_pci_down_read")
{
  val = $arg1;
}
probe qemu.user.aarch64.acpi_pci_features_read = process("/usr/bin/qemu-aarch64").mark("acpi_pci_features_read")
{
  val = $arg1;
}
probe qemu.user.aarch64.acpi_pci_acpi_index_read = process("/usr/bin/qemu-aarch64").mark("acpi_pci_acpi_index_read")
{
  val = $arg1;
}
probe qemu.user.aarch64.acpi_pci_acpi_index_write = process("/usr/bin/qemu-aarch64").mark("acpi_pci_acpi_index_write")
{
  bsel = $arg1;
  slot = $arg2;
  aidx = $arg3;
}
probe qemu.user.aarch64.acpi_pci_rmv_read = process("/usr/bin/qemu-aarch64").mark("acpi_pci_rmv_read")
{
  val = $arg1;
}
probe qemu.user.aarch64.acpi_pci_sel_read = process("/usr/bin/qemu-aarch64").mark("acpi_pci_sel_read")
{
  val = $arg1;
}
probe qemu.user.aarch64.acpi_pci_ej_write = process("/usr/bin/qemu-aarch64").mark("acpi_pci_ej_write")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.acpi_pci_sel_write = process("/usr/bin/qemu-aarch64").mark("acpi_pci_sel_write")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.piix4_gpe_readb = process("/usr/bin/qemu-aarch64").mark("piix4_gpe_readb")
{
  addr = $arg1;
  width = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.piix4_gpe_writeb = process("/usr/bin/qemu-aarch64").mark("piix4_gpe_writeb")
{
  addr = $arg1;
  width = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.tco_timer_reload = process("/usr/bin/qemu-aarch64").mark("tco_timer_reload")
{
  ticks = $arg1;
  msec = $arg2;
}
probe qemu.user.aarch64.tco_timer_expired = process("/usr/bin/qemu-aarch64").mark("tco_timer_expired")
{
  timeouts_no = $arg1;
  strap = $arg2;
  no_reboot = $arg3;
}
probe qemu.user.aarch64.acpi_erst_reg_write = process("/usr/bin/qemu-aarch64").mark("acpi_erst_reg_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.acpi_erst_reg_read = process("/usr/bin/qemu-aarch64").mark("acpi_erst_reg_read")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.acpi_erst_mem_write = process("/usr/bin/qemu-aarch64").mark("acpi_erst_mem_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.acpi_erst_mem_read = process("/usr/bin/qemu-aarch64").mark("acpi_erst_mem_read")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.acpi_erst_pci_bar_0 = process("/usr/bin/qemu-aarch64").mark("acpi_erst_pci_bar_0")
{
  addr = $arg1;
}
probe qemu.user.aarch64.acpi_erst_pci_bar_1 = process("/usr/bin/qemu-aarch64").mark("acpi_erst_pci_bar_1")
{
  addr = $arg1;
}
probe qemu.user.aarch64.acpi_erst_realizefn_in = process("/usr/bin/qemu-aarch64").mark("acpi_erst_realizefn_in")
{
}
probe qemu.user.aarch64.acpi_erst_realizefn_out = process("/usr/bin/qemu-aarch64").mark("acpi_erst_realizefn_out")
{
  size = $arg1;
}
probe qemu.user.aarch64.acpi_erst_reset_in = process("/usr/bin/qemu-aarch64").mark("acpi_erst_reset_in")
{
  record_count = $arg1;
}
probe qemu.user.aarch64.acpi_erst_reset_out = process("/usr/bin/qemu-aarch64").mark("acpi_erst_reset_out")
{
  record_count = $arg1;
}
probe qemu.user.aarch64.acpi_erst_post_load = process("/usr/bin/qemu-aarch64").mark("acpi_erst_post_load")
{
  header = $arg1;
  slot_size = $arg2;
}
probe qemu.user.aarch64.acpi_erst_class_init_in = process("/usr/bin/qemu-aarch64").mark("acpi_erst_class_init_in")
{
}
probe qemu.user.aarch64.acpi_erst_class_init_out = process("/usr/bin/qemu-aarch64").mark("acpi_erst_class_init_out")
{
}
probe qemu.user.aarch64.acpi_nvdimm_read_fit = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_read_fit")
{
  offset = $arg1;
  len = $arg2;
  dirty = $arg3;
}
probe qemu.user.aarch64.acpi_nvdimm_label_info = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_label_info")
{
  label_size = $arg1;
  mxfer = $arg2;
}
probe qemu.user.aarch64.acpi_nvdimm_label_overflow = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_label_overflow")
{
  offset = $arg1;
  length = $arg2;
}
probe qemu.user.aarch64.acpi_nvdimm_label_oversize = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_label_oversize")
{
  pos = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.acpi_nvdimm_label_xfer_exceed = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_label_xfer_exceed")
{
  length = $arg1;
  max_xfer = $arg2;
}
probe qemu.user.aarch64.acpi_nvdimm_read_label = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_read_label")
{
  offset = $arg1;
  length = $arg2;
}
probe qemu.user.aarch64.acpi_nvdimm_write_label = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_write_label")
{
  offset = $arg1;
  length = $arg2;
}
probe qemu.user.aarch64.acpi_nvdimm_read_io_port = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_read_io_port")
{
}
probe qemu.user.aarch64.acpi_nvdimm_dsm_mem_addr = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_dsm_mem_addr")
{
  dsm_mem_addr = $arg1;
}
probe qemu.user.aarch64.acpi_nvdimm_dsm_info = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_dsm_info")
{
  revision = $arg1;
  handle = $arg2;
  function_ = $arg3;
}
probe qemu.user.aarch64.acpi_nvdimm_invalid_revision = process("/usr/bin/qemu-aarch64").mark("acpi_nvdimm_invalid_revision")
{
  revision = $arg1;
}
probe qemu.user.aarch64.npcm7xx_adc_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_adc_read")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_adc_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_adc_write")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.aspeed_adc_engine_read = process("/usr/bin/qemu-aarch64").mark("aspeed_adc_engine_read")
{
  engine_id = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.aspeed_adc_engine_write = process("/usr/bin/qemu-aarch64").mark("aspeed_adc_engine_write")
{
  engine_id = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.alpha_pci_iack_write = process("/usr/bin/qemu-aarch64").mark("alpha_pci_iack_write")
{
}
probe qemu.user.aarch64.virt_acpi_setup = process("/usr/bin/qemu-aarch64").mark("virt_acpi_setup")
{
}
probe qemu.user.aarch64.smmu_add_mr = process("/usr/bin/qemu-aarch64").mark("smmu_add_mr")
{
  name = $arg1;
}
probe qemu.user.aarch64.smmu_ptw_level = process("/usr/bin/qemu-aarch64").mark("smmu_ptw_level")
{
  level = $arg1;
  iova = $arg2;
  subpage_size = $arg3;
  baseaddr = $arg4;
  offset = $arg5;
  pte = $arg6;
}
probe qemu.user.aarch64.smmu_ptw_invalid_pte = process("/usr/bin/qemu-aarch64").mark("smmu_ptw_invalid_pte")
{
  stage = $arg1;
  level = $arg2;
  baseaddr = $arg3;
  pteaddr = $arg4;
  offset = $arg5;
  pte = $arg6;
}
probe qemu.user.aarch64.smmu_ptw_page_pte = process("/usr/bin/qemu-aarch64").mark("smmu_ptw_page_pte")
{
  stage = $arg1;
  level = $arg2;
  iova = $arg3;
  baseaddr = $arg4;
  pteaddr = $arg5;
  pte = $arg6;
  address = $arg7;
}
probe qemu.user.aarch64.smmu_ptw_block_pte = process("/usr/bin/qemu-aarch64").mark("smmu_ptw_block_pte")
{
  stage = $arg1;
  level = $arg2;
  baseaddr = $arg3;
  pteaddr = $arg4;
  pte = $arg5;
  iova = $arg6;
  gpa = $arg7;
  bsize_mb = $arg8;
}
probe qemu.user.aarch64.smmu_get_pte = process("/usr/bin/qemu-aarch64").mark("smmu_get_pte")
{
  baseaddr = $arg1;
  index = $arg2;
  pteaddr = $arg3;
  pte = $arg4;
}
probe qemu.user.aarch64.smmu_iotlb_inv_all = process("/usr/bin/qemu-aarch64").mark("smmu_iotlb_inv_all")
{
}
probe qemu.user.aarch64.smmu_iotlb_inv_asid = process("/usr/bin/qemu-aarch64").mark("smmu_iotlb_inv_asid")
{
  asid = $arg1;
}
probe qemu.user.aarch64.smmu_iotlb_inv_iova = process("/usr/bin/qemu-aarch64").mark("smmu_iotlb_inv_iova")
{
  asid = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.smmu_inv_notifiers_mr = process("/usr/bin/qemu-aarch64").mark("smmu_inv_notifiers_mr")
{
  name = $arg1;
}
probe qemu.user.aarch64.smmu_iotlb_lookup_hit = process("/usr/bin/qemu-aarch64").mark("smmu_iotlb_lookup_hit")
{
  asid = $arg1;
  addr = $arg2;
  hit = $arg3;
  miss = $arg4;
  p = $arg5;
}
probe qemu.user.aarch64.smmu_iotlb_lookup_miss = process("/usr/bin/qemu-aarch64").mark("smmu_iotlb_lookup_miss")
{
  asid = $arg1;
  addr = $arg2;
  hit = $arg3;
  miss = $arg4;
  p = $arg5;
}
probe qemu.user.aarch64.smmu_iotlb_insert = process("/usr/bin/qemu-aarch64").mark("smmu_iotlb_insert")
{
  asid = $arg1;
  addr = $arg2;
  tg = $arg3;
  level = $arg4;
}
probe qemu.user.aarch64.smmuv3_read_mmio = process("/usr/bin/qemu-aarch64").mark("smmuv3_read_mmio")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
  r = $arg4;
}
probe qemu.user.aarch64.smmuv3_trigger_irq = process("/usr/bin/qemu-aarch64").mark("smmuv3_trigger_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.smmuv3_write_gerror = process("/usr/bin/qemu-aarch64").mark("smmuv3_write_gerror")
{
  toggled = $arg1;
  gerror = $arg2;
}
probe qemu.user.aarch64.smmuv3_write_gerrorn = process("/usr/bin/qemu-aarch64").mark("smmuv3_write_gerrorn")
{
  acked = $arg1;
  gerrorn = $arg2;
}
probe qemu.user.aarch64.smmuv3_unhandled_cmd = process("/usr/bin/qemu-aarch64").mark("smmuv3_unhandled_cmd")
{
  type = $arg1;
}
probe qemu.user.aarch64.smmuv3_cmdq_consume = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_consume")
{
  prod = $arg1;
  cons = $arg2;
  prod_wrap = $arg3;
  cons_wrap = $arg4;
}
probe qemu.user.aarch64.smmuv3_cmdq_opcode = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_opcode")
{
  opcode = $arg1;
}
probe qemu.user.aarch64.smmuv3_cmdq_consume_out = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_consume_out")
{
  prod = $arg1;
  cons = $arg2;
  prod_wrap = $arg3;
  cons_wrap = $arg4;
}
probe qemu.user.aarch64.smmuv3_cmdq_consume_error = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_consume_error")
{
  cmd_name = $arg1;
  cmd_error = $arg2;
}
probe qemu.user.aarch64.smmuv3_write_mmio = process("/usr/bin/qemu-aarch64").mark("smmuv3_write_mmio")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
  r = $arg4;
}
probe qemu.user.aarch64.smmuv3_record_event = process("/usr/bin/qemu-aarch64").mark("smmuv3_record_event")
{
  type = $arg1;
  sid = $arg2;
}
probe qemu.user.aarch64.smmuv3_find_ste = process("/usr/bin/qemu-aarch64").mark("smmuv3_find_ste")
{
  sid = $arg1;
  features = $arg2;
  sid_split = $arg3;
}
probe qemu.user.aarch64.smmuv3_find_ste_2lvl = process("/usr/bin/qemu-aarch64").mark("smmuv3_find_ste_2lvl")
{
  strtab_base = $arg1;
  l1ptr = $arg2;
  l1_ste_offset = $arg3;
  l2ptr = $arg4;
  l2_ste_offset = $arg5;
  max_l2_ste = $arg6;
}
probe qemu.user.aarch64.smmuv3_get_ste = process("/usr/bin/qemu-aarch64").mark("smmuv3_get_ste")
{
  addr = $arg1;
}
probe qemu.user.aarch64.smmuv3_translate_disable = process("/usr/bin/qemu-aarch64").mark("smmuv3_translate_disable")
{
  n = $arg1;
  sid = $arg2;
  addr = $arg3;
  is_write = $arg4;
}
probe qemu.user.aarch64.smmuv3_translate_bypass = process("/usr/bin/qemu-aarch64").mark("smmuv3_translate_bypass")
{
  n = $arg1;
  sid = $arg2;
  addr = $arg3;
  is_write = $arg4;
}
probe qemu.user.aarch64.smmuv3_translate_abort = process("/usr/bin/qemu-aarch64").mark("smmuv3_translate_abort")
{
  n = $arg1;
  sid = $arg2;
  addr = $arg3;
  is_write = $arg4;
}
probe qemu.user.aarch64.smmuv3_translate_success = process("/usr/bin/qemu-aarch64").mark("smmuv3_translate_success")
{
  n = $arg1;
  sid = $arg2;
  iova = $arg3;
  translated = $arg4;
  perm = $arg5;
}
probe qemu.user.aarch64.smmuv3_get_cd = process("/usr/bin/qemu-aarch64").mark("smmuv3_get_cd")
{
  addr = $arg1;
}
probe qemu.user.aarch64.smmuv3_decode_cd = process("/usr/bin/qemu-aarch64").mark("smmuv3_decode_cd")
{
  oas = $arg1;
}
probe qemu.user.aarch64.smmuv3_decode_cd_tt = process("/usr/bin/qemu-aarch64").mark("smmuv3_decode_cd_tt")
{
  i = $arg1;
  tsz = $arg2;
  ttb = $arg3;
  granule_sz = $arg4;
  had = $arg5;
}
probe qemu.user.aarch64.smmuv3_cmdq_cfgi_ste = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_cfgi_ste")
{
  streamid = $arg1;
}
probe qemu.user.aarch64.smmuv3_cmdq_cfgi_ste_range = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_cfgi_ste_range")
{
  start = $arg1;
  end = $arg2;
}
probe qemu.user.aarch64.smmuv3_cmdq_cfgi_cd = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_cfgi_cd")
{
  sid = $arg1;
}
probe qemu.user.aarch64.smmuv3_config_cache_hit = process("/usr/bin/qemu-aarch64").mark("smmuv3_config_cache_hit")
{
  sid = $arg1;
  hits = $arg2;
  misses = $arg3;
  perc = $arg4;
}
probe qemu.user.aarch64.smmuv3_config_cache_miss = process("/usr/bin/qemu-aarch64").mark("smmuv3_config_cache_miss")
{
  sid = $arg1;
  hits = $arg2;
  misses = $arg3;
  perc = $arg4;
}
probe qemu.user.aarch64.smmuv3_s1_range_inval = process("/usr/bin/qemu-aarch64").mark("smmuv3_s1_range_inval")
{
  vmid = $arg1;
  asid = $arg2;
  addr = $arg3;
  tg = $arg4;
  num_pages = $arg5;
  ttl = $arg6;
  leaf = $arg7;
}
probe qemu.user.aarch64.smmuv3_cmdq_tlbi_nh = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_tlbi_nh")
{
}
probe qemu.user.aarch64.smmuv3_cmdq_tlbi_nh_asid = process("/usr/bin/qemu-aarch64").mark("smmuv3_cmdq_tlbi_nh_asid")
{
  asid = $arg1;
}
probe qemu.user.aarch64.smmuv3_config_cache_inv = process("/usr/bin/qemu-aarch64").mark("smmuv3_config_cache_inv")
{
  sid = $arg1;
}
probe qemu.user.aarch64.smmuv3_notify_flag_add = process("/usr/bin/qemu-aarch64").mark("smmuv3_notify_flag_add")
{
  iommu = $arg1;
}
probe qemu.user.aarch64.smmuv3_notify_flag_del = process("/usr/bin/qemu-aarch64").mark("smmuv3_notify_flag_del")
{
  iommu = $arg1;
}
probe qemu.user.aarch64.smmuv3_inv_notifiers_iova = process("/usr/bin/qemu-aarch64").mark("smmuv3_inv_notifiers_iova")
{
  name = $arg1;
  asid = $arg2;
  iova = $arg3;
  tg = $arg4;
  num_pages = $arg5;
}
probe qemu.user.aarch64.cs4231_mem_readl_dreg = process("/usr/bin/qemu-aarch64").mark("cs4231_mem_readl_dreg")
{
  reg = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.cs4231_mem_readl_reg = process("/usr/bin/qemu-aarch64").mark("cs4231_mem_readl_reg")
{
  reg = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.cs4231_mem_writel_reg = process("/usr/bin/qemu-aarch64").mark("cs4231_mem_writel_reg")
{
  reg = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.cs4231_mem_writel_dreg = process("/usr/bin/qemu-aarch64").mark("cs4231_mem_writel_dreg")
{
  reg = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.hda_audio_running = process("/usr/bin/qemu-aarch64").mark("hda_audio_running")
{
  stream = $arg1;
  nr = $arg2;
  running = $arg3;
}
probe qemu.user.aarch64.hda_audio_format = process("/usr/bin/qemu-aarch64").mark("hda_audio_format")
{
  stream = $arg1;
  chan = $arg2;
  fmt = $arg3;
  freq = $arg4;
}
probe qemu.user.aarch64.hda_audio_adjust = process("/usr/bin/qemu-aarch64").mark("hda_audio_adjust")
{
  stream = $arg1;
  pos = $arg2;
}
probe qemu.user.aarch64.hda_audio_overrun = process("/usr/bin/qemu-aarch64").mark("hda_audio_overrun")
{
  stream = $arg1;
}
probe qemu.user.aarch64.fdc_ioport_read = process("/usr/bin/qemu-aarch64").mark("fdc_ioport_read")
{
  reg = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.fdc_ioport_write = process("/usr/bin/qemu-aarch64").mark("fdc_ioport_write")
{
  reg = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.fdctrl_tc_pulse = process("/usr/bin/qemu-aarch64").mark("fdctrl_tc_pulse")
{
  level = $arg1;
}
probe qemu.user.aarch64.pflash_chip_erase_invalid = process("/usr/bin/qemu-aarch64").mark("pflash_chip_erase_invalid")
{
  name = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.pflash_chip_erase_start = process("/usr/bin/qemu-aarch64").mark("pflash_chip_erase_start")
{
  name = $arg1;
}
probe qemu.user.aarch64.pflash_data_read = process("/usr/bin/qemu-aarch64").mark("pflash_data_read")
{
  name = $arg1;
  offset = $arg2;
  size = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.pflash_data_write = process("/usr/bin/qemu-aarch64").mark("pflash_data_write")
{
  name = $arg1;
  offset = $arg2;
  size = $arg3;
  value = $arg4;
  counter = $arg5;
}
probe qemu.user.aarch64.pflash_device_id = process("/usr/bin/qemu-aarch64").mark("pflash_device_id")
{
  name = $arg1;
  id = $arg2;
}
probe qemu.user.aarch64.pflash_device_info = process("/usr/bin/qemu-aarch64").mark("pflash_device_info")
{
  name = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.pflash_erase_complete = process("/usr/bin/qemu-aarch64").mark("pflash_erase_complete")
{
  name = $arg1;
}
probe qemu.user.aarch64.pflash_erase_timeout = process("/usr/bin/qemu-aarch64").mark("pflash_erase_timeout")
{
  name = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.pflash_io_read = process("/usr/bin/qemu-aarch64").mark("pflash_io_read")
{
  name = $arg1;
  offset = $arg2;
  size = $arg3;
  value = $arg4;
  cmd = $arg5;
  wcycle = $arg6;
}
probe qemu.user.aarch64.pflash_io_write = process("/usr/bin/qemu-aarch64").mark("pflash_io_write")
{
  name = $arg1;
  offset = $arg2;
  size = $arg3;
  value = $arg4;
  wcycle = $arg5;
}
probe qemu.user.aarch64.pflash_manufacturer_id = process("/usr/bin/qemu-aarch64").mark("pflash_manufacturer_id")
{
  name = $arg1;
  id = $arg2;
}
probe qemu.user.aarch64.pflash_mode_read_array = process("/usr/bin/qemu-aarch64").mark("pflash_mode_read_array")
{
  name = $arg1;
}
probe qemu.user.aarch64.pflash_postload_cb = process("/usr/bin/qemu-aarch64").mark("pflash_postload_cb")
{
  name = $arg1;
}
probe qemu.user.aarch64.pflash_read_done = process("/usr/bin/qemu-aarch64").mark("pflash_read_done")
{
  name = $arg1;
  offset = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.pflash_read_status = process("/usr/bin/qemu-aarch64").mark("pflash_read_status")
{
  name = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.pflash_read_unknown_state = process("/usr/bin/qemu-aarch64").mark("pflash_read_unknown_state")
{
  name = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.pflash_reset = process("/usr/bin/qemu-aarch64").mark("pflash_reset")
{
  name = $arg1;
}
probe qemu.user.aarch64.pflash_sector_erase_start = process("/usr/bin/qemu-aarch64").mark("pflash_sector_erase_start")
{
  name = $arg1;
  width1 = $arg2;
  start = $arg3;
  width2 = $arg4;
  end = $arg5;
}
probe qemu.user.aarch64.pflash_timer_expired = process("/usr/bin/qemu-aarch64").mark("pflash_timer_expired")
{
  name = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.pflash_unlock0_failed = process("/usr/bin/qemu-aarch64").mark("pflash_unlock0_failed")
{
  name = $arg1;
  offset = $arg2;
  cmd = $arg3;
  addr0 = $arg4;
}
probe qemu.user.aarch64.pflash_unlock1_failed = process("/usr/bin/qemu-aarch64").mark("pflash_unlock1_failed")
{
  name = $arg1;
  offset = $arg2;
  cmd = $arg3;
}
probe qemu.user.aarch64.pflash_unsupported_device_configuration = process("/usr/bin/qemu-aarch64").mark("pflash_unsupported_device_configuration")
{
  name = $arg1;
  width = $arg2;
  max = $arg3;
}
probe qemu.user.aarch64.pflash_write = process("/usr/bin/qemu-aarch64").mark("pflash_write")
{
  name = $arg1;
  str = $arg2;
}
probe qemu.user.aarch64.pflash_write_block = process("/usr/bin/qemu-aarch64").mark("pflash_write_block")
{
  name = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pflash_write_block_erase = process("/usr/bin/qemu-aarch64").mark("pflash_write_block_erase")
{
  name = $arg1;
  offset = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.pflash_write_failed = process("/usr/bin/qemu-aarch64").mark("pflash_write_failed")
{
  name = $arg1;
  offset = $arg2;
  cmd = $arg3;
}
probe qemu.user.aarch64.pflash_write_invalid = process("/usr/bin/qemu-aarch64").mark("pflash_write_invalid")
{
  name = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.pflash_write_invalid_command = process("/usr/bin/qemu-aarch64").mark("pflash_write_invalid_command")
{
  name = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.pflash_write_invalid_state = process("/usr/bin/qemu-aarch64").mark("pflash_write_invalid_state")
{
  name = $arg1;
  cmd = $arg2;
  wc = $arg3;
}
probe qemu.user.aarch64.pflash_write_start = process("/usr/bin/qemu-aarch64").mark("pflash_write_start")
{
  name = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.pflash_write_unknown = process("/usr/bin/qemu-aarch64").mark("pflash_write_unknown")
{
  name = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.virtio_blk_req_complete = process("/usr/bin/qemu-aarch64").mark("virtio_blk_req_complete")
{
  vdev = $arg1;
  req = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.virtio_blk_rw_complete = process("/usr/bin/qemu-aarch64").mark("virtio_blk_rw_complete")
{
  vdev = $arg1;
  req = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.virtio_blk_handle_write = process("/usr/bin/qemu-aarch64").mark("virtio_blk_handle_write")
{
  vdev = $arg1;
  req = $arg2;
  sector = $arg3;
  nsectors = $arg4;
}
probe qemu.user.aarch64.virtio_blk_handle_read = process("/usr/bin/qemu-aarch64").mark("virtio_blk_handle_read")
{
  vdev = $arg1;
  req = $arg2;
  sector = $arg3;
  nsectors = $arg4;
}
probe qemu.user.aarch64.virtio_blk_submit_multireq = process("/usr/bin/qemu-aarch64").mark("virtio_blk_submit_multireq")
{
  vdev = $arg1;
  mrb = $arg2;
  start = $arg3;
  num_reqs = $arg4;
  offset = $arg5;
  size = $arg6;
  is_write = $arg7;
}
probe qemu.user.aarch64.hd_geometry_lchs_guess = process("/usr/bin/qemu-aarch64").mark("hd_geometry_lchs_guess")
{
  blk = $arg1;
  cyls = $arg2;
  heads = $arg3;
  secs = $arg4;
}
probe qemu.user.aarch64.hd_geometry_guess = process("/usr/bin/qemu-aarch64").mark("hd_geometry_guess")
{
  blk = $arg1;
  cyls = $arg2;
  heads = $arg3;
  secs = $arg4;
  trans = $arg5;
}
probe qemu.user.aarch64.xen_block_realize = process("/usr/bin/qemu-aarch64").mark("xen_block_realize")
{
  type = $arg1;
  disk = $arg2;
  partition = $arg3;
}
probe qemu.user.aarch64.xen_block_connect = process("/usr/bin/qemu-aarch64").mark("xen_block_connect")
{
  type = $arg1;
  disk = $arg2;
  partition = $arg3;
}
probe qemu.user.aarch64.xen_block_disconnect = process("/usr/bin/qemu-aarch64").mark("xen_block_disconnect")
{
  type = $arg1;
  disk = $arg2;
  partition = $arg3;
}
probe qemu.user.aarch64.xen_block_unrealize = process("/usr/bin/qemu-aarch64").mark("xen_block_unrealize")
{
  type = $arg1;
  disk = $arg2;
  partition = $arg3;
}
probe qemu.user.aarch64.xen_block_size = process("/usr/bin/qemu-aarch64").mark("xen_block_size")
{
  type = $arg1;
  disk = $arg2;
  partition = $arg3;
  sectors = $arg4;
}
probe qemu.user.aarch64.xen_disk_realize = process("/usr/bin/qemu-aarch64").mark("xen_disk_realize")
{
}
probe qemu.user.aarch64.xen_disk_unrealize = process("/usr/bin/qemu-aarch64").mark("xen_disk_unrealize")
{
}
probe qemu.user.aarch64.xen_cdrom_realize = process("/usr/bin/qemu-aarch64").mark("xen_cdrom_realize")
{
}
probe qemu.user.aarch64.xen_cdrom_unrealize = process("/usr/bin/qemu-aarch64").mark("xen_cdrom_unrealize")
{
}
probe qemu.user.aarch64.xen_block_blockdev_add = process("/usr/bin/qemu-aarch64").mark("xen_block_blockdev_add")
{
  str = $arg1;
}
probe qemu.user.aarch64.xen_block_blockdev_del = process("/usr/bin/qemu-aarch64").mark("xen_block_blockdev_del")
{
  node_name = $arg1;
}
probe qemu.user.aarch64.xen_block_device_create = process("/usr/bin/qemu-aarch64").mark("xen_block_device_create")
{
  number = $arg1;
}
probe qemu.user.aarch64.xen_block_device_destroy = process("/usr/bin/qemu-aarch64").mark("xen_block_device_destroy")
{
  number = $arg1;
}
probe qemu.user.aarch64.m25p80_flash_erase = process("/usr/bin/qemu-aarch64").mark("m25p80_flash_erase")
{
  s = $arg1;
  offset = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.m25p80_programming_zero_to_one = process("/usr/bin/qemu-aarch64").mark("m25p80_programming_zero_to_one")
{
  s = $arg1;
  addr = $arg2;
  prev = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.m25p80_reset_done = process("/usr/bin/qemu-aarch64").mark("m25p80_reset_done")
{
  s = $arg1;
}
probe qemu.user.aarch64.m25p80_command_decoded = process("/usr/bin/qemu-aarch64").mark("m25p80_command_decoded")
{
  s = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.m25p80_complete_collecting = process("/usr/bin/qemu-aarch64").mark("m25p80_complete_collecting")
{
  s = $arg1;
  cmd = $arg2;
  n = $arg3;
  ear = $arg4;
  cur_addr = $arg5;
}
probe qemu.user.aarch64.m25p80_populated_jedec = process("/usr/bin/qemu-aarch64").mark("m25p80_populated_jedec")
{
  s = $arg1;
}
probe qemu.user.aarch64.m25p80_chip_erase = process("/usr/bin/qemu-aarch64").mark("m25p80_chip_erase")
{
  s = $arg1;
}
probe qemu.user.aarch64.m25p80_select = process("/usr/bin/qemu-aarch64").mark("m25p80_select")
{
  s = $arg1;
  what = $arg2;
}
probe qemu.user.aarch64.m25p80_page_program = process("/usr/bin/qemu-aarch64").mark("m25p80_page_program")
{
  s = $arg1;
  addr = $arg2;
  tx = $arg3;
}
probe qemu.user.aarch64.m25p80_transfer = process("/usr/bin/qemu-aarch64").mark("m25p80_transfer")
{
  s = $arg1;
  state = $arg2;
  len = $arg3;
  needed = $arg4;
  pos = $arg5;
  cur_addr = $arg6;
  t = $arg7;
}
probe qemu.user.aarch64.m25p80_read_byte = process("/usr/bin/qemu-aarch64").mark("m25p80_read_byte")
{
  s = $arg1;
  addr = $arg2;
  v = $arg3;
}
probe qemu.user.aarch64.m25p80_read_data = process("/usr/bin/qemu-aarch64").mark("m25p80_read_data")
{
  s = $arg1;
  pos = $arg2;
  v = $arg3;
}
probe qemu.user.aarch64.m25p80_read_sfdp = process("/usr/bin/qemu-aarch64").mark("m25p80_read_sfdp")
{
  s = $arg1;
  addr = $arg2;
  v = $arg3;
}
probe qemu.user.aarch64.m25p80_binding = process("/usr/bin/qemu-aarch64").mark("m25p80_binding")
{
  s = $arg1;
}
probe qemu.user.aarch64.m25p80_binding_no_bdrv = process("/usr/bin/qemu-aarch64").mark("m25p80_binding_no_bdrv")
{
  s = $arg1;
}
probe qemu.user.aarch64.virtio_blk_data_plane_start = process("/usr/bin/qemu-aarch64").mark("virtio_blk_data_plane_start")
{
  s = $arg1;
}
probe qemu.user.aarch64.virtio_blk_data_plane_stop = process("/usr/bin/qemu-aarch64").mark("virtio_blk_data_plane_stop")
{
  s = $arg1;
}
probe qemu.user.aarch64.parallel_ioport_read = process("/usr/bin/qemu-aarch64").mark("parallel_ioport_read")
{
  desc = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.parallel_ioport_write = process("/usr/bin/qemu-aarch64").mark("parallel_ioport_write")
{
  desc = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.serial_read = process("/usr/bin/qemu-aarch64").mark("serial_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.serial_write = process("/usr/bin/qemu-aarch64").mark("serial_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.serial_update_parameters = process("/usr/bin/qemu-aarch64").mark("serial_update_parameters")
{
  baudrate = $arg1;
  parity = $arg2;
  data_bits = $arg3;
  stop_bits = $arg4;
}
probe qemu.user.aarch64.virtio_serial_send_control_event = process("/usr/bin/qemu-aarch64").mark("virtio_serial_send_control_event")
{
  port = $arg1;
  event = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.virtio_serial_throttle_port = process("/usr/bin/qemu-aarch64").mark("virtio_serial_throttle_port")
{
  port = $arg1;
  throttle = $arg2;
}
probe qemu.user.aarch64.virtio_serial_handle_control_message = process("/usr/bin/qemu-aarch64").mark("virtio_serial_handle_control_message")
{
  event = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.virtio_serial_handle_control_message_port = process("/usr/bin/qemu-aarch64").mark("virtio_serial_handle_control_message_port")
{
  port = $arg1;
}
probe qemu.user.aarch64.virtio_console_flush_buf = process("/usr/bin/qemu-aarch64").mark("virtio_console_flush_buf")
{
  port = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.virtio_console_chr_read = process("/usr/bin/qemu-aarch64").mark("virtio_console_chr_read")
{
  port = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.virtio_console_chr_event = process("/usr/bin/qemu-aarch64").mark("virtio_console_chr_event")
{
  port = $arg1;
  event = $arg2;
}
probe qemu.user.aarch64.goldfish_tty_read = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_read")
{
  dev = $arg1;
  addr = $arg2;
  size = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.goldfish_tty_write = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_write")
{
  dev = $arg1;
  addr = $arg2;
  size = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.goldfish_tty_can_receive = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_can_receive")
{
  dev = $arg1;
  available = $arg2;
}
probe qemu.user.aarch64.goldfish_tty_receive = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_receive")
{
  dev = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.goldfish_tty_reset = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_reset")
{
  dev = $arg1;
}
probe qemu.user.aarch64.goldfish_tty_realize = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_realize")
{
  dev = $arg1;
}
probe qemu.user.aarch64.goldfish_tty_unrealize = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_unrealize")
{
  dev = $arg1;
}
probe qemu.user.aarch64.goldfish_tty_instance_init = process("/usr/bin/qemu-aarch64").mark("goldfish_tty_instance_init")
{
  dev = $arg1;
}
probe qemu.user.aarch64.grlib_apbuart_event = process("/usr/bin/qemu-aarch64").mark("grlib_apbuart_event")
{
  event = $arg1;
}
probe qemu.user.aarch64.grlib_apbuart_writel_unknown = process("/usr/bin/qemu-aarch64").mark("grlib_apbuart_writel_unknown")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.grlib_apbuart_readl_unknown = process("/usr/bin/qemu-aarch64").mark("grlib_apbuart_readl_unknown")
{
  addr = $arg1;
}
probe qemu.user.aarch64.escc_hard_reset = process("/usr/bin/qemu-aarch64").mark("escc_hard_reset")
{
}
probe qemu.user.aarch64.escc_soft_reset_chn = process("/usr/bin/qemu-aarch64").mark("escc_soft_reset_chn")
{
  channel = $arg1;
}
probe qemu.user.aarch64.escc_put_queue = process("/usr/bin/qemu-aarch64").mark("escc_put_queue")
{
  channel = $arg1;
  b = $arg2;
}
probe qemu.user.aarch64.escc_get_queue = process("/usr/bin/qemu-aarch64").mark("escc_get_queue")
{
  channel = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.escc_update_irq = process("/usr/bin/qemu-aarch64").mark("escc_update_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.escc_update_parameters = process("/usr/bin/qemu-aarch64").mark("escc_update_parameters")
{
  channel = $arg1;
  speed = $arg2;
  parity = $arg3;
  data_bits = $arg4;
  stop_bits = $arg5;
}
probe qemu.user.aarch64.escc_mem_writeb_ctrl = process("/usr/bin/qemu-aarch64").mark("escc_mem_writeb_ctrl")
{
  channel = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.escc_mem_writeb_data = process("/usr/bin/qemu-aarch64").mark("escc_mem_writeb_data")
{
  channel = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.escc_mem_readb_ctrl = process("/usr/bin/qemu-aarch64").mark("escc_mem_readb_ctrl")
{
  channel = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.escc_mem_readb_data = process("/usr/bin/qemu-aarch64").mark("escc_mem_readb_data")
{
  channel = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.escc_serial_receive_byte = process("/usr/bin/qemu-aarch64").mark("escc_serial_receive_byte")
{
  channel = $arg1;
  ch = $arg2;
}
probe qemu.user.aarch64.escc_sunkbd_event_in = process("/usr/bin/qemu-aarch64").mark("escc_sunkbd_event_in")
{
  ch = $arg1;
  name = $arg2;
  down = $arg3;
}
probe qemu.user.aarch64.escc_sunkbd_event_out = process("/usr/bin/qemu-aarch64").mark("escc_sunkbd_event_out")
{
  ch = $arg1;
}
probe qemu.user.aarch64.escc_kbd_command = process("/usr/bin/qemu-aarch64").mark("escc_kbd_command")
{
  val = $arg1;
}
probe qemu.user.aarch64.escc_sunmouse_event = process("/usr/bin/qemu-aarch64").mark("escc_sunmouse_event")
{
  dx = $arg1;
  dy = $arg2;
  buttons_state = $arg3;
}
probe qemu.user.aarch64.pl011_irq_state = process("/usr/bin/qemu-aarch64").mark("pl011_irq_state")
{
  level = $arg1;
}
probe qemu.user.aarch64.pl011_read = process("/usr/bin/qemu-aarch64").mark("pl011_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pl011_read_fifo = process("/usr/bin/qemu-aarch64").mark("pl011_read_fifo")
{
  read_count = $arg1;
}
probe qemu.user.aarch64.pl011_write = process("/usr/bin/qemu-aarch64").mark("pl011_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pl011_can_receive = process("/usr/bin/qemu-aarch64").mark("pl011_can_receive")
{
  lcr = $arg1;
  read_count = $arg2;
  r = $arg3;
}
probe qemu.user.aarch64.pl011_put_fifo = process("/usr/bin/qemu-aarch64").mark("pl011_put_fifo")
{
  c = $arg1;
  read_count = $arg2;
}
probe qemu.user.aarch64.pl011_put_fifo_full = process("/usr/bin/qemu-aarch64").mark("pl011_put_fifo_full")
{
}
probe qemu.user.aarch64.pl011_baudrate_change = process("/usr/bin/qemu-aarch64").mark("pl011_baudrate_change")
{
  baudrate = $arg1;
  clock = $arg2;
  ibrd = $arg3;
  fbrd = $arg4;
}
probe qemu.user.aarch64.cmsdk_apb_uart_read = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_uart_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_uart_write = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_uart_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_uart_reset = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_uart_reset")
{
}
probe qemu.user.aarch64.cmsdk_apb_uart_receive = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_uart_receive")
{
  c = $arg1;
}
probe qemu.user.aarch64.cmsdk_apb_uart_tx_pending = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_uart_tx_pending")
{
}
probe qemu.user.aarch64.cmsdk_apb_uart_tx = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_uart_tx")
{
  c = $arg1;
}
probe qemu.user.aarch64.cmsdk_apb_uart_set_params = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_uart_set_params")
{
  speed = $arg1;
}
probe qemu.user.aarch64.nrf51_uart_read = process("/usr/bin/qemu-aarch64").mark("nrf51_uart_read")
{
  addr = $arg1;
  r = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.nrf51_uart_write = process("/usr/bin/qemu-aarch64").mark("nrf51_uart_write")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.shakti_uart_read = process("/usr/bin/qemu-aarch64").mark("shakti_uart_read")
{
  addr = $arg1;
  r = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.shakti_uart_write = process("/usr/bin/qemu-aarch64").mark("shakti_uart_write")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.exynos_uart_dmabusy = process("/usr/bin/qemu-aarch64").mark("exynos_uart_dmabusy")
{
  channel = $arg1;
}
probe qemu.user.aarch64.exynos_uart_dmaready = process("/usr/bin/qemu-aarch64").mark("exynos_uart_dmaready")
{
  channel = $arg1;
}
probe qemu.user.aarch64.exynos_uart_irq_raised = process("/usr/bin/qemu-aarch64").mark("exynos_uart_irq_raised")
{
  channel = $arg1;
  reg = $arg2;
}
probe qemu.user.aarch64.exynos_uart_irq_lowered = process("/usr/bin/qemu-aarch64").mark("exynos_uart_irq_lowered")
{
  channel = $arg1;
}
probe qemu.user.aarch64.exynos_uart_update_params = process("/usr/bin/qemu-aarch64").mark("exynos_uart_update_params")
{
  channel = $arg1;
  speed = $arg2;
  parity = $arg3;
  data = $arg4;
  stop = $arg5;
  wordtime = $arg6;
}
probe qemu.user.aarch64.exynos_uart_write = process("/usr/bin/qemu-aarch64").mark("exynos_uart_write")
{
  channel = $arg1;
  offset = $arg2;
  name = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.exynos_uart_read = process("/usr/bin/qemu-aarch64").mark("exynos_uart_read")
{
  channel = $arg1;
  offset = $arg2;
  name = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.exynos_uart_rx_fifo_reset = process("/usr/bin/qemu-aarch64").mark("exynos_uart_rx_fifo_reset")
{
  channel = $arg1;
}
probe qemu.user.aarch64.exynos_uart_tx_fifo_reset = process("/usr/bin/qemu-aarch64").mark("exynos_uart_tx_fifo_reset")
{
  channel = $arg1;
}
probe qemu.user.aarch64.exynos_uart_tx = process("/usr/bin/qemu-aarch64").mark("exynos_uart_tx")
{
  channel = $arg1;
  ch = $arg2;
}
probe qemu.user.aarch64.exynos_uart_intclr = process("/usr/bin/qemu-aarch64").mark("exynos_uart_intclr")
{
  channel = $arg1;
  reg = $arg2;
}
probe qemu.user.aarch64.exynos_uart_ro_write = process("/usr/bin/qemu-aarch64").mark("exynos_uart_ro_write")
{
  channel = $arg1;
  name = $arg2;
  reg = $arg3;
}
probe qemu.user.aarch64.exynos_uart_rx = process("/usr/bin/qemu-aarch64").mark("exynos_uart_rx")
{
  channel = $arg1;
  ch = $arg2;
}
probe qemu.user.aarch64.exynos_uart_rx_error = process("/usr/bin/qemu-aarch64").mark("exynos_uart_rx_error")
{
  channel = $arg1;
}
probe qemu.user.aarch64.exynos_uart_wo_read = process("/usr/bin/qemu-aarch64").mark("exynos_uart_wo_read")
{
  channel = $arg1;
  name = $arg2;
  reg = $arg3;
}
probe qemu.user.aarch64.exynos_uart_rxsize = process("/usr/bin/qemu-aarch64").mark("exynos_uart_rxsize")
{
  channel = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.exynos_uart_channel_error = process("/usr/bin/qemu-aarch64").mark("exynos_uart_channel_error")
{
  channel = $arg1;
}
probe qemu.user.aarch64.exynos_uart_rx_timeout = process("/usr/bin/qemu-aarch64").mark("exynos_uart_rx_timeout")
{
  channel = $arg1;
  stat = $arg2;
  intsp = $arg3;
}
probe qemu.user.aarch64.cadence_uart_baudrate = process("/usr/bin/qemu-aarch64").mark("cadence_uart_baudrate")
{
  baudrate = $arg1;
}
probe qemu.user.aarch64.sh_serial_read = process("/usr/bin/qemu-aarch64").mark("sh_serial_read")
{
  id = $arg1;
  size = $arg2;
  offs = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.sh_serial_write = process("/usr/bin/qemu-aarch64").mark("sh_serial_write")
{
  id = $arg1;
  size = $arg2;
  offs = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.jazz_led_read = process("/usr/bin/qemu-aarch64").mark("jazz_led_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.jazz_led_write = process("/usr/bin/qemu-aarch64").mark("jazz_led_write")
{
  addr = $arg1;
  new = $arg2;
}
probe qemu.user.aarch64.xenfb_mouse_event = process("/usr/bin/qemu-aarch64").mark("xenfb_mouse_event")
{
  opaque = $arg1;
  dx = $arg2;
  dy = $arg3;
  dz = $arg4;
  button_state = $arg5;
  abs_pointer_wanted = $arg6;
}
probe qemu.user.aarch64.xenfb_key_event = process("/usr/bin/qemu-aarch64").mark("xenfb_key_event")
{
  opaque = $arg1;
  scancode = $arg2;
  button_state = $arg3;
}
probe qemu.user.aarch64.xenfb_input_connected = process("/usr/bin/qemu-aarch64").mark("xenfb_input_connected")
{
  xendev = $arg1;
  abs_pointer_wanted = $arg2;
}
probe qemu.user.aarch64.g364fb_read = process("/usr/bin/qemu-aarch64").mark("g364fb_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.g364fb_write = process("/usr/bin/qemu-aarch64").mark("g364fb_write")
{
  addr = $arg1;
  new = $arg2;
}
probe qemu.user.aarch64.vmware_value_read = process("/usr/bin/qemu-aarch64").mark("vmware_value_read")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.vmware_value_write = process("/usr/bin/qemu-aarch64").mark("vmware_value_write")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.vmware_palette_read = process("/usr/bin/qemu-aarch64").mark("vmware_palette_read")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.vmware_palette_write = process("/usr/bin/qemu-aarch64").mark("vmware_palette_write")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.vmware_scratch_read = process("/usr/bin/qemu-aarch64").mark("vmware_scratch_read")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.vmware_scratch_write = process("/usr/bin/qemu-aarch64").mark("vmware_scratch_write")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.vmware_setmode = process("/usr/bin/qemu-aarch64").mark("vmware_setmode")
{
  w = $arg1;
  h = $arg2;
  bpp = $arg3;
}
probe qemu.user.aarch64.vmware_verify_rect_less_than_zero = process("/usr/bin/qemu-aarch64").mark("vmware_verify_rect_less_than_zero")
{
  name = $arg1;
  param = $arg2;
  x = $arg3;
}
probe qemu.user.aarch64.vmware_verify_rect_greater_than_bound = process("/usr/bin/qemu-aarch64").mark("vmware_verify_rect_greater_than_bound")
{
  name = $arg1;
  param = $arg2;
  bound = $arg3;
  x = $arg4;
}
probe qemu.user.aarch64.vmware_verify_rect_surface_bound_exceeded = process("/usr/bin/qemu-aarch64").mark("vmware_verify_rect_surface_bound_exceeded")
{
  name = $arg1;
  component = $arg2;
  bound = $arg3;
  param1 = $arg4;
  value1 = $arg5;
  param2 = $arg6;
  value2 = $arg7;
}
probe qemu.user.aarch64.vmware_update_rect_delayed_flush = process("/usr/bin/qemu-aarch64").mark("vmware_update_rect_delayed_flush")
{
}
probe qemu.user.aarch64.virtio_gpu_features = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_features")
{
  virgl = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_get_display_info = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_get_display_info")
{
}
probe qemu.user.aarch64.virtio_gpu_cmd_get_edid = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_get_edid")
{
  scanout = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_set_scanout = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_set_scanout")
{
  id = $arg1;
  res = $arg2;
  w = $arg3;
  h = $arg4;
  x = $arg5;
  y = $arg6;
}
probe qemu.user.aarch64.virtio_gpu_cmd_set_scanout_blob = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_set_scanout_blob")
{
  id = $arg1;
  res = $arg2;
  w = $arg3;
  h = $arg4;
  x = $arg5;
  y = $arg6;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_create_2d = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_create_2d")
{
  res = $arg1;
  fmt = $arg2;
  w = $arg3;
  h = $arg4;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_create_3d = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_create_3d")
{
  res = $arg1;
  fmt = $arg2;
  w = $arg3;
  h = $arg4;
  d = $arg5;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_create_blob = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_create_blob")
{
  res = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_unref = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_unref")
{
  res = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_back_attach = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_back_attach")
{
  res = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_back_detach = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_back_detach")
{
  res = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_xfer_toh_2d = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_xfer_toh_2d")
{
  res = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_xfer_toh_3d = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_xfer_toh_3d")
{
  res = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_xfer_fromh_3d = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_xfer_fromh_3d")
{
  res = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_res_flush = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_res_flush")
{
  res = $arg1;
  w = $arg2;
  h = $arg3;
  x = $arg4;
  y = $arg5;
}
probe qemu.user.aarch64.virtio_gpu_cmd_ctx_create = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_ctx_create")
{
  ctx = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.virtio_gpu_cmd_ctx_destroy = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_ctx_destroy")
{
  ctx = $arg1;
}
probe qemu.user.aarch64.virtio_gpu_cmd_ctx_res_attach = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_ctx_res_attach")
{
  ctx = $arg1;
  res = $arg2;
}
probe qemu.user.aarch64.virtio_gpu_cmd_ctx_res_detach = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_ctx_res_detach")
{
  ctx = $arg1;
  res = $arg2;
}
probe qemu.user.aarch64.virtio_gpu_cmd_ctx_submit = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_cmd_ctx_submit")
{
  ctx = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.virtio_gpu_update_cursor = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_update_cursor")
{
  scanout = $arg1;
  x = $arg2;
  y = $arg3;
  type = $arg4;
  res = $arg5;
}
probe qemu.user.aarch64.virtio_gpu_fence_ctrl = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_fence_ctrl")
{
  fence = $arg1;
  type = $arg2;
}
probe qemu.user.aarch64.virtio_gpu_fence_resp = process("/usr/bin/qemu-aarch64").mark("virtio_gpu_fence_resp")
{
  fence = $arg1;
}
probe qemu.user.aarch64.qxl_create_guest_primary = process("/usr/bin/qemu-aarch64").mark("qxl_create_guest_primary")
{
  qid = $arg1;
  width = $arg2;
  height = $arg3;
  mem = $arg4;
  format = $arg5;
  position = $arg6;
}
probe qemu.user.aarch64.qxl_create_guest_primary_rest = process("/usr/bin/qemu-aarch64").mark("qxl_create_guest_primary_rest")
{
  qid = $arg1;
  stride = $arg2;
  type = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.qxl_destroy_primary = process("/usr/bin/qemu-aarch64").mark("qxl_destroy_primary")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_enter_vga_mode = process("/usr/bin/qemu-aarch64").mark("qxl_enter_vga_mode")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_exit_vga_mode = process("/usr/bin/qemu-aarch64").mark("qxl_exit_vga_mode")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_hard_reset = process("/usr/bin/qemu-aarch64").mark("qxl_hard_reset")
{
  qid = $arg1;
  loadvm = $arg2;
}
probe qemu.user.aarch64.qxl_interface_async_complete_io = process("/usr/bin/qemu-aarch64").mark("qxl_interface_async_complete_io")
{
  qid = $arg1;
  current_async = $arg2;
  cookie = $arg3;
}
probe qemu.user.aarch64.qxl_interface_attach_worker = process("/usr/bin/qemu-aarch64").mark("qxl_interface_attach_worker")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_interface_get_init_info = process("/usr/bin/qemu-aarch64").mark("qxl_interface_get_init_info")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_interface_set_compression_level = process("/usr/bin/qemu-aarch64").mark("qxl_interface_set_compression_level")
{
  qid = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.qxl_interface_update_area_complete = process("/usr/bin/qemu-aarch64").mark("qxl_interface_update_area_complete")
{
  qid = $arg1;
  surface_id = $arg2;
  dirty_left = $arg3;
  dirty_right = $arg4;
  dirty_top = $arg5;
  dirty_bottom = $arg6;
}
probe qemu.user.aarch64.qxl_interface_update_area_complete_rest = process("/usr/bin/qemu-aarch64").mark("qxl_interface_update_area_complete_rest")
{
  qid = $arg1;
  num_updated_rects = $arg2;
}
probe qemu.user.aarch64.qxl_interface_update_area_complete_overflow = process("/usr/bin/qemu-aarch64").mark("qxl_interface_update_area_complete_overflow")
{
  qid = $arg1;
  max = $arg2;
}
probe qemu.user.aarch64.qxl_interface_update_area_complete_schedule_bh = process("/usr/bin/qemu-aarch64").mark("qxl_interface_update_area_complete_schedule_bh")
{
  qid = $arg1;
  num_dirty = $arg2;
}
probe qemu.user.aarch64.qxl_io_destroy_primary_ignored = process("/usr/bin/qemu-aarch64").mark("qxl_io_destroy_primary_ignored")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.user.aarch64.qxl_io_log = process("/usr/bin/qemu-aarch64").mark("qxl_io_log")
{
  qid = $arg1;
  log_buf = $arg2;
}
probe qemu.user.aarch64.qxl_io_read_unexpected = process("/usr/bin/qemu-aarch64").mark("qxl_io_read_unexpected")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_io_unexpected_vga_mode = process("/usr/bin/qemu-aarch64").mark("qxl_io_unexpected_vga_mode")
{
  qid = $arg1;
  addr = $arg2;
  val = $arg3;
  desc = $arg4;
}
probe qemu.user.aarch64.qxl_io_write = process("/usr/bin/qemu-aarch64").mark("qxl_io_write")
{
  qid = $arg1;
  mode = $arg2;
  addr = $arg3;
  aname = $arg4;
  val = $arg5;
  size = $arg6;
  async = $arg7;
}
probe qemu.user.aarch64.qxl_memslot_add_guest = process("/usr/bin/qemu-aarch64").mark("qxl_memslot_add_guest")
{
  qid = $arg1;
  slot_id = $arg2;
  guest_start = $arg3;
  guest_end = $arg4;
}
probe qemu.user.aarch64.qxl_post_load = process("/usr/bin/qemu-aarch64").mark("qxl_post_load")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.user.aarch64.qxl_pre_load = process("/usr/bin/qemu-aarch64").mark("qxl_pre_load")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_pre_save = process("/usr/bin/qemu-aarch64").mark("qxl_pre_save")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_reset_surfaces = process("/usr/bin/qemu-aarch64").mark("qxl_reset_surfaces")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_ring_command_check = process("/usr/bin/qemu-aarch64").mark("qxl_ring_command_check")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.user.aarch64.qxl_ring_command_get = process("/usr/bin/qemu-aarch64").mark("qxl_ring_command_get")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.user.aarch64.qxl_ring_command_req_notification = process("/usr/bin/qemu-aarch64").mark("qxl_ring_command_req_notification")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_ring_cursor_check = process("/usr/bin/qemu-aarch64").mark("qxl_ring_cursor_check")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.user.aarch64.qxl_ring_cursor_get = process("/usr/bin/qemu-aarch64").mark("qxl_ring_cursor_get")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.user.aarch64.qxl_ring_cursor_req_notification = process("/usr/bin/qemu-aarch64").mark("qxl_ring_cursor_req_notification")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_ring_res_push = process("/usr/bin/qemu-aarch64").mark("qxl_ring_res_push")
{
  qid = $arg1;
  mode = $arg2;
  surface_count = $arg3;
  free_res = $arg4;
  last_release = $arg5;
  notify = $arg6;
}
probe qemu.user.aarch64.qxl_ring_res_push_rest = process("/usr/bin/qemu-aarch64").mark("qxl_ring_res_push_rest")
{
  qid = $arg1;
  ring_has = $arg2;
  ring_size = $arg3;
  prod = $arg4;
  cons = $arg5;
}
probe qemu.user.aarch64.qxl_ring_res_put = process("/usr/bin/qemu-aarch64").mark("qxl_ring_res_put")
{
  qid = $arg1;
  free_res = $arg2;
}
probe qemu.user.aarch64.qxl_set_mode = process("/usr/bin/qemu-aarch64").mark("qxl_set_mode")
{
  qid = $arg1;
  modenr = $arg2;
  x_res = $arg3;
  y_res = $arg4;
  bits = $arg5;
  devmem = $arg6;
}
probe qemu.user.aarch64.qxl_soft_reset = process("/usr/bin/qemu-aarch64").mark("qxl_soft_reset")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_spice_destroy_surfaces_complete = process("/usr/bin/qemu-aarch64").mark("qxl_spice_destroy_surfaces_complete")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_spice_destroy_surfaces = process("/usr/bin/qemu-aarch64").mark("qxl_spice_destroy_surfaces")
{
  qid = $arg1;
  async = $arg2;
}
probe qemu.user.aarch64.qxl_spice_destroy_surface_wait_complete = process("/usr/bin/qemu-aarch64").mark("qxl_spice_destroy_surface_wait_complete")
{
  qid = $arg1;
  id = $arg2;
}
probe qemu.user.aarch64.qxl_spice_destroy_surface_wait = process("/usr/bin/qemu-aarch64").mark("qxl_spice_destroy_surface_wait")
{
  qid = $arg1;
  id = $arg2;
  async = $arg3;
}
probe qemu.user.aarch64.qxl_spice_flush_surfaces_async = process("/usr/bin/qemu-aarch64").mark("qxl_spice_flush_surfaces_async")
{
  qid = $arg1;
  surface_count = $arg2;
  num_free_res = $arg3;
}
probe qemu.user.aarch64.qxl_spice_monitors_config = process("/usr/bin/qemu-aarch64").mark("qxl_spice_monitors_config")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_spice_loadvm_commands = process("/usr/bin/qemu-aarch64").mark("qxl_spice_loadvm_commands")
{
  qid = $arg1;
  ext = $arg2;
  count = $arg3;
}
probe qemu.user.aarch64.qxl_spice_oom = process("/usr/bin/qemu-aarch64").mark("qxl_spice_oom")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_spice_reset_cursor = process("/usr/bin/qemu-aarch64").mark("qxl_spice_reset_cursor")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_spice_reset_image_cache = process("/usr/bin/qemu-aarch64").mark("qxl_spice_reset_image_cache")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_spice_reset_memslots = process("/usr/bin/qemu-aarch64").mark("qxl_spice_reset_memslots")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_spice_update_area = process("/usr/bin/qemu-aarch64").mark("qxl_spice_update_area")
{
  qid = $arg1;
  surface_id = $arg2;
  left = $arg3;
  right = $arg4;
  top = $arg5;
  bottom = $arg6;
}
probe qemu.user.aarch64.qxl_spice_update_area_rest = process("/usr/bin/qemu-aarch64").mark("qxl_spice_update_area_rest")
{
  qid = $arg1;
  num_dirty_rects = $arg2;
  clear_dirty_region = $arg3;
}
probe qemu.user.aarch64.qxl_surfaces_dirty = process("/usr/bin/qemu-aarch64").mark("qxl_surfaces_dirty")
{
  qid = $arg1;
  offset = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.qxl_send_events = process("/usr/bin/qemu-aarch64").mark("qxl_send_events")
{
  qid = $arg1;
  events = $arg2;
}
probe qemu.user.aarch64.qxl_send_events_vm_stopped = process("/usr/bin/qemu-aarch64").mark("qxl_send_events_vm_stopped")
{
  qid = $arg1;
  events = $arg2;
}
probe qemu.user.aarch64.qxl_set_guest_bug = process("/usr/bin/qemu-aarch64").mark("qxl_set_guest_bug")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qxl_interrupt_client_monitors_config = process("/usr/bin/qemu-aarch64").mark("qxl_interrupt_client_monitors_config")
{
  qid = $arg1;
  num_heads = $arg2;
  heads = $arg3;
}
probe qemu.user.aarch64.qxl_client_monitors_config_unsupported_by_guest = process("/usr/bin/qemu-aarch64").mark("qxl_client_monitors_config_unsupported_by_guest")
{
  qid = $arg1;
  int_mask = $arg2;
  client_monitors_config = $arg3;
}
probe qemu.user.aarch64.qxl_client_monitors_config_unsupported_by_device = process("/usr/bin/qemu-aarch64").mark("qxl_client_monitors_config_unsupported_by_device")
{
  qid = $arg1;
  revision = $arg2;
}
probe qemu.user.aarch64.qxl_client_monitors_config_capped = process("/usr/bin/qemu-aarch64").mark("qxl_client_monitors_config_capped")
{
  qid = $arg1;
  requested = $arg2;
  limit_ = $arg3;
}
probe qemu.user.aarch64.qxl_client_monitors_config_crc = process("/usr/bin/qemu-aarch64").mark("qxl_client_monitors_config_crc")
{
  qid = $arg1;
  size = $arg2;
  crc32 = $arg3;
}
probe qemu.user.aarch64.qxl_set_client_capabilities_unsupported_by_revision = process("/usr/bin/qemu-aarch64").mark("qxl_set_client_capabilities_unsupported_by_revision")
{
  qid = $arg1;
  revision = $arg2;
}
probe qemu.user.aarch64.qxl_render_blit = process("/usr/bin/qemu-aarch64").mark("qxl_render_blit")
{
  stride = $arg1;
  left = $arg2;
  right = $arg3;
  top = $arg4;
  bottom = $arg5;
}
probe qemu.user.aarch64.qxl_render_guest_primary_resized = process("/usr/bin/qemu-aarch64").mark("qxl_render_guest_primary_resized")
{
  width = $arg1;
  height = $arg2;
  stride = $arg3;
  bytes_pp = $arg4;
  bits_pp = $arg5;
}
probe qemu.user.aarch64.qxl_render_update_area_done = process("/usr/bin/qemu-aarch64").mark("qxl_render_update_area_done")
{
  cookie = $arg1;
}
probe qemu.user.aarch64.vga_std_read_io = process("/usr/bin/qemu-aarch64").mark("vga_std_read_io")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_std_write_io = process("/usr/bin/qemu-aarch64").mark("vga_std_write_io")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_vbe_read = process("/usr/bin/qemu-aarch64").mark("vga_vbe_read")
{
  index = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_vbe_write = process("/usr/bin/qemu-aarch64").mark("vga_vbe_write")
{
  index = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_cirrus_read_io = process("/usr/bin/qemu-aarch64").mark("vga_cirrus_read_io")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_cirrus_write_io = process("/usr/bin/qemu-aarch64").mark("vga_cirrus_write_io")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_cirrus_write_blt = process("/usr/bin/qemu-aarch64").mark("vga_cirrus_write_blt")
{
  offset = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_cirrus_write_gr = process("/usr/bin/qemu-aarch64").mark("vga_cirrus_write_gr")
{
  index = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vga_cirrus_bitblt_start = process("/usr/bin/qemu-aarch64").mark("vga_cirrus_bitblt_start")
{
  blt_rop = $arg1;
  blt_mode = $arg2;
  blt_modeext = $arg3;
  blt_width = $arg4;
  blt_height = $arg5;
  blt_dstpitch = $arg6;
  blt_srcpitch = $arg7;
  blt_dstaddr = $arg8;
  blt_srcaddr = $arg9;
  gr_val = $arg10;
}
probe qemu.user.aarch64.sii9022_read_reg = process("/usr/bin/qemu-aarch64").mark("sii9022_read_reg")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sii9022_write_reg = process("/usr/bin/qemu-aarch64").mark("sii9022_write_reg")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sii9022_switch_mode = process("/usr/bin/qemu-aarch64").mark("sii9022_switch_mode")
{
  mode = $arg1;
}
probe qemu.user.aarch64.ati_mm_read = process("/usr/bin/qemu-aarch64").mark("ati_mm_read")
{
  size = $arg1;
  addr = $arg2;
  name = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.ati_mm_write = process("/usr/bin/qemu-aarch64").mark("ati_mm_write")
{
  size = $arg1;
  addr = $arg2;
  name = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.artist_reg_read = process("/usr/bin/qemu-aarch64").mark("artist_reg_read")
{
  size = $arg1;
  addr = $arg2;
  name = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.artist_reg_write = process("/usr/bin/qemu-aarch64").mark("artist_reg_write")
{
  size = $arg1;
  addr = $arg2;
  name = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.artist_vram_read = process("/usr/bin/qemu-aarch64").mark("artist_vram_read")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.artist_vram_write = process("/usr/bin/qemu-aarch64").mark("artist_vram_write")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.artist_fill_window = process("/usr/bin/qemu-aarch64").mark("artist_fill_window")
{
  start_x = $arg1;
  start_y = $arg2;
  width = $arg3;
  height = $arg4;
  op = $arg5;
  ctlpln = $arg6;
}
probe qemu.user.aarch64.artist_block_move = process("/usr/bin/qemu-aarch64").mark("artist_block_move")
{
  start_x = $arg1;
  start_y = $arg2;
  dest_x = $arg3;
  dest_y = $arg4;
  width = $arg5;
  height = $arg6;
}
probe qemu.user.aarch64.artist_draw_line = process("/usr/bin/qemu-aarch64").mark("artist_draw_line")
{
  start_x = $arg1;
  start_y = $arg2;
  end_x = $arg3;
  end_y = $arg4;
}
probe qemu.user.aarch64.cg3_read = process("/usr/bin/qemu-aarch64").mark("cg3_read")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cg3_write = process("/usr/bin/qemu-aarch64").mark("cg3_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.dpcd_read = process("/usr/bin/qemu-aarch64").mark("dpcd_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.dpcd_write = process("/usr/bin/qemu-aarch64").mark("dpcd_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_system_config_read = process("/usr/bin/qemu-aarch64").mark("sm501_system_config_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_system_config_write = process("/usr/bin/qemu-aarch64").mark("sm501_system_config_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_i2c_read = process("/usr/bin/qemu-aarch64").mark("sm501_i2c_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_i2c_write = process("/usr/bin/qemu-aarch64").mark("sm501_i2c_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_palette_read = process("/usr/bin/qemu-aarch64").mark("sm501_palette_read")
{
  addr = $arg1;
}
probe qemu.user.aarch64.sm501_palette_write = process("/usr/bin/qemu-aarch64").mark("sm501_palette_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_disp_ctrl_read = process("/usr/bin/qemu-aarch64").mark("sm501_disp_ctrl_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_disp_ctrl_write = process("/usr/bin/qemu-aarch64").mark("sm501_disp_ctrl_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_2d_engine_read = process("/usr/bin/qemu-aarch64").mark("sm501_2d_engine_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sm501_2d_engine_write = process("/usr/bin/qemu-aarch64").mark("sm501_2d_engine_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.macfb_ctrl_read = process("/usr/bin/qemu-aarch64").mark("macfb_ctrl_read")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.macfb_ctrl_write = process("/usr/bin/qemu-aarch64").mark("macfb_ctrl_write")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.macfb_sense_read = process("/usr/bin/qemu-aarch64").mark("macfb_sense_read")
{
  value = $arg1;
}
probe qemu.user.aarch64.macfb_sense_write = process("/usr/bin/qemu-aarch64").mark("macfb_sense_write")
{
  value = $arg1;
}
probe qemu.user.aarch64.macfb_update_mode = process("/usr/bin/qemu-aarch64").mark("macfb_update_mode")
{
  width = $arg1;
  height = $arg2;
  depth = $arg3;
}
probe qemu.user.aarch64.jazzio_read = process("/usr/bin/qemu-aarch64").mark("jazzio_read")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.jazzio_write = process("/usr/bin/qemu-aarch64").mark("jazzio_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.rc4030_read = process("/usr/bin/qemu-aarch64").mark("rc4030_read")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.rc4030_write = process("/usr/bin/qemu-aarch64").mark("rc4030_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ledma_memory_read = process("/usr/bin/qemu-aarch64").mark("ledma_memory_read")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.ledma_memory_write = process("/usr/bin/qemu-aarch64").mark("ledma_memory_write")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.sparc32_dma_set_irq_raise = process("/usr/bin/qemu-aarch64").mark("sparc32_dma_set_irq_raise")
{
}
probe qemu.user.aarch64.sparc32_dma_set_irq_lower = process("/usr/bin/qemu-aarch64").mark("sparc32_dma_set_irq_lower")
{
}
probe qemu.user.aarch64.espdma_memory_read = process("/usr/bin/qemu-aarch64").mark("espdma_memory_read")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.espdma_memory_write = process("/usr/bin/qemu-aarch64").mark("espdma_memory_write")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.sparc32_dma_mem_readl = process("/usr/bin/qemu-aarch64").mark("sparc32_dma_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.sparc32_dma_mem_writel = process("/usr/bin/qemu-aarch64").mark("sparc32_dma_mem_writel")
{
  addr = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.sparc32_dma_enable_raise = process("/usr/bin/qemu-aarch64").mark("sparc32_dma_enable_raise")
{
}
probe qemu.user.aarch64.sparc32_dma_enable_lower = process("/usr/bin/qemu-aarch64").mark("sparc32_dma_enable_lower")
{
}
probe qemu.user.aarch64.i8257_unregistered_dma = process("/usr/bin/qemu-aarch64").mark("i8257_unregistered_dma")
{
  nchan = $arg1;
  dma_pos = $arg2;
  dma_len = $arg3;
}
probe qemu.user.aarch64.pl330_fault = process("/usr/bin/qemu-aarch64").mark("pl330_fault")
{
  ptr = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.pl330_fault_abort = process("/usr/bin/qemu-aarch64").mark("pl330_fault_abort")
{
}
probe qemu.user.aarch64.pl330_dmaend = process("/usr/bin/qemu-aarch64").mark("pl330_dmaend")
{
}
probe qemu.user.aarch64.pl330_dmago = process("/usr/bin/qemu-aarch64").mark("pl330_dmago")
{
}
probe qemu.user.aarch64.pl330_dmald = process("/usr/bin/qemu-aarch64").mark("pl330_dmald")
{
  chan = $arg1;
  addr = $arg2;
  size = $arg3;
  num = $arg4;
  ch = $arg5;
}
probe qemu.user.aarch64.pl330_dmakill = process("/usr/bin/qemu-aarch64").mark("pl330_dmakill")
{
}
probe qemu.user.aarch64.pl330_dmalpend = process("/usr/bin/qemu-aarch64").mark("pl330_dmalpend")
{
  nf = $arg1;
  bs = $arg2;
  lc = $arg3;
  ch = $arg4;
  flag = $arg5;
}
probe qemu.user.aarch64.pl330_dmalpiter = process("/usr/bin/qemu-aarch64").mark("pl330_dmalpiter")
{
}
probe qemu.user.aarch64.pl330_dmalpfallthrough = process("/usr/bin/qemu-aarch64").mark("pl330_dmalpfallthrough")
{
}
probe qemu.user.aarch64.pl330_dmasev_evirq = process("/usr/bin/qemu-aarch64").mark("pl330_dmasev_evirq")
{
  ev_id = $arg1;
}
probe qemu.user.aarch64.pl330_dmasev_event = process("/usr/bin/qemu-aarch64").mark("pl330_dmasev_event")
{
  ev_id = $arg1;
}
probe qemu.user.aarch64.pl330_dmast = process("/usr/bin/qemu-aarch64").mark("pl330_dmast")
{
  chan = $arg1;
  addr = $arg2;
  sz = $arg3;
  num = $arg4;
  ch = $arg5;
}
probe qemu.user.aarch64.pl330_dmawfe = process("/usr/bin/qemu-aarch64").mark("pl330_dmawfe")
{
  ev_id = $arg1;
}
probe qemu.user.aarch64.pl330_chan_exec_undef = process("/usr/bin/qemu-aarch64").mark("pl330_chan_exec_undef")
{
}
probe qemu.user.aarch64.pl330_exec_cycle = process("/usr/bin/qemu-aarch64").mark("pl330_exec_cycle")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.pl330_hexdump = process("/usr/bin/qemu-aarch64").mark("pl330_hexdump")
{
  offset = $arg1;
  str = $arg2;
}
probe qemu.user.aarch64.pl330_exec = process("/usr/bin/qemu-aarch64").mark("pl330_exec")
{
}
probe qemu.user.aarch64.pl330_debug_exec = process("/usr/bin/qemu-aarch64").mark("pl330_debug_exec")
{
  ch = $arg1;
}
probe qemu.user.aarch64.pl330_debug_exec_stall = process("/usr/bin/qemu-aarch64").mark("pl330_debug_exec_stall")
{
}
probe qemu.user.aarch64.pl330_iomem_write = process("/usr/bin/qemu-aarch64").mark("pl330_iomem_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pl330_iomem_write_clr = process("/usr/bin/qemu-aarch64").mark("pl330_iomem_write_clr")
{
  i = $arg1;
}
probe qemu.user.aarch64.pl330_iomem_read = process("/usr/bin/qemu-aarch64").mark("pl330_iomem_read")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.vmbus_recv_message = process("/usr/bin/qemu-aarch64").mark("vmbus_recv_message")
{
  type = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vmbus_signal_event = process("/usr/bin/qemu-aarch64").mark("vmbus_signal_event")
{
}
probe qemu.user.aarch64.vmbus_channel_notify_guest = process("/usr/bin/qemu-aarch64").mark("vmbus_channel_notify_guest")
{
  chan_id = $arg1;
}
probe qemu.user.aarch64.vmbus_post_msg = process("/usr/bin/qemu-aarch64").mark("vmbus_post_msg")
{
  type = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vmbus_msg_cb = process("/usr/bin/qemu-aarch64").mark("vmbus_msg_cb")
{
  status = $arg1;
}
probe qemu.user.aarch64.vmbus_process_incoming_message = process("/usr/bin/qemu-aarch64").mark("vmbus_process_incoming_message")
{
  message_type = $arg1;
}
probe qemu.user.aarch64.vmbus_initiate_contact = process("/usr/bin/qemu-aarch64").mark("vmbus_initiate_contact")
{
  major = $arg1;
  minor = $arg2;
  vcpu = $arg3;
  monitor_page1 = $arg4;
  monitor_page2 = $arg5;
  interrupt_page = $arg6;
}
probe qemu.user.aarch64.vmbus_send_offer = process("/usr/bin/qemu-aarch64").mark("vmbus_send_offer")
{
  chan_id = $arg1;
  dev = $arg2;
}
probe qemu.user.aarch64.vmbus_terminate_offers = process("/usr/bin/qemu-aarch64").mark("vmbus_terminate_offers")
{
}
probe qemu.user.aarch64.vmbus_gpadl_header = process("/usr/bin/qemu-aarch64").mark("vmbus_gpadl_header")
{
  gpadl_id = $arg1;
  num_gfns = $arg2;
}
probe qemu.user.aarch64.vmbus_gpadl_body = process("/usr/bin/qemu-aarch64").mark("vmbus_gpadl_body")
{
  gpadl_id = $arg1;
}
probe qemu.user.aarch64.vmbus_gpadl_created = process("/usr/bin/qemu-aarch64").mark("vmbus_gpadl_created")
{
  gpadl_id = $arg1;
}
probe qemu.user.aarch64.vmbus_gpadl_teardown = process("/usr/bin/qemu-aarch64").mark("vmbus_gpadl_teardown")
{
  gpadl_id = $arg1;
}
probe qemu.user.aarch64.vmbus_gpadl_torndown = process("/usr/bin/qemu-aarch64").mark("vmbus_gpadl_torndown")
{
  gpadl_id = $arg1;
}
probe qemu.user.aarch64.vmbus_open_channel = process("/usr/bin/qemu-aarch64").mark("vmbus_open_channel")
{
  chan_id = $arg1;
  gpadl_id = $arg2;
  target_vp = $arg3;
}
probe qemu.user.aarch64.vmbus_channel_open = process("/usr/bin/qemu-aarch64").mark("vmbus_channel_open")
{
  chan_id = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.vmbus_close_channel = process("/usr/bin/qemu-aarch64").mark("vmbus_close_channel")
{
  chan_id = $arg1;
}
probe qemu.user.aarch64.i2c_event = process("/usr/bin/qemu-aarch64").mark("i2c_event")
{
  event = $arg1;
  address = $arg2;
}
probe qemu.user.aarch64.i2c_send = process("/usr/bin/qemu-aarch64").mark("i2c_send")
{
  address = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.i2c_send_async = process("/usr/bin/qemu-aarch64").mark("i2c_send_async")
{
  address = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.i2c_recv = process("/usr/bin/qemu-aarch64").mark("i2c_recv")
{
  address = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.i2c_ack = process("/usr/bin/qemu-aarch64").mark("i2c_ack")
{
}
probe qemu.user.aarch64.aspeed_i2c_bus_cmd = process("/usr/bin/qemu-aarch64").mark("aspeed_i2c_bus_cmd")
{
  cmd = $arg1;
  cmd_flags = $arg2;
  count = $arg3;
  intr_status = $arg4;
}
probe qemu.user.aarch64.aspeed_i2c_bus_raise_interrupt = process("/usr/bin/qemu-aarch64").mark("aspeed_i2c_bus_raise_interrupt")
{
  intr_status = $arg1;
  s = $arg2;
}
probe qemu.user.aarch64.aspeed_i2c_bus_read = process("/usr/bin/qemu-aarch64").mark("aspeed_i2c_bus_read")
{
  busid = $arg1;
  offset = $arg2;
  size = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.aspeed_i2c_bus_write = process("/usr/bin/qemu-aarch64").mark("aspeed_i2c_bus_write")
{
  busid = $arg1;
  offset = $arg2;
  size = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.aspeed_i2c_bus_send = process("/usr/bin/qemu-aarch64").mark("aspeed_i2c_bus_send")
{
  mode = $arg1;
  i = $arg2;
  count = $arg3;
  byte = $arg4;
}
probe qemu.user.aarch64.aspeed_i2c_bus_recv = process("/usr/bin/qemu-aarch64").mark("aspeed_i2c_bus_recv")
{
  mode = $arg1;
  i = $arg2;
  count = $arg3;
  byte = $arg4;
}
probe qemu.user.aarch64.npcm7xx_smbus_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_read")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.npcm7xx_smbus_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_write")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.npcm7xx_smbus_start = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_start")
{
  id = $arg1;
  success = $arg2;
}
probe qemu.user.aarch64.npcm7xx_smbus_send_address = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_send_address")
{
  id = $arg1;
  addr = $arg2;
  recv = $arg3;
  success = $arg4;
}
probe qemu.user.aarch64.npcm7xx_smbus_send_byte = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_send_byte")
{
  id = $arg1;
  value = $arg2;
  success = $arg3;
}
probe qemu.user.aarch64.npcm7xx_smbus_recv_byte = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_recv_byte")
{
  id = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.npcm7xx_smbus_stop = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_stop")
{
  id = $arg1;
}
probe qemu.user.aarch64.npcm7xx_smbus_nack = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_nack")
{
  id = $arg1;
}
probe qemu.user.aarch64.npcm7xx_smbus_recv_fifo = process("/usr/bin/qemu-aarch64").mark("npcm7xx_smbus_recv_fifo")
{
  id = $arg1;
  received = $arg2;
  expected = $arg3;
}
probe qemu.user.aarch64.pca954x_write_bytes = process("/usr/bin/qemu-aarch64").mark("pca954x_write_bytes")
{
  value = $arg1;
}
probe qemu.user.aarch64.pca954x_read_data = process("/usr/bin/qemu-aarch64").mark("pca954x_read_data")
{
  value = $arg1;
}
probe qemu.user.aarch64.x86_iommu_iec_notify = process("/usr/bin/qemu-aarch64").mark("x86_iommu_iec_notify")
{
  global_ = $arg1;
  index = $arg2;
  mask = $arg3;
}
probe qemu.user.aarch64.vtd_inv_desc = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc")
{
  type = $arg1;
  hi = $arg2;
  lo = $arg3;
}
probe qemu.user.aarch64.vtd_inv_desc_cc_domain = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_cc_domain")
{
  domain = $arg1;
}
probe qemu.user.aarch64.vtd_inv_desc_cc_global = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_cc_global")
{
}
probe qemu.user.aarch64.vtd_inv_desc_cc_device = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_cc_device")
{
  bus = $arg1;
  dev = $arg2;
  fn = $arg3;
}
probe qemu.user.aarch64.vtd_inv_desc_cc_devices = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_cc_devices")
{
  sid = $arg1;
  fmask = $arg2;
}
probe qemu.user.aarch64.vtd_inv_desc_iotlb_global = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_iotlb_global")
{
}
probe qemu.user.aarch64.vtd_inv_desc_iotlb_domain = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_iotlb_domain")
{
  domain = $arg1;
}
probe qemu.user.aarch64.vtd_inv_desc_iotlb_pages = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_iotlb_pages")
{
  domain = $arg1;
  addr = $arg2;
  mask = $arg3;
}
probe qemu.user.aarch64.vtd_inv_desc_iotlb_pasid_pages = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_iotlb_pasid_pages")
{
  domain = $arg1;
  addr = $arg2;
  mask = $arg3;
  pasid = $arg4;
}
probe qemu.user.aarch64.vtd_inv_desc_iotlb_pasid = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_iotlb_pasid")
{
  domain = $arg1;
  pasid = $arg2;
}
probe qemu.user.aarch64.vtd_inv_desc_wait_sw = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_wait_sw")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.vtd_inv_desc_wait_irq = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_wait_irq")
{
  msg = $arg1;
}
probe qemu.user.aarch64.vtd_inv_desc_wait_write_fail = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_wait_write_fail")
{
  hi = $arg1;
  lo = $arg2;
}
probe qemu.user.aarch64.vtd_inv_desc_iec = process("/usr/bin/qemu-aarch64").mark("vtd_inv_desc_iec")
{
  granularity = $arg1;
  index = $arg2;
  mask = $arg3;
}
probe qemu.user.aarch64.vtd_inv_qi_enable = process("/usr/bin/qemu-aarch64").mark("vtd_inv_qi_enable")
{
  enable = $arg1;
}
probe qemu.user.aarch64.vtd_inv_qi_setup = process("/usr/bin/qemu-aarch64").mark("vtd_inv_qi_setup")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vtd_inv_qi_head = process("/usr/bin/qemu-aarch64").mark("vtd_inv_qi_head")
{
  head = $arg1;
}
probe qemu.user.aarch64.vtd_inv_qi_tail = process("/usr/bin/qemu-aarch64").mark("vtd_inv_qi_tail")
{
  head = $arg1;
}
probe qemu.user.aarch64.vtd_inv_qi_fetch = process("/usr/bin/qemu-aarch64").mark("vtd_inv_qi_fetch")
{
}
probe qemu.user.aarch64.vtd_context_cache_reset = process("/usr/bin/qemu-aarch64").mark("vtd_context_cache_reset")
{
}
probe qemu.user.aarch64.vtd_re_not_present = process("/usr/bin/qemu-aarch64").mark("vtd_re_not_present")
{
  bus = $arg1;
}
probe qemu.user.aarch64.vtd_ce_not_present = process("/usr/bin/qemu-aarch64").mark("vtd_ce_not_present")
{
  bus = $arg1;
  devfn = $arg2;
}
probe qemu.user.aarch64.vtd_iotlb_page_hit = process("/usr/bin/qemu-aarch64").mark("vtd_iotlb_page_hit")
{
  sid = $arg1;
  addr = $arg2;
  slpte = $arg3;
  domain = $arg4;
}
probe qemu.user.aarch64.vtd_iotlb_page_update = process("/usr/bin/qemu-aarch64").mark("vtd_iotlb_page_update")
{
  sid = $arg1;
  addr = $arg2;
  slpte = $arg3;
  domain = $arg4;
}
probe qemu.user.aarch64.vtd_iotlb_cc_hit = process("/usr/bin/qemu-aarch64").mark("vtd_iotlb_cc_hit")
{
  bus = $arg1;
  devfn = $arg2;
  high = $arg3;
  low = $arg4;
  gen = $arg5;
}
probe qemu.user.aarch64.vtd_iotlb_cc_update = process("/usr/bin/qemu-aarch64").mark("vtd_iotlb_cc_update")
{
  bus = $arg1;
  devfn = $arg2;
  high = $arg3;
  low = $arg4;
  gen1 = $arg5;
  gen2 = $arg6;
}
probe qemu.user.aarch64.vtd_iotlb_reset = process("/usr/bin/qemu-aarch64").mark("vtd_iotlb_reset")
{
  reason = $arg1;
}
probe qemu.user.aarch64.vtd_fault_disabled = process("/usr/bin/qemu-aarch64").mark("vtd_fault_disabled")
{
}
probe qemu.user.aarch64.vtd_replay_ce_valid = process("/usr/bin/qemu-aarch64").mark("vtd_replay_ce_valid")
{
  mode = $arg1;
  bus = $arg2;
  dev = $arg3;
  fn = $arg4;
  domain = $arg5;
  hi = $arg6;
  lo = $arg7;
}
probe qemu.user.aarch64.vtd_replay_ce_invalid = process("/usr/bin/qemu-aarch64").mark("vtd_replay_ce_invalid")
{
  bus = $arg1;
  dev = $arg2;
  fn = $arg3;
}
probe qemu.user.aarch64.vtd_page_walk_level = process("/usr/bin/qemu-aarch64").mark("vtd_page_walk_level")
{
  addr = $arg1;
  level = $arg2;
  start = $arg3;
  end = $arg4;
}
probe qemu.user.aarch64.vtd_page_walk_one = process("/usr/bin/qemu-aarch64").mark("vtd_page_walk_one")
{
  domain = $arg1;
  iova = $arg2;
  gpa = $arg3;
  mask = $arg4;
  perm = $arg5;
}
probe qemu.user.aarch64.vtd_page_walk_one_skip_map = process("/usr/bin/qemu-aarch64").mark("vtd_page_walk_one_skip_map")
{
  iova = $arg1;
  mask = $arg2;
  translated = $arg3;
}
probe qemu.user.aarch64.vtd_page_walk_one_skip_unmap = process("/usr/bin/qemu-aarch64").mark("vtd_page_walk_one_skip_unmap")
{
  iova = $arg1;
  mask = $arg2;
}
probe qemu.user.aarch64.vtd_page_walk_skip_read = process("/usr/bin/qemu-aarch64").mark("vtd_page_walk_skip_read")
{
  iova = $arg1;
  next_ = $arg2;
}
probe qemu.user.aarch64.vtd_page_walk_skip_reserve = process("/usr/bin/qemu-aarch64").mark("vtd_page_walk_skip_reserve")
{
  iova = $arg1;
  next_ = $arg2;
}
probe qemu.user.aarch64.vtd_switch_address_space = process("/usr/bin/qemu-aarch64").mark("vtd_switch_address_space")
{
  bus = $arg1;
  slot = $arg2;
  fn = $arg3;
  on = $arg4;
}
probe qemu.user.aarch64.vtd_as_unmap_whole = process("/usr/bin/qemu-aarch64").mark("vtd_as_unmap_whole")
{
  bus = $arg1;
  slot = $arg2;
  fn = $arg3;
  iova = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.vtd_translate_pt = process("/usr/bin/qemu-aarch64").mark("vtd_translate_pt")
{
  sid = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.vtd_pt_enable_fast_path = process("/usr/bin/qemu-aarch64").mark("vtd_pt_enable_fast_path")
{
  sid = $arg1;
  success = $arg2;
}
probe qemu.user.aarch64.vtd_irq_generate = process("/usr/bin/qemu-aarch64").mark("vtd_irq_generate")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.vtd_reg_read = process("/usr/bin/qemu-aarch64").mark("vtd_reg_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vtd_reg_write = process("/usr/bin/qemu-aarch64").mark("vtd_reg_write")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.vtd_reg_dmar_root = process("/usr/bin/qemu-aarch64").mark("vtd_reg_dmar_root")
{
  addr = $arg1;
  scalable = $arg2;
}
probe qemu.user.aarch64.vtd_reg_ir_root = process("/usr/bin/qemu-aarch64").mark("vtd_reg_ir_root")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vtd_reg_write_gcmd = process("/usr/bin/qemu-aarch64").mark("vtd_reg_write_gcmd")
{
  status = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vtd_reg_write_fectl = process("/usr/bin/qemu-aarch64").mark("vtd_reg_write_fectl")
{
  value = $arg1;
}
probe qemu.user.aarch64.vtd_reg_write_iectl = process("/usr/bin/qemu-aarch64").mark("vtd_reg_write_iectl")
{
  value = $arg1;
}
probe qemu.user.aarch64.vtd_reg_ics_clear_ip = process("/usr/bin/qemu-aarch64").mark("vtd_reg_ics_clear_ip")
{
}
probe qemu.user.aarch64.vtd_dmar_translate = process("/usr/bin/qemu-aarch64").mark("vtd_dmar_translate")
{
  bus = $arg1;
  slot = $arg2;
  func = $arg3;
  iova = $arg4;
  gpa = $arg5;
  mask = $arg6;
}
probe qemu.user.aarch64.vtd_dmar_enable = process("/usr/bin/qemu-aarch64").mark("vtd_dmar_enable")
{
  en = $arg1;
}
probe qemu.user.aarch64.vtd_dmar_fault = process("/usr/bin/qemu-aarch64").mark("vtd_dmar_fault")
{
  sid = $arg1;
  fault = $arg2;
  addr = $arg3;
  is_write = $arg4;
}
probe qemu.user.aarch64.vtd_ir_enable = process("/usr/bin/qemu-aarch64").mark("vtd_ir_enable")
{
  en = $arg1;
}
probe qemu.user.aarch64.vtd_ir_irte_get = process("/usr/bin/qemu-aarch64").mark("vtd_ir_irte_get")
{
  index = $arg1;
  lo = $arg2;
  hi = $arg3;
}
probe qemu.user.aarch64.vtd_ir_remap = process("/usr/bin/qemu-aarch64").mark("vtd_ir_remap")
{
  index = $arg1;
  tri = $arg2;
  vec = $arg3;
  deliver = $arg4;
  dest = $arg5;
  dest_mode = $arg6;
}
probe qemu.user.aarch64.vtd_ir_remap_type = process("/usr/bin/qemu-aarch64").mark("vtd_ir_remap_type")
{
  type = $arg1;
}
probe qemu.user.aarch64.vtd_ir_remap_msi = process("/usr/bin/qemu-aarch64").mark("vtd_ir_remap_msi")
{
  addr = $arg1;
  data = $arg2;
  addr2 = $arg3;
  data2 = $arg4;
}
probe qemu.user.aarch64.vtd_ir_remap_msi_req = process("/usr/bin/qemu-aarch64").mark("vtd_ir_remap_msi_req")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.vtd_fsts_ppf = process("/usr/bin/qemu-aarch64").mark("vtd_fsts_ppf")
{
  set = $arg1;
}
probe qemu.user.aarch64.vtd_fsts_clear_ip = process("/usr/bin/qemu-aarch64").mark("vtd_fsts_clear_ip")
{
}
probe qemu.user.aarch64.vtd_frr_new = process("/usr/bin/qemu-aarch64").mark("vtd_frr_new")
{
  index = $arg1;
  hi = $arg2;
  lo = $arg3;
}
probe qemu.user.aarch64.vtd_warn_invalid_qi_tail = process("/usr/bin/qemu-aarch64").mark("vtd_warn_invalid_qi_tail")
{
  tail = $arg1;
}
probe qemu.user.aarch64.vtd_warn_ir_vector = process("/usr/bin/qemu-aarch64").mark("vtd_warn_ir_vector")
{
  sid = $arg1;
  index = $arg2;
  vec = $arg3;
  target = $arg4;
}
probe qemu.user.aarch64.vtd_warn_ir_trigger = process("/usr/bin/qemu-aarch64").mark("vtd_warn_ir_trigger")
{
  sid = $arg1;
  index = $arg2;
  trig = $arg3;
  target = $arg4;
}
probe qemu.user.aarch64.amdvi_evntlog_fail = process("/usr/bin/qemu-aarch64").mark("amdvi_evntlog_fail")
{
  addr = $arg1;
  head = $arg2;
}
probe qemu.user.aarch64.amdvi_cache_update = process("/usr/bin/qemu-aarch64").mark("amdvi_cache_update")
{
  domid = $arg1;
  bus = $arg2;
  slot = $arg3;
  func = $arg4;
  gpa = $arg5;
  txaddr = $arg6;
}
probe qemu.user.aarch64.amdvi_completion_wait_fail = process("/usr/bin/qemu-aarch64").mark("amdvi_completion_wait_fail")
{
  addr = $arg1;
}
probe qemu.user.aarch64.amdvi_mmio_write = process("/usr/bin/qemu-aarch64").mark("amdvi_mmio_write")
{
  reg = $arg1;
  addr = $arg2;
  size = $arg3;
  val = $arg4;
  offset = $arg5;
}
probe qemu.user.aarch64.amdvi_mmio_read = process("/usr/bin/qemu-aarch64").mark("amdvi_mmio_read")
{
  reg = $arg1;
  addr = $arg2;
  size = $arg3;
  offset = $arg4;
}
probe qemu.user.aarch64.amdvi_mmio_read_invalid = process("/usr/bin/qemu-aarch64").mark("amdvi_mmio_read_invalid")
{
  max = $arg1;
  addr = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.amdvi_command_error = process("/usr/bin/qemu-aarch64").mark("amdvi_command_error")
{
  status = $arg1;
}
probe qemu.user.aarch64.amdvi_command_read_fail = process("/usr/bin/qemu-aarch64").mark("amdvi_command_read_fail")
{
  addr = $arg1;
  head = $arg2;
}
probe qemu.user.aarch64.amdvi_command_exec = process("/usr/bin/qemu-aarch64").mark("amdvi_command_exec")
{
  head = $arg1;
  tail = $arg2;
  buf = $arg3;
}
probe qemu.user.aarch64.amdvi_unhandled_command = process("/usr/bin/qemu-aarch64").mark("amdvi_unhandled_command")
{
  type = $arg1;
}
probe qemu.user.aarch64.amdvi_intr_inval = process("/usr/bin/qemu-aarch64").mark("amdvi_intr_inval")
{
}
probe qemu.user.aarch64.amdvi_iotlb_inval = process("/usr/bin/qemu-aarch64").mark("amdvi_iotlb_inval")
{
}
probe qemu.user.aarch64.amdvi_prefetch_pages = process("/usr/bin/qemu-aarch64").mark("amdvi_prefetch_pages")
{
}
probe qemu.user.aarch64.amdvi_pages_inval = process("/usr/bin/qemu-aarch64").mark("amdvi_pages_inval")
{
  domid = $arg1;
}
probe qemu.user.aarch64.amdvi_all_inval = process("/usr/bin/qemu-aarch64").mark("amdvi_all_inval")
{
}
probe qemu.user.aarch64.amdvi_ppr_exec = process("/usr/bin/qemu-aarch64").mark("amdvi_ppr_exec")
{
}
probe qemu.user.aarch64.amdvi_devtab_inval = process("/usr/bin/qemu-aarch64").mark("amdvi_devtab_inval")
{
  bus = $arg1;
  slot = $arg2;
  func = $arg3;
}
probe qemu.user.aarch64.amdvi_completion_wait = process("/usr/bin/qemu-aarch64").mark("amdvi_completion_wait")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.amdvi_control_status = process("/usr/bin/qemu-aarch64").mark("amdvi_control_status")
{
  val = $arg1;
}
probe qemu.user.aarch64.amdvi_iotlb_reset = process("/usr/bin/qemu-aarch64").mark("amdvi_iotlb_reset")
{
}
probe qemu.user.aarch64.amdvi_dte_get_fail = process("/usr/bin/qemu-aarch64").mark("amdvi_dte_get_fail")
{
  addr = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.amdvi_invalid_dte = process("/usr/bin/qemu-aarch64").mark("amdvi_invalid_dte")
{
  addr = $arg1;
}
probe qemu.user.aarch64.amdvi_get_pte_hwerror = process("/usr/bin/qemu-aarch64").mark("amdvi_get_pte_hwerror")
{
  addr = $arg1;
}
probe qemu.user.aarch64.amdvi_mode_invalid = process("/usr/bin/qemu-aarch64").mark("amdvi_mode_invalid")
{
  level = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.amdvi_page_fault = process("/usr/bin/qemu-aarch64").mark("amdvi_page_fault")
{
  addr = $arg1;
}
probe qemu.user.aarch64.amdvi_iotlb_hit = process("/usr/bin/qemu-aarch64").mark("amdvi_iotlb_hit")
{
  bus = $arg1;
  slot = $arg2;
  func = $arg3;
  addr = $arg4;
  txaddr = $arg5;
}
probe qemu.user.aarch64.amdvi_translation_result = process("/usr/bin/qemu-aarch64").mark("amdvi_translation_result")
{
  bus = $arg1;
  slot = $arg2;
  func = $arg3;
  addr = $arg4;
  txaddr = $arg5;
}
probe qemu.user.aarch64.amdvi_mem_ir_write_req = process("/usr/bin/qemu-aarch64").mark("amdvi_mem_ir_write_req")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.amdvi_mem_ir_write = process("/usr/bin/qemu-aarch64").mark("amdvi_mem_ir_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.amdvi_ir_remap_msi_req = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_remap_msi_req")
{
  addr = $arg1;
  data = $arg2;
  devid = $arg3;
}
probe qemu.user.aarch64.amdvi_ir_remap_msi = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_remap_msi")
{
  addr = $arg1;
  data = $arg2;
  addr2 = $arg3;
  data2 = $arg4;
}
probe qemu.user.aarch64.amdvi_err = process("/usr/bin/qemu-aarch64").mark("amdvi_err")
{
  str = $arg1;
}
probe qemu.user.aarch64.amdvi_ir_irte = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_irte")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.amdvi_ir_irte_val = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_irte_val")
{
  data = $arg1;
}
probe qemu.user.aarch64.amdvi_ir_err = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_err")
{
  str = $arg1;
}
probe qemu.user.aarch64.amdvi_ir_intctl = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_intctl")
{
  val = $arg1;
}
probe qemu.user.aarch64.amdvi_ir_target_abort = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_target_abort")
{
  str = $arg1;
}
probe qemu.user.aarch64.amdvi_ir_delivery_mode = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_delivery_mode")
{
  str = $arg1;
}
probe qemu.user.aarch64.amdvi_ir_irte_ga_val = process("/usr/bin/qemu-aarch64").mark("amdvi_ir_irte_ga_val")
{
  hi = $arg1;
  lo = $arg2;
}
probe qemu.user.aarch64.vmport_register = process("/usr/bin/qemu-aarch64").mark("vmport_register")
{
  command = $arg1;
  func = $arg2;
  opaque = $arg3;
}
probe qemu.user.aarch64.vmport_command = process("/usr/bin/qemu-aarch64").mark("vmport_command")
{
  command = $arg1;
}
probe qemu.user.aarch64.x86_gsi_interrupt = process("/usr/bin/qemu-aarch64").mark("x86_gsi_interrupt")
{
  irqn = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.x86_pic_interrupt = process("/usr/bin/qemu-aarch64").mark("x86_pic_interrupt")
{
  irqn = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.port92_read = process("/usr/bin/qemu-aarch64").mark("port92_read")
{
  val = $arg1;
}
probe qemu.user.aarch64.port92_write = process("/usr/bin/qemu-aarch64").mark("port92_write")
{
  val = $arg1;
}
probe qemu.user.aarch64.xen_platform_log = process("/usr/bin/qemu-aarch64").mark("xen_platform_log")
{
  s = $arg1;
}
probe qemu.user.aarch64.xen_pv_mmio_read = process("/usr/bin/qemu-aarch64").mark("xen_pv_mmio_read")
{
  addr = $arg1;
}
probe qemu.user.aarch64.xen_pv_mmio_write = process("/usr/bin/qemu-aarch64").mark("xen_pv_mmio_write")
{
  addr = $arg1;
}
probe qemu.user.aarch64.xen_ram_alloc = process("/usr/bin/qemu-aarch64").mark("xen_ram_alloc")
{
  ram_addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.xen_client_set_memory = process("/usr/bin/qemu-aarch64").mark("xen_client_set_memory")
{
  start_addr = $arg1;
  size = $arg2;
  log_dirty = $arg3;
}
probe qemu.user.aarch64.handle_ioreq = process("/usr/bin/qemu-aarch64").mark("handle_ioreq")
{
  req = $arg1;
  type = $arg2;
  dir = $arg3;
  df = $arg4;
  data_is_ptr = $arg5;
  addr = $arg6;
  data = $arg7;
  count = $arg8;
  size = $arg9;
}
probe qemu.user.aarch64.handle_ioreq_read = process("/usr/bin/qemu-aarch64").mark("handle_ioreq_read")
{
  req = $arg1;
  type = $arg2;
  df = $arg3;
  data_is_ptr = $arg4;
  addr = $arg5;
  data = $arg6;
  count = $arg7;
  size = $arg8;
}
probe qemu.user.aarch64.handle_ioreq_write = process("/usr/bin/qemu-aarch64").mark("handle_ioreq_write")
{
  req = $arg1;
  type = $arg2;
  df = $arg3;
  data_is_ptr = $arg4;
  addr = $arg5;
  data = $arg6;
  count = $arg7;
  size = $arg8;
}
probe qemu.user.aarch64.cpu_ioreq_pio = process("/usr/bin/qemu-aarch64").mark("cpu_ioreq_pio")
{
  req = $arg1;
  dir = $arg2;
  df = $arg3;
  data_is_ptr = $arg4;
  addr = $arg5;
  data = $arg6;
  count = $arg7;
  size = $arg8;
}
probe qemu.user.aarch64.cpu_ioreq_pio_read_reg = process("/usr/bin/qemu-aarch64").mark("cpu_ioreq_pio_read_reg")
{
  req = $arg1;
  data = $arg2;
  addr = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.cpu_ioreq_pio_write_reg = process("/usr/bin/qemu-aarch64").mark("cpu_ioreq_pio_write_reg")
{
  req = $arg1;
  data = $arg2;
  addr = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.cpu_ioreq_move = process("/usr/bin/qemu-aarch64").mark("cpu_ioreq_move")
{
  req = $arg1;
  dir = $arg2;
  df = $arg3;
  data_is_ptr = $arg4;
  addr = $arg5;
  data = $arg6;
  count = $arg7;
  size = $arg8;
}
probe qemu.user.aarch64.xen_map_resource_ioreq = process("/usr/bin/qemu-aarch64").mark("xen_map_resource_ioreq")
{
  id = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.cpu_ioreq_config_read = process("/usr/bin/qemu-aarch64").mark("cpu_ioreq_config_read")
{
  req = $arg1;
  sbdf = $arg2;
  reg = $arg3;
  size = $arg4;
  data = $arg5;
}
probe qemu.user.aarch64.cpu_ioreq_config_write = process("/usr/bin/qemu-aarch64").mark("cpu_ioreq_config_write")
{
  req = $arg1;
  sbdf = $arg2;
  reg = $arg3;
  size = $arg4;
  data = $arg5;
}
probe qemu.user.aarch64.xen_map_cache = process("/usr/bin/qemu-aarch64").mark("xen_map_cache")
{
  phys_addr = $arg1;
}
probe qemu.user.aarch64.xen_remap_bucket = process("/usr/bin/qemu-aarch64").mark("xen_remap_bucket")
{
  index = $arg1;
}
probe qemu.user.aarch64.xen_map_cache_return = process("/usr/bin/qemu-aarch64").mark("xen_map_cache_return")
{
  ptr = $arg1;
}
probe qemu.user.aarch64.ide_ioport_read = process("/usr/bin/qemu-aarch64").mark("ide_ioport_read")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
  bus = $arg4;
  s = $arg5;
}
probe qemu.user.aarch64.ide_ioport_write = process("/usr/bin/qemu-aarch64").mark("ide_ioport_write")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
  bus = $arg4;
  s = $arg5;
}
probe qemu.user.aarch64.ide_status_read = process("/usr/bin/qemu-aarch64").mark("ide_status_read")
{
  addr = $arg1;
  val = $arg2;
  bus = $arg3;
  s = $arg4;
}
probe qemu.user.aarch64.ide_ctrl_write = process("/usr/bin/qemu-aarch64").mark("ide_ctrl_write")
{
  addr = $arg1;
  val = $arg2;
  bus = $arg3;
}
probe qemu.user.aarch64.ide_data_readw = process("/usr/bin/qemu-aarch64").mark("ide_data_readw")
{
  addr = $arg1;
  val = $arg2;
  bus = $arg3;
  s = $arg4;
}
probe qemu.user.aarch64.ide_data_writew = process("/usr/bin/qemu-aarch64").mark("ide_data_writew")
{
  addr = $arg1;
  val = $arg2;
  bus = $arg3;
  s = $arg4;
}
probe qemu.user.aarch64.ide_data_readl = process("/usr/bin/qemu-aarch64").mark("ide_data_readl")
{
  addr = $arg1;
  val = $arg2;
  bus = $arg3;
  s = $arg4;
}
probe qemu.user.aarch64.ide_data_writel = process("/usr/bin/qemu-aarch64").mark("ide_data_writel")
{
  addr = $arg1;
  val = $arg2;
  bus = $arg3;
  s = $arg4;
}
probe qemu.user.aarch64.ide_exec_cmd = process("/usr/bin/qemu-aarch64").mark("ide_exec_cmd")
{
  bus = $arg1;
  state = $arg2;
  cmd = $arg3;
}
probe qemu.user.aarch64.ide_cancel_dma_sync_buffered = process("/usr/bin/qemu-aarch64").mark("ide_cancel_dma_sync_buffered")
{
  fn = $arg1;
  req = $arg2;
}
probe qemu.user.aarch64.ide_cancel_dma_sync_remaining = process("/usr/bin/qemu-aarch64").mark("ide_cancel_dma_sync_remaining")
{
}
probe qemu.user.aarch64.ide_sector_read = process("/usr/bin/qemu-aarch64").mark("ide_sector_read")
{
  sector_num = $arg1;
  nsectors = $arg2;
}
probe qemu.user.aarch64.ide_sector_write = process("/usr/bin/qemu-aarch64").mark("ide_sector_write")
{
  sector_num = $arg1;
  nsectors = $arg2;
}
probe qemu.user.aarch64.ide_reset = process("/usr/bin/qemu-aarch64").mark("ide_reset")
{
  s = $arg1;
}
probe qemu.user.aarch64.ide_bus_reset_aio = process("/usr/bin/qemu-aarch64").mark("ide_bus_reset_aio")
{
}
probe qemu.user.aarch64.ide_dma_cb = process("/usr/bin/qemu-aarch64").mark("ide_dma_cb")
{
  s = $arg1;
  sector_num = $arg2;
  n = $arg3;
  dma = $arg4;
}
probe qemu.user.aarch64.bmdma_read_cmd646 = process("/usr/bin/qemu-aarch64").mark("bmdma_read_cmd646")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.bmdma_write_cmd646 = process("/usr/bin/qemu-aarch64").mark("bmdma_write_cmd646")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.bmdma_reset = process("/usr/bin/qemu-aarch64").mark("bmdma_reset")
{
}
probe qemu.user.aarch64.bmdma_cmd_writeb = process("/usr/bin/qemu-aarch64").mark("bmdma_cmd_writeb")
{
  val = $arg1;
}
probe qemu.user.aarch64.bmdma_addr_read = process("/usr/bin/qemu-aarch64").mark("bmdma_addr_read")
{
  data = $arg1;
}
probe qemu.user.aarch64.bmdma_addr_write = process("/usr/bin/qemu-aarch64").mark("bmdma_addr_write")
{
  data = $arg1;
}
probe qemu.user.aarch64.bmdma_read = process("/usr/bin/qemu-aarch64").mark("bmdma_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.bmdma_write = process("/usr/bin/qemu-aarch64").mark("bmdma_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sii3112_read = process("/usr/bin/qemu-aarch64").mark("sii3112_read")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.sii3112_write = process("/usr/bin/qemu-aarch64").mark("sii3112_write")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.sii3112_set_irq = process("/usr/bin/qemu-aarch64").mark("sii3112_set_irq")
{
  channel = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.bmdma_read_via = process("/usr/bin/qemu-aarch64").mark("bmdma_read_via")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.bmdma_write_via = process("/usr/bin/qemu-aarch64").mark("bmdma_write_via")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.cd_read_sector_sync = process("/usr/bin/qemu-aarch64").mark("cd_read_sector_sync")
{
  lba = $arg1;
}
probe qemu.user.aarch64.cd_read_sector_cb = process("/usr/bin/qemu-aarch64").mark("cd_read_sector_cb")
{
  lba = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.cd_read_sector = process("/usr/bin/qemu-aarch64").mark("cd_read_sector")
{
  lba = $arg1;
}
probe qemu.user.aarch64.ide_atapi_cmd_error = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_error")
{
  s = $arg1;
  sense_key = $arg2;
  asc = $arg3;
}
probe qemu.user.aarch64.ide_atapi_cmd_reply_end = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_reply_end")
{
  s = $arg1;
  tx_size = $arg2;
  elem_tx_size = $arg3;
  index = $arg4;
}
probe qemu.user.aarch64.ide_atapi_cmd_reply_end_eot = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_reply_end_eot")
{
  s = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.ide_atapi_cmd_reply_end_bcl = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_reply_end_bcl")
{
  s = $arg1;
  bcl = $arg2;
}
probe qemu.user.aarch64.ide_atapi_cmd_reply_end_new = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_reply_end_new")
{
  s = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.ide_atapi_cmd_check_status = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_check_status")
{
  s = $arg1;
}
probe qemu.user.aarch64.ide_atapi_cmd_read = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_read")
{
  s = $arg1;
  method = $arg2;
  lba = $arg3;
  nb_sectors = $arg4;
}
probe qemu.user.aarch64.ide_atapi_cmd = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd")
{
  s = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.ide_atapi_cmd_read_dma_cb_aio = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_read_dma_cb_aio")
{
  s = $arg1;
  lba = $arg2;
  n = $arg3;
}
probe qemu.user.aarch64.ide_atapi_cmd_packet = process("/usr/bin/qemu-aarch64").mark("ide_atapi_cmd_packet")
{
  s = $arg1;
  limit_ = $arg2;
  packet = $arg3;
}
probe qemu.user.aarch64.ahci_port_read = process("/usr/bin/qemu-aarch64").mark("ahci_port_read")
{
  s = $arg1;
  port = $arg2;
  reg = $arg3;
  offset = $arg4;
  ret = $arg5;
}
probe qemu.user.aarch64.ahci_port_read_default = process("/usr/bin/qemu-aarch64").mark("ahci_port_read_default")
{
  s = $arg1;
  port = $arg2;
  reg = $arg3;
  offset = $arg4;
}
probe qemu.user.aarch64.ahci_irq_raise = process("/usr/bin/qemu-aarch64").mark("ahci_irq_raise")
{
  s = $arg1;
}
probe qemu.user.aarch64.ahci_irq_lower = process("/usr/bin/qemu-aarch64").mark("ahci_irq_lower")
{
  s = $arg1;
}
probe qemu.user.aarch64.ahci_check_irq = process("/usr/bin/qemu-aarch64").mark("ahci_check_irq")
{
  s = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.ahci_trigger_irq = process("/usr/bin/qemu-aarch64").mark("ahci_trigger_irq")
{
  s = $arg1;
  port = $arg2;
  name = $arg3;
  val = $arg4;
  old = $arg5;
  new = $arg6;
  effective = $arg7;
}
probe qemu.user.aarch64.ahci_port_write = process("/usr/bin/qemu-aarch64").mark("ahci_port_write")
{
  s = $arg1;
  port = $arg2;
  reg = $arg3;
  offset = $arg4;
  val = $arg5;
}
probe qemu.user.aarch64.ahci_port_write_unimpl = process("/usr/bin/qemu-aarch64").mark("ahci_port_write_unimpl")
{
  s = $arg1;
  port = $arg2;
  reg = $arg3;
  offset = $arg4;
  val = $arg5;
}
probe qemu.user.aarch64.ahci_mem_read_32 = process("/usr/bin/qemu-aarch64").mark("ahci_mem_read_32")
{
  s = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.ahci_mem_read_32_default = process("/usr/bin/qemu-aarch64").mark("ahci_mem_read_32_default")
{
  s = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.ahci_mem_read_32_host = process("/usr/bin/qemu-aarch64").mark("ahci_mem_read_32_host")
{
  s = $arg1;
  reg = $arg2;
  addr = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.ahci_mem_read_32_host_default = process("/usr/bin/qemu-aarch64").mark("ahci_mem_read_32_host_default")
{
  s = $arg1;
  reg = $arg2;
  addr = $arg3;
}
probe qemu.user.aarch64.ahci_mem_read = process("/usr/bin/qemu-aarch64").mark("ahci_mem_read")
{
  s = $arg1;
  size = $arg2;
  addr = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.ahci_mem_write = process("/usr/bin/qemu-aarch64").mark("ahci_mem_write")
{
  s = $arg1;
  size = $arg2;
  addr = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.ahci_mem_write_host_unimpl = process("/usr/bin/qemu-aarch64").mark("ahci_mem_write_host_unimpl")
{
  s = $arg1;
  size = $arg2;
  reg = $arg3;
  addr = $arg4;
}
probe qemu.user.aarch64.ahci_mem_write_host = process("/usr/bin/qemu-aarch64").mark("ahci_mem_write_host")
{
  s = $arg1;
  size = $arg2;
  reg = $arg3;
  addr = $arg4;
  val = $arg5;
}
probe qemu.user.aarch64.ahci_mem_write_unimpl = process("/usr/bin/qemu-aarch64").mark("ahci_mem_write_unimpl")
{
  s = $arg1;
  size = $arg2;
  addr = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.ahci_set_signature = process("/usr/bin/qemu-aarch64").mark("ahci_set_signature")
{
  s = $arg1;
  port = $arg2;
  nsector = $arg3;
  sector = $arg4;
  lcyl = $arg5;
  hcyl = $arg6;
  sig = $arg7;
}
probe qemu.user.aarch64.ahci_reset_port = process("/usr/bin/qemu-aarch64").mark("ahci_reset_port")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_unmap_fis_address_null = process("/usr/bin/qemu-aarch64").mark("ahci_unmap_fis_address_null")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_unmap_clb_address_null = process("/usr/bin/qemu-aarch64").mark("ahci_unmap_clb_address_null")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_populate_sglist = process("/usr/bin/qemu-aarch64").mark("ahci_populate_sglist")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_populate_sglist_no_prdtl = process("/usr/bin/qemu-aarch64").mark("ahci_populate_sglist_no_prdtl")
{
  s = $arg1;
  port = $arg2;
  opts = $arg3;
}
probe qemu.user.aarch64.ahci_populate_sglist_no_map = process("/usr/bin/qemu-aarch64").mark("ahci_populate_sglist_no_map")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_populate_sglist_short_map = process("/usr/bin/qemu-aarch64").mark("ahci_populate_sglist_short_map")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_populate_sglist_bad_offset = process("/usr/bin/qemu-aarch64").mark("ahci_populate_sglist_bad_offset")
{
  s = $arg1;
  port = $arg2;
  off_idx = $arg3;
  off_pos = $arg4;
}
probe qemu.user.aarch64.ncq_finish = process("/usr/bin/qemu-aarch64").mark("ncq_finish")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.execute_ncq_command_read = process("/usr/bin/qemu-aarch64").mark("execute_ncq_command_read")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
  count = $arg4;
  lba = $arg5;
}
probe qemu.user.aarch64.execute_ncq_command_unsup = process("/usr/bin/qemu-aarch64").mark("execute_ncq_command_unsup")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
  cmd = $arg4;
}
probe qemu.user.aarch64.process_ncq_command_mismatch = process("/usr/bin/qemu-aarch64").mark("process_ncq_command_mismatch")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
  slot = $arg4;
}
probe qemu.user.aarch64.process_ncq_command_aux = process("/usr/bin/qemu-aarch64").mark("process_ncq_command_aux")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.process_ncq_command_prioicc = process("/usr/bin/qemu-aarch64").mark("process_ncq_command_prioicc")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.process_ncq_command_fua = process("/usr/bin/qemu-aarch64").mark("process_ncq_command_fua")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.process_ncq_command_rarc = process("/usr/bin/qemu-aarch64").mark("process_ncq_command_rarc")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.process_ncq_command_large = process("/usr/bin/qemu-aarch64").mark("process_ncq_command_large")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
  prdtl = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.process_ncq_command = process("/usr/bin/qemu-aarch64").mark("process_ncq_command")
{
  s = $arg1;
  port = $arg2;
  tag = $arg3;
  cmd = $arg4;
  lba = $arg5;
  end = $arg6;
}
probe qemu.user.aarch64.handle_reg_h2d_fis_pmp = process("/usr/bin/qemu-aarch64").mark("handle_reg_h2d_fis_pmp")
{
  s = $arg1;
  port = $arg2;
  b0 = $arg3;
  b1 = $arg4;
  b2 = $arg5;
}
probe qemu.user.aarch64.handle_reg_h2d_fis_res = process("/usr/bin/qemu-aarch64").mark("handle_reg_h2d_fis_res")
{
  s = $arg1;
  port = $arg2;
  b0 = $arg3;
  b1 = $arg4;
  b2 = $arg5;
}
probe qemu.user.aarch64.handle_cmd_busy = process("/usr/bin/qemu-aarch64").mark("handle_cmd_busy")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.handle_cmd_nolist = process("/usr/bin/qemu-aarch64").mark("handle_cmd_nolist")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.handle_cmd_badport = process("/usr/bin/qemu-aarch64").mark("handle_cmd_badport")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.handle_cmd_badfis = process("/usr/bin/qemu-aarch64").mark("handle_cmd_badfis")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.handle_cmd_badmap = process("/usr/bin/qemu-aarch64").mark("handle_cmd_badmap")
{
  s = $arg1;
  port = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.handle_cmd_unhandled_fis = process("/usr/bin/qemu-aarch64").mark("handle_cmd_unhandled_fis")
{
  s = $arg1;
  port = $arg2;
  b0 = $arg3;
  b1 = $arg4;
  b2 = $arg5;
}
probe qemu.user.aarch64.ahci_pio_transfer = process("/usr/bin/qemu-aarch64").mark("ahci_pio_transfer")
{
  s = $arg1;
  port = $arg2;
  rw = $arg3;
  size = $arg4;
  tgt = $arg5;
  sgl = $arg6;
}
probe qemu.user.aarch64.ahci_start_dma = process("/usr/bin/qemu-aarch64").mark("ahci_start_dma")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_dma_prepare_buf = process("/usr/bin/qemu-aarch64").mark("ahci_dma_prepare_buf")
{
  s = $arg1;
  port = $arg2;
  io_buffer_size = $arg3;
  limit_ = $arg4;
}
probe qemu.user.aarch64.ahci_dma_prepare_buf_fail = process("/usr/bin/qemu-aarch64").mark("ahci_dma_prepare_buf_fail")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_dma_rw_buf = process("/usr/bin/qemu-aarch64").mark("ahci_dma_rw_buf")
{
  s = $arg1;
  port = $arg2;
  l = $arg3;
}
probe qemu.user.aarch64.ahci_cmd_done = process("/usr/bin/qemu-aarch64").mark("ahci_cmd_done")
{
  s = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.ahci_reset = process("/usr/bin/qemu-aarch64").mark("ahci_reset")
{
  s = $arg1;
}
probe qemu.user.aarch64.handle_reg_h2d_fis_dump = process("/usr/bin/qemu-aarch64").mark("handle_reg_h2d_fis_dump")
{
  s = $arg1;
  port = $arg2;
  fis = $arg3;
}
probe qemu.user.aarch64.handle_cmd_fis_dump = process("/usr/bin/qemu-aarch64").mark("handle_cmd_fis_dump")
{
  s = $arg1;
  port = $arg2;
  fis = $arg3;
}
probe qemu.user.aarch64.allwinner_ahci_mem_read = process("/usr/bin/qemu-aarch64").mark("allwinner_ahci_mem_read")
{
  s = $arg1;
  a = $arg2;
  addr = $arg3;
  val = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.allwinner_ahci_mem_write = process("/usr/bin/qemu-aarch64").mark("allwinner_ahci_mem_write")
{
  s = $arg1;
  a = $arg2;
  addr = $arg3;
  val = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.adb_device_kbd_no_key = process("/usr/bin/qemu-aarch64").mark("adb_device_kbd_no_key")
{
}
probe qemu.user.aarch64.adb_device_kbd_writereg = process("/usr/bin/qemu-aarch64").mark("adb_device_kbd_writereg")
{
  reg = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.adb_device_kbd_readreg = process("/usr/bin/qemu-aarch64").mark("adb_device_kbd_readreg")
{
  reg = $arg1;
  val0 = $arg2;
  val1 = $arg3;
}
probe qemu.user.aarch64.adb_device_kbd_request_change_addr = process("/usr/bin/qemu-aarch64").mark("adb_device_kbd_request_change_addr")
{
  devaddr = $arg1;
}
probe qemu.user.aarch64.adb_device_kbd_request_change_addr_and_handler = process("/usr/bin/qemu-aarch64").mark("adb_device_kbd_request_change_addr_and_handler")
{
  devaddr = $arg1;
  handler = $arg2;
}
probe qemu.user.aarch64.adb_device_mouse_flush = process("/usr/bin/qemu-aarch64").mark("adb_device_mouse_flush")
{
}
probe qemu.user.aarch64.adb_device_mouse_writereg = process("/usr/bin/qemu-aarch64").mark("adb_device_mouse_writereg")
{
  reg = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.adb_device_mouse_readreg = process("/usr/bin/qemu-aarch64").mark("adb_device_mouse_readreg")
{
  reg = $arg1;
  val0 = $arg2;
  val1 = $arg3;
}
probe qemu.user.aarch64.adb_device_mouse_request_change_addr = process("/usr/bin/qemu-aarch64").mark("adb_device_mouse_request_change_addr")
{
  devaddr = $arg1;
}
probe qemu.user.aarch64.adb_device_mouse_request_change_addr_and_handler = process("/usr/bin/qemu-aarch64").mark("adb_device_mouse_request_change_addr_and_handler")
{
  devaddr = $arg1;
  handler = $arg2;
}
probe qemu.user.aarch64.adb_bus_request = process("/usr/bin/qemu-aarch64").mark("adb_bus_request")
{
  addr = $arg1;
  cmd = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.adb_bus_request_done = process("/usr/bin/qemu-aarch64").mark("adb_bus_request_done")
{
  addr = $arg1;
  cmd = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.adb_bus_autopoll_block = process("/usr/bin/qemu-aarch64").mark("adb_bus_autopoll_block")
{
  blocked = $arg1;
}
probe qemu.user.aarch64.adb_bus_autopoll_cb = process("/usr/bin/qemu-aarch64").mark("adb_bus_autopoll_cb")
{
  mask = $arg1;
}
probe qemu.user.aarch64.adb_bus_autopoll_cb_done = process("/usr/bin/qemu-aarch64").mark("adb_bus_autopoll_cb_done")
{
  mask = $arg1;
}
probe qemu.user.aarch64.pckbd_kbd_read_data = process("/usr/bin/qemu-aarch64").mark("pckbd_kbd_read_data")
{
  val = $arg1;
}
probe qemu.user.aarch64.pckbd_kbd_read_status = process("/usr/bin/qemu-aarch64").mark("pckbd_kbd_read_status")
{
  status = $arg1;
}
probe qemu.user.aarch64.pckbd_outport_write = process("/usr/bin/qemu-aarch64").mark("pckbd_outport_write")
{
  val = $arg1;
}
probe qemu.user.aarch64.pckbd_kbd_write_command = process("/usr/bin/qemu-aarch64").mark("pckbd_kbd_write_command")
{
  val = $arg1;
}
probe qemu.user.aarch64.pckbd_kbd_write_data = process("/usr/bin/qemu-aarch64").mark("pckbd_kbd_write_data")
{
  val = $arg1;
}
probe qemu.user.aarch64.ps2_put_keycode = process("/usr/bin/qemu-aarch64").mark("ps2_put_keycode")
{
  opaque = $arg1;
  keycode = $arg2;
}
probe qemu.user.aarch64.ps2_keyboard_event = process("/usr/bin/qemu-aarch64").mark("ps2_keyboard_event")
{
  opaque = $arg1;
  qcode = $arg2;
  down = $arg3;
  modifier = $arg4;
  modifiers = $arg5;
  set = $arg6;
  xlate = $arg7;
}
probe qemu.user.aarch64.ps2_read_data = process("/usr/bin/qemu-aarch64").mark("ps2_read_data")
{
  opaque = $arg1;
}
probe qemu.user.aarch64.ps2_set_ledstate = process("/usr/bin/qemu-aarch64").mark("ps2_set_ledstate")
{
  s = $arg1;
  ledstate = $arg2;
}
probe qemu.user.aarch64.ps2_reset_keyboard = process("/usr/bin/qemu-aarch64").mark("ps2_reset_keyboard")
{
  s = $arg1;
}
probe qemu.user.aarch64.ps2_write_keyboard = process("/usr/bin/qemu-aarch64").mark("ps2_write_keyboard")
{
  opaque = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ps2_keyboard_set_translation = process("/usr/bin/qemu-aarch64").mark("ps2_keyboard_set_translation")
{
  opaque = $arg1;
  mode = $arg2;
}
probe qemu.user.aarch64.ps2_mouse_send_packet = process("/usr/bin/qemu-aarch64").mark("ps2_mouse_send_packet")
{
  s = $arg1;
  dx1 = $arg2;
  dy1 = $arg3;
  dz1 = $arg4;
  b = $arg5;
}
probe qemu.user.aarch64.ps2_mouse_fake_event = process("/usr/bin/qemu-aarch64").mark("ps2_mouse_fake_event")
{
  opaque = $arg1;
}
probe qemu.user.aarch64.ps2_write_mouse = process("/usr/bin/qemu-aarch64").mark("ps2_write_mouse")
{
  opaque = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ps2_kbd_reset = process("/usr/bin/qemu-aarch64").mark("ps2_kbd_reset")
{
  opaque = $arg1;
}
probe qemu.user.aarch64.ps2_mouse_reset = process("/usr/bin/qemu-aarch64").mark("ps2_mouse_reset")
{
  opaque = $arg1;
}
probe qemu.user.aarch64.hid_kbd_queue_full = process("/usr/bin/qemu-aarch64").mark("hid_kbd_queue_full")
{
}
probe qemu.user.aarch64.hid_kbd_queue_empty = process("/usr/bin/qemu-aarch64").mark("hid_kbd_queue_empty")
{
}
probe qemu.user.aarch64.tsc2005_sense = process("/usr/bin/qemu-aarch64").mark("tsc2005_sense")
{
  state = $arg1;
}
probe qemu.user.aarch64.virtio_input_queue_full = process("/usr/bin/qemu-aarch64").mark("virtio_input_queue_full")
{
}
probe qemu.user.aarch64.lasips2_reg_read = process("/usr/bin/qemu-aarch64").mark("lasips2_reg_read")
{
  size = $arg1;
  id = $arg2;
  addr = $arg3;
  name = $arg4;
  val = $arg5;
}
probe qemu.user.aarch64.lasips2_reg_write = process("/usr/bin/qemu-aarch64").mark("lasips2_reg_write")
{
  size = $arg1;
  id = $arg2;
  addr = $arg3;
  name = $arg4;
  val = $arg5;
}
probe qemu.user.aarch64.lasips2_intr = process("/usr/bin/qemu-aarch64").mark("lasips2_intr")
{
  val = $arg1;
}
probe qemu.user.aarch64.pic_update_irq = process("/usr/bin/qemu-aarch64").mark("pic_update_irq")
{
  master = $arg1;
  imr = $arg2;
  irr = $arg3;
  padd = $arg4;
}
probe qemu.user.aarch64.pic_set_irq = process("/usr/bin/qemu-aarch64").mark("pic_set_irq")
{
  master = $arg1;
  irq = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.pic_interrupt = process("/usr/bin/qemu-aarch64").mark("pic_interrupt")
{
  irq = $arg1;
  intno = $arg2;
}
probe qemu.user.aarch64.pic_ioport_write = process("/usr/bin/qemu-aarch64").mark("pic_ioport_write")
{
  master = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.pic_ioport_read = process("/usr/bin/qemu-aarch64").mark("pic_ioport_read")
{
  master = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.cpu_set_apic_base = process("/usr/bin/qemu-aarch64").mark("cpu_set_apic_base")
{
  val = $arg1;
}
probe qemu.user.aarch64.cpu_get_apic_base = process("/usr/bin/qemu-aarch64").mark("cpu_get_apic_base")
{
  val = $arg1;
}
probe qemu.user.aarch64.apic_report_irq_delivered = process("/usr/bin/qemu-aarch64").mark("apic_report_irq_delivered")
{
  apic_irq_delivered = $arg1;
}
probe qemu.user.aarch64.apic_reset_irq_delivered = process("/usr/bin/qemu-aarch64").mark("apic_reset_irq_delivered")
{
  apic_irq_delivered = $arg1;
}
probe qemu.user.aarch64.apic_get_irq_delivered = process("/usr/bin/qemu-aarch64").mark("apic_get_irq_delivered")
{
  apic_irq_delivered = $arg1;
}
probe qemu.user.aarch64.apic_local_deliver = process("/usr/bin/qemu-aarch64").mark("apic_local_deliver")
{
  vector = $arg1;
  lvt = $arg2;
}
probe qemu.user.aarch64.apic_deliver_irq = process("/usr/bin/qemu-aarch64").mark("apic_deliver_irq")
{
  dest = $arg1;
  dest_mode = $arg2;
  delivery_mode = $arg3;
  vector_num = $arg4;
  trigger_mode = $arg5;
}
probe qemu.user.aarch64.apic_mem_readl = process("/usr/bin/qemu-aarch64").mark("apic_mem_readl")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.apic_mem_writel = process("/usr/bin/qemu-aarch64").mark("apic_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ioapic_set_remote_irr = process("/usr/bin/qemu-aarch64").mark("ioapic_set_remote_irr")
{
  n = $arg1;
}
probe qemu.user.aarch64.ioapic_clear_remote_irr = process("/usr/bin/qemu-aarch64").mark("ioapic_clear_remote_irr")
{
  n = $arg1;
  vector = $arg2;
}
probe qemu.user.aarch64.ioapic_eoi_broadcast = process("/usr/bin/qemu-aarch64").mark("ioapic_eoi_broadcast")
{
  vector = $arg1;
}
probe qemu.user.aarch64.ioapic_eoi_delayed_reassert = process("/usr/bin/qemu-aarch64").mark("ioapic_eoi_delayed_reassert")
{
  vector = $arg1;
}
probe qemu.user.aarch64.ioapic_mem_read = process("/usr/bin/qemu-aarch64").mark("ioapic_mem_read")
{
  addr = $arg1;
  regsel = $arg2;
  size = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.ioapic_mem_write = process("/usr/bin/qemu-aarch64").mark("ioapic_mem_write")
{
  addr = $arg1;
  regsel = $arg2;
  size = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.ioapic_set_irq = process("/usr/bin/qemu-aarch64").mark("ioapic_set_irq")
{
  vector = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.slavio_intctl_mem_readl = process("/usr/bin/qemu-aarch64").mark("slavio_intctl_mem_readl")
{
  cpu = $arg1;
  addr = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.slavio_intctl_mem_writel = process("/usr/bin/qemu-aarch64").mark("slavio_intctl_mem_writel")
{
  cpu = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.slavio_intctl_mem_writel_clear = process("/usr/bin/qemu-aarch64").mark("slavio_intctl_mem_writel_clear")
{
  cpu = $arg1;
  val = $arg2;
  intreg_pending = $arg3;
}
probe qemu.user.aarch64.slavio_intctl_mem_writel_set = process("/usr/bin/qemu-aarch64").mark("slavio_intctl_mem_writel_set")
{
  cpu = $arg1;
  val = $arg2;
  intreg_pending = $arg3;
}
probe qemu.user.aarch64.slavio_intctlm_mem_readl = process("/usr/bin/qemu-aarch64").mark("slavio_intctlm_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.slavio_intctlm_mem_writel = process("/usr/bin/qemu-aarch64").mark("slavio_intctlm_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.slavio_intctlm_mem_writel_enable = process("/usr/bin/qemu-aarch64").mark("slavio_intctlm_mem_writel_enable")
{
  val = $arg1;
  intregm_disabled = $arg2;
}
probe qemu.user.aarch64.slavio_intctlm_mem_writel_disable = process("/usr/bin/qemu-aarch64").mark("slavio_intctlm_mem_writel_disable")
{
  val = $arg1;
  intregm_disabled = $arg2;
}
probe qemu.user.aarch64.slavio_intctlm_mem_writel_target = process("/usr/bin/qemu-aarch64").mark("slavio_intctlm_mem_writel_target")
{
  cpu = $arg1;
}
probe qemu.user.aarch64.slavio_check_interrupts = process("/usr/bin/qemu-aarch64").mark("slavio_check_interrupts")
{
  pending = $arg1;
  intregm_disabled = $arg2;
}
probe qemu.user.aarch64.slavio_set_irq = process("/usr/bin/qemu-aarch64").mark("slavio_set_irq")
{
  target_cpu = $arg1;
  irq = $arg2;
  pil = $arg3;
  level = $arg4;
}
probe qemu.user.aarch64.slavio_set_timer_irq_cpu = process("/usr/bin/qemu-aarch64").mark("slavio_set_timer_irq_cpu")
{
  cpu = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.grlib_irqmp_check_irqs = process("/usr/bin/qemu-aarch64").mark("grlib_irqmp_check_irqs")
{
  pend = $arg1;
  force = $arg2;
  mask = $arg3;
  lvl1 = $arg4;
  lvl2 = $arg5;
}
probe qemu.user.aarch64.grlib_irqmp_ack = process("/usr/bin/qemu-aarch64").mark("grlib_irqmp_ack")
{
  intno = $arg1;
}
probe qemu.user.aarch64.grlib_irqmp_set_irq = process("/usr/bin/qemu-aarch64").mark("grlib_irqmp_set_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.grlib_irqmp_readl_unknown = process("/usr/bin/qemu-aarch64").mark("grlib_irqmp_readl_unknown")
{
  addr = $arg1;
}
probe qemu.user.aarch64.grlib_irqmp_writel_unknown = process("/usr/bin/qemu-aarch64").mark("grlib_irqmp_writel_unknown")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.xics_icp_check_ipi = process("/usr/bin/qemu-aarch64").mark("xics_icp_check_ipi")
{
  server = $arg1;
  mfrr = $arg2;
}
probe qemu.user.aarch64.xics_icp_accept = process("/usr/bin/qemu-aarch64").mark("xics_icp_accept")
{
  old_xirr = $arg1;
  new_xirr = $arg2;
}
probe qemu.user.aarch64.xics_icp_eoi = process("/usr/bin/qemu-aarch64").mark("xics_icp_eoi")
{
  server = $arg1;
  xirr = $arg2;
  new_xirr = $arg3;
}
probe qemu.user.aarch64.xics_icp_irq = process("/usr/bin/qemu-aarch64").mark("xics_icp_irq")
{
  server = $arg1;
  nr = $arg2;
  priority = $arg3;
}
probe qemu.user.aarch64.xics_icp_raise = process("/usr/bin/qemu-aarch64").mark("xics_icp_raise")
{
  xirr = $arg1;
  pending_priority = $arg2;
}
probe qemu.user.aarch64.xics_ics_set_irq_msi = process("/usr/bin/qemu-aarch64").mark("xics_ics_set_irq_msi")
{
  srcno = $arg1;
  nr = $arg2;
}
probe qemu.user.aarch64.xics_masked_pending = process("/usr/bin/qemu-aarch64").mark("xics_masked_pending")
{
}
probe qemu.user.aarch64.xics_ics_set_irq_lsi = process("/usr/bin/qemu-aarch64").mark("xics_ics_set_irq_lsi")
{
  srcno = $arg1;
  nr = $arg2;
}
probe qemu.user.aarch64.xics_ics_write_xive = process("/usr/bin/qemu-aarch64").mark("xics_ics_write_xive")
{
  nr = $arg1;
  srcno = $arg2;
  server = $arg3;
  priority = $arg4;
}
probe qemu.user.aarch64.xics_ics_reject = process("/usr/bin/qemu-aarch64").mark("xics_ics_reject")
{
  nr = $arg1;
  srcno = $arg2;
}
probe qemu.user.aarch64.xics_ics_eoi = process("/usr/bin/qemu-aarch64").mark("xics_ics_eoi")
{
  nr = $arg1;
}
probe qemu.user.aarch64.flic_create_device = process("/usr/bin/qemu-aarch64").mark("flic_create_device")
{
  err = $arg1;
}
probe qemu.user.aarch64.flic_reset_failed = process("/usr/bin/qemu-aarch64").mark("flic_reset_failed")
{
  err = $arg1;
}
probe qemu.user.aarch64.qemu_s390_airq_suppressed = process("/usr/bin/qemu-aarch64").mark("qemu_s390_airq_suppressed")
{
  type = $arg1;
  isc = $arg2;
}
probe qemu.user.aarch64.qemu_s390_suppress_airq = process("/usr/bin/qemu-aarch64").mark("qemu_s390_suppress_airq")
{
  isc = $arg1;
  from = $arg2;
  to = $arg3;
}
probe qemu.user.aarch64.aspeed_vic_set_irq = process("/usr/bin/qemu-aarch64").mark("aspeed_vic_set_irq")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.aspeed_vic_update_fiq = process("/usr/bin/qemu-aarch64").mark("aspeed_vic_update_fiq")
{
  flags = $arg1;
}
probe qemu.user.aarch64.aspeed_vic_update_irq = process("/usr/bin/qemu-aarch64").mark("aspeed_vic_update_irq")
{
  flags = $arg1;
}
probe qemu.user.aarch64.aspeed_vic_read = process("/usr/bin/qemu-aarch64").mark("aspeed_vic_read")
{
  offset = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.aspeed_vic_write = process("/usr/bin/qemu-aarch64").mark("aspeed_vic_write")
{
  offset = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.gic_enable_irq = process("/usr/bin/qemu-aarch64").mark("gic_enable_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.gic_disable_irq = process("/usr/bin/qemu-aarch64").mark("gic_disable_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.gic_set_irq = process("/usr/bin/qemu-aarch64").mark("gic_set_irq")
{
  irq = $arg1;
  level = $arg2;
  cpumask = $arg3;
  target = $arg4;
}
probe qemu.user.aarch64.gic_update_bestirq = process("/usr/bin/qemu-aarch64").mark("gic_update_bestirq")
{
  s = $arg1;
  cpu = $arg2;
  irq = $arg3;
  prio = $arg4;
  priority_mask = $arg5;
  running_priority = $arg6;
}
probe qemu.user.aarch64.gic_update_set_irq = process("/usr/bin/qemu-aarch64").mark("gic_update_set_irq")
{
  cpu = $arg1;
  name = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.gic_acknowledge_irq = process("/usr/bin/qemu-aarch64").mark("gic_acknowledge_irq")
{
  s = $arg1;
  cpu = $arg2;
  irq = $arg3;
}
probe qemu.user.aarch64.gic_cpu_write = process("/usr/bin/qemu-aarch64").mark("gic_cpu_write")
{
  s = $arg1;
  cpu = $arg2;
  addr = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gic_cpu_read = process("/usr/bin/qemu-aarch64").mark("gic_cpu_read")
{
  s = $arg1;
  cpu = $arg2;
  addr = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gic_hyp_read = process("/usr/bin/qemu-aarch64").mark("gic_hyp_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gic_hyp_write = process("/usr/bin/qemu-aarch64").mark("gic_hyp_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gic_dist_read = process("/usr/bin/qemu-aarch64").mark("gic_dist_read")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gic_dist_write = process("/usr/bin/qemu-aarch64").mark("gic_dist_write")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gic_lr_entry = process("/usr/bin/qemu-aarch64").mark("gic_lr_entry")
{
  cpu = $arg1;
  entry = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gic_update_maintenance_irq = process("/usr/bin/qemu-aarch64").mark("gic_update_maintenance_irq")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_pmr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_pmr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_pmr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_pmr_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_bpr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_bpr_read")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icc_bpr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_bpr_write")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icc_ap_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_ap_read")
{
  grp = $arg1;
  regno = $arg2;
  cpu = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gicv3_icc_ap_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_ap_write")
{
  grp = $arg1;
  regno = $arg2;
  cpu = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gicv3_icc_igrpen_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_igrpen_read")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icc_igrpen_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_igrpen_write")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icc_igrpen1_el3_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_igrpen1_el3_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_igrpen1_el3_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_igrpen1_el3_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_ctlr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_ctlr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_ctlr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_ctlr_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_ctlr_el3_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_ctlr_el3_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_ctlr_el3_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_ctlr_el3_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_cpuif_update = process("/usr/bin/qemu-aarch64").mark("gicv3_cpuif_update")
{
  cpuid = $arg1;
  irq = $arg2;
  grp = $arg3;
  prio = $arg4;
}
probe qemu.user.aarch64.gicv3_cpuif_set_irqs = process("/usr/bin/qemu-aarch64").mark("gicv3_cpuif_set_irqs")
{
  cpuid = $arg1;
  fiqlevel = $arg2;
  irqlevel = $arg3;
}
probe qemu.user.aarch64.gicv3_icc_generate_sgi = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_generate_sgi")
{
  cpuid = $arg1;
  irq = $arg2;
  irm = $arg3;
  aff = $arg4;
  targetlist = $arg5;
}
probe qemu.user.aarch64.gicv3_icc_iar0_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_iar0_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_iar1_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_iar1_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_eoir_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_eoir_write")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icc_hppir0_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_hppir0_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_hppir1_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_hppir1_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_dir_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_dir_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icc_rpr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icc_rpr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_ap_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_ap_read")
{
  grp = $arg1;
  regno = $arg2;
  cpu = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gicv3_ich_ap_write = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_ap_write")
{
  grp = $arg1;
  regno = $arg2;
  cpu = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gicv3_ich_hcr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_hcr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_hcr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_hcr_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_vmcr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_vmcr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_vmcr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_vmcr_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_lr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_lr_read")
{
  regno = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_ich_lr32_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_lr32_read")
{
  regno = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_ich_lrc_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_lrc_read")
{
  regno = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_ich_lr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_lr_write")
{
  regno = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_ich_lr32_write = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_lr32_write")
{
  regno = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_ich_lrc_write = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_lrc_write")
{
  regno = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_ich_vtr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_vtr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_misr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_misr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_eisr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_eisr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_ich_elrsr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_ich_elrsr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icv_ap_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_ap_read")
{
  grp = $arg1;
  regno = $arg2;
  cpu = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gicv3_icv_ap_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_ap_write")
{
  grp = $arg1;
  regno = $arg2;
  cpu = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.gicv3_icv_bpr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_bpr_read")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icv_bpr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_bpr_write")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icv_pmr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_pmr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icv_pmr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_pmr_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icv_igrpen_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_igrpen_read")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icv_igrpen_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_igrpen_write")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icv_ctlr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_ctlr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icv_ctlr_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_ctlr_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icv_rpr_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_rpr_read")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icv_hppir_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_hppir_read")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icv_dir_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_dir_write")
{
  cpu = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.gicv3_icv_iar_read = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_iar_read")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_icv_eoir_write = process("/usr/bin/qemu-aarch64").mark("gicv3_icv_eoir_write")
{
  grp = $arg1;
  cpu = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.gicv3_cpuif_virt_update = process("/usr/bin/qemu-aarch64").mark("gicv3_cpuif_virt_update")
{
  cpuid = $arg1;
  idx = $arg2;
  hppvlpi = $arg3;
  grp = $arg4;
  prio = $arg5;
}
probe qemu.user.aarch64.gicv3_cpuif_virt_set_irqs = process("/usr/bin/qemu-aarch64").mark("gicv3_cpuif_virt_set_irqs")
{
  cpuid = $arg1;
  fiqlevel = $arg2;
  irqlevel = $arg3;
}
probe qemu.user.aarch64.gicv3_cpuif_virt_set_maint_irq = process("/usr/bin/qemu-aarch64").mark("gicv3_cpuif_virt_set_maint_irq")
{
  cpuid = $arg1;
  maintlevel = $arg2;
}
probe qemu.user.aarch64.gicv3_dist_read = process("/usr/bin/qemu-aarch64").mark("gicv3_dist_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
  secure = $arg4;
}
probe qemu.user.aarch64.gicv3_dist_badread = process("/usr/bin/qemu-aarch64").mark("gicv3_dist_badread")
{
  offset = $arg1;
  size = $arg2;
  secure = $arg3;
}
probe qemu.user.aarch64.gicv3_dist_write = process("/usr/bin/qemu-aarch64").mark("gicv3_dist_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
  secure = $arg4;
}
probe qemu.user.aarch64.gicv3_dist_badwrite = process("/usr/bin/qemu-aarch64").mark("gicv3_dist_badwrite")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
  secure = $arg4;
}
probe qemu.user.aarch64.gicv3_dist_set_irq = process("/usr/bin/qemu-aarch64").mark("gicv3_dist_set_irq")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.gicv3_redist_read = process("/usr/bin/qemu-aarch64").mark("gicv3_redist_read")
{
  cpu = $arg1;
  offset = $arg2;
  data = $arg3;
  size = $arg4;
  secure = $arg5;
}
probe qemu.user.aarch64.gicv3_redist_badread = process("/usr/bin/qemu-aarch64").mark("gicv3_redist_badread")
{
  cpu = $arg1;
  offset = $arg2;
  size = $arg3;
  secure = $arg4;
}
probe qemu.user.aarch64.gicv3_redist_write = process("/usr/bin/qemu-aarch64").mark("gicv3_redist_write")
{
  cpu = $arg1;
  offset = $arg2;
  data = $arg3;
  size = $arg4;
  secure = $arg5;
}
probe qemu.user.aarch64.gicv3_redist_badwrite = process("/usr/bin/qemu-aarch64").mark("gicv3_redist_badwrite")
{
  cpu = $arg1;
  offset = $arg2;
  data = $arg3;
  size = $arg4;
  secure = $arg5;
}
probe qemu.user.aarch64.gicv3_redist_set_irq = process("/usr/bin/qemu-aarch64").mark("gicv3_redist_set_irq")
{
  cpu = $arg1;
  irq = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.gicv3_redist_send_sgi = process("/usr/bin/qemu-aarch64").mark("gicv3_redist_send_sgi")
{
  cpu = $arg1;
  irq = $arg2;
}
probe qemu.user.aarch64.gicv3_its_read = process("/usr/bin/qemu-aarch64").mark("gicv3_its_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.gicv3_its_badread = process("/usr/bin/qemu-aarch64").mark("gicv3_its_badread")
{
  offset = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.gicv3_its_write = process("/usr/bin/qemu-aarch64").mark("gicv3_its_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.gicv3_its_badwrite = process("/usr/bin/qemu-aarch64").mark("gicv3_its_badwrite")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.gicv3_its_translation_write = process("/usr/bin/qemu-aarch64").mark("gicv3_its_translation_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
  requester_id = $arg4;
}
probe qemu.user.aarch64.gicv3_its_process_command = process("/usr/bin/qemu-aarch64").mark("gicv3_its_process_command")
{
  rd_offset = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.gicv3_its_cmd_int = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_int")
{
  devid = $arg1;
  eventid = $arg2;
}
probe qemu.user.aarch64.gicv3_its_cmd_clear = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_clear")
{
  devid = $arg1;
  eventid = $arg2;
}
probe qemu.user.aarch64.gicv3_its_cmd_discard = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_discard")
{
  devid = $arg1;
  eventid = $arg2;
}
probe qemu.user.aarch64.gicv3_its_cmd_sync = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_sync")
{
}
probe qemu.user.aarch64.gicv3_its_cmd_mapd = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_mapd")
{
  devid = $arg1;
  size = $arg2;
  ittaddr = $arg3;
  valid = $arg4;
}
probe qemu.user.aarch64.gicv3_its_cmd_mapc = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_mapc")
{
  icid = $arg1;
  rdbase = $arg2;
  valid = $arg3;
}
probe qemu.user.aarch64.gicv3_its_cmd_mapi = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_mapi")
{
  devid = $arg1;
  eventid = $arg2;
  icid = $arg3;
}
probe qemu.user.aarch64.gicv3_its_cmd_mapti = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_mapti")
{
  devid = $arg1;
  eventid = $arg2;
  icid = $arg3;
  intid = $arg4;
}
probe qemu.user.aarch64.gicv3_its_cmd_inv = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_inv")
{
  devid = $arg1;
  eventid = $arg2;
}
probe qemu.user.aarch64.gicv3_its_cmd_invall = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_invall")
{
}
probe qemu.user.aarch64.gicv3_its_cmd_movall = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_movall")
{
  rd1 = $arg1;
  rd2 = $arg2;
}
probe qemu.user.aarch64.gicv3_its_cmd_movi = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_movi")
{
  devid = $arg1;
  eventid = $arg2;
  icid = $arg3;
}
probe qemu.user.aarch64.gicv3_its_cmd_vmapi = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_vmapi")
{
  devid = $arg1;
  eventid = $arg2;
  vpeid = $arg3;
  doorbell = $arg4;
}
probe qemu.user.aarch64.gicv3_its_cmd_vmapti = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_vmapti")
{
  devid = $arg1;
  eventid = $arg2;
  vpeid = $arg3;
  vintid = $arg4;
  doorbell = $arg5;
}
probe qemu.user.aarch64.gicv3_its_cmd_vmapp = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_vmapp")
{
  vpeid = $arg1;
  rdbase = $arg2;
  valid = $arg3;
  vptaddr = $arg4;
  vptsize = $arg5;
}
probe qemu.user.aarch64.gicv3_its_cmd_vmovp = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_vmovp")
{
  vpeid = $arg1;
  rdbase = $arg2;
}
probe qemu.user.aarch64.gicv3_its_cmd_vsync = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_vsync")
{
}
probe qemu.user.aarch64.gicv3_its_cmd_vmovi = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_vmovi")
{
  devid = $arg1;
  eventid = $arg2;
  vpeid = $arg3;
  dbvalid = $arg4;
  doorbell = $arg5;
}
probe qemu.user.aarch64.gicv3_its_cmd_vinvall = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_vinvall")
{
  vpeid = $arg1;
}
probe qemu.user.aarch64.gicv3_its_cmd_unknown = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cmd_unknown")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.gicv3_its_cte_read = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cte_read")
{
  icid = $arg1;
  valid = $arg2;
  rdbase = $arg3;
}
probe qemu.user.aarch64.gicv3_its_cte_write = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cte_write")
{
  icid = $arg1;
  valid = $arg2;
  rdbase = $arg3;
}
probe qemu.user.aarch64.gicv3_its_cte_read_fault = process("/usr/bin/qemu-aarch64").mark("gicv3_its_cte_read_fault")
{
  icid = $arg1;
}
probe qemu.user.aarch64.gicv3_its_ite_read = process("/usr/bin/qemu-aarch64").mark("gicv3_its_ite_read")
{
  ittaddr = $arg1;
  eventid = $arg2;
  valid = $arg3;
  inttype = $arg4;
  intid = $arg5;
  icid = $arg6;
  vpeid = $arg7;
  doorbell = $arg8;
}
probe qemu.user.aarch64.gicv3_its_ite_read_fault = process("/usr/bin/qemu-aarch64").mark("gicv3_its_ite_read_fault")
{
  ittaddr = $arg1;
  eventid = $arg2;
}
probe qemu.user.aarch64.gicv3_its_ite_write = process("/usr/bin/qemu-aarch64").mark("gicv3_its_ite_write")
{
  ittaddr = $arg1;
  eventid = $arg2;
  valid = $arg3;
  inttype = $arg4;
  intid = $arg5;
  icid = $arg6;
  vpeid = $arg7;
  doorbell = $arg8;
}
probe qemu.user.aarch64.gicv3_its_dte_read = process("/usr/bin/qemu-aarch64").mark("gicv3_its_dte_read")
{
  devid = $arg1;
  valid = $arg2;
  size = $arg3;
  ittaddr = $arg4;
}
probe qemu.user.aarch64.gicv3_its_dte_write = process("/usr/bin/qemu-aarch64").mark("gicv3_its_dte_write")
{
  devid = $arg1;
  valid = $arg2;
  size = $arg3;
  ittaddr = $arg4;
}
probe qemu.user.aarch64.gicv3_its_dte_read_fault = process("/usr/bin/qemu-aarch64").mark("gicv3_its_dte_read_fault")
{
  devid = $arg1;
}
probe qemu.user.aarch64.gicv3_its_vte_read = process("/usr/bin/qemu-aarch64").mark("gicv3_its_vte_read")
{
  vpeid = $arg1;
  valid = $arg2;
  vptsize = $arg3;
  vptaddr = $arg4;
  rdbase = $arg5;
}
probe qemu.user.aarch64.gicv3_its_vte_read_fault = process("/usr/bin/qemu-aarch64").mark("gicv3_its_vte_read_fault")
{
  vpeid = $arg1;
}
probe qemu.user.aarch64.gicv3_its_vte_write = process("/usr/bin/qemu-aarch64").mark("gicv3_its_vte_write")
{
  vpeid = $arg1;
  valid = $arg2;
  vptsize = $arg3;
  vptaddr = $arg4;
  rdbase = $arg5;
}
probe qemu.user.aarch64.nvic_recompute_state = process("/usr/bin/qemu-aarch64").mark("nvic_recompute_state")
{
  vectpending = $arg1;
  vectpending_prio = $arg2;
  exception_prio = $arg3;
}
probe qemu.user.aarch64.nvic_recompute_state_secure = process("/usr/bin/qemu-aarch64").mark("nvic_recompute_state_secure")
{
  vectpending = $arg1;
  vectpending_is_s_banked = $arg2;
  vectpending_prio = $arg3;
  exception_prio = $arg4;
}
probe qemu.user.aarch64.nvic_set_prio = process("/usr/bin/qemu-aarch64").mark("nvic_set_prio")
{
  irq = $arg1;
  secure = $arg2;
  prio = $arg3;
}
probe qemu.user.aarch64.nvic_irq_update = process("/usr/bin/qemu-aarch64").mark("nvic_irq_update")
{
  vectpending = $arg1;
  pendprio = $arg2;
  exception_prio = $arg3;
  level = $arg4;
}
probe qemu.user.aarch64.nvic_escalate_prio = process("/usr/bin/qemu-aarch64").mark("nvic_escalate_prio")
{
  irq = $arg1;
  irqprio = $arg2;
  runprio = $arg3;
}
probe qemu.user.aarch64.nvic_escalate_disabled = process("/usr/bin/qemu-aarch64").mark("nvic_escalate_disabled")
{
  irq = $arg1;
}
probe qemu.user.aarch64.nvic_set_pending = process("/usr/bin/qemu-aarch64").mark("nvic_set_pending")
{
  irq = $arg1;
  secure = $arg2;
  targets_secure = $arg3;
  derived = $arg4;
  en = $arg5;
  prio = $arg6;
}
probe qemu.user.aarch64.nvic_clear_pending = process("/usr/bin/qemu-aarch64").mark("nvic_clear_pending")
{
  irq = $arg1;
  secure = $arg2;
  en = $arg3;
  prio = $arg4;
}
probe qemu.user.aarch64.nvic_acknowledge_irq = process("/usr/bin/qemu-aarch64").mark("nvic_acknowledge_irq")
{
  irq = $arg1;
  prio = $arg2;
}
probe qemu.user.aarch64.nvic_get_pending_irq_info = process("/usr/bin/qemu-aarch64").mark("nvic_get_pending_irq_info")
{
  irq = $arg1;
  secure = $arg2;
}
probe qemu.user.aarch64.nvic_complete_irq = process("/usr/bin/qemu-aarch64").mark("nvic_complete_irq")
{
  irq = $arg1;
  secure = $arg2;
}
probe qemu.user.aarch64.nvic_set_irq_level = process("/usr/bin/qemu-aarch64").mark("nvic_set_irq_level")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.nvic_set_nmi_level = process("/usr/bin/qemu-aarch64").mark("nvic_set_nmi_level")
{
  level = $arg1;
}
probe qemu.user.aarch64.nvic_sysreg_read = process("/usr/bin/qemu-aarch64").mark("nvic_sysreg_read")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.nvic_sysreg_write = process("/usr/bin/qemu-aarch64").mark("nvic_sysreg_write")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.heathrow_write = process("/usr/bin/qemu-aarch64").mark("heathrow_write")
{
  addr = $arg1;
  n = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.heathrow_read = process("/usr/bin/qemu-aarch64").mark("heathrow_read")
{
  addr = $arg1;
  n = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.heathrow_set_irq = process("/usr/bin/qemu-aarch64").mark("heathrow_set_irq")
{
  num = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.bcm2835_ic_set_gpu_irq = process("/usr/bin/qemu-aarch64").mark("bcm2835_ic_set_gpu_irq")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.bcm2835_ic_set_cpu_irq = process("/usr/bin/qemu-aarch64").mark("bcm2835_ic_set_cpu_irq")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.spapr_xive_claim_irq = process("/usr/bin/qemu-aarch64").mark("spapr_xive_claim_irq")
{
  lisn = $arg1;
  lsi = $arg2;
}
probe qemu.user.aarch64.spapr_xive_free_irq = process("/usr/bin/qemu-aarch64").mark("spapr_xive_free_irq")
{
  lisn = $arg1;
}
probe qemu.user.aarch64.spapr_xive_set_irq = process("/usr/bin/qemu-aarch64").mark("spapr_xive_set_irq")
{
  lisn = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.spapr_xive_get_source_info = process("/usr/bin/qemu-aarch64").mark("spapr_xive_get_source_info")
{
  flags = $arg1;
  lisn = $arg2;
}
probe qemu.user.aarch64.spapr_xive_set_source_config = process("/usr/bin/qemu-aarch64").mark("spapr_xive_set_source_config")
{
  flags = $arg1;
  lisn = $arg2;
  target = $arg3;
  priority = $arg4;
  eisn = $arg5;
}
probe qemu.user.aarch64.spapr_xive_get_source_config = process("/usr/bin/qemu-aarch64").mark("spapr_xive_get_source_config")
{
  flags = $arg1;
  lisn = $arg2;
}
probe qemu.user.aarch64.spapr_xive_get_queue_info = process("/usr/bin/qemu-aarch64").mark("spapr_xive_get_queue_info")
{
  flags = $arg1;
  target = $arg2;
  priority = $arg3;
}
probe qemu.user.aarch64.spapr_xive_set_queue_config = process("/usr/bin/qemu-aarch64").mark("spapr_xive_set_queue_config")
{
  flags = $arg1;
  target = $arg2;
  priority = $arg3;
  qpage = $arg4;
  qsize = $arg5;
}
probe qemu.user.aarch64.spapr_xive_get_queue_config = process("/usr/bin/qemu-aarch64").mark("spapr_xive_get_queue_config")
{
  flags = $arg1;
  target = $arg2;
  priority = $arg3;
}
probe qemu.user.aarch64.spapr_xive_set_os_reporting_line = process("/usr/bin/qemu-aarch64").mark("spapr_xive_set_os_reporting_line")
{
  flags = $arg1;
}
probe qemu.user.aarch64.spapr_xive_get_os_reporting_line = process("/usr/bin/qemu-aarch64").mark("spapr_xive_get_os_reporting_line")
{
  flags = $arg1;
}
probe qemu.user.aarch64.spapr_xive_esb = process("/usr/bin/qemu-aarch64").mark("spapr_xive_esb")
{
  flags = $arg1;
  lisn = $arg2;
  offset = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.spapr_xive_sync = process("/usr/bin/qemu-aarch64").mark("spapr_xive_sync")
{
  flags = $arg1;
  lisn = $arg2;
}
probe qemu.user.aarch64.spapr_xive_reset = process("/usr/bin/qemu-aarch64").mark("spapr_xive_reset")
{
  flags = $arg1;
}
probe qemu.user.aarch64.kvm_xive_cpu_connect = process("/usr/bin/qemu-aarch64").mark("kvm_xive_cpu_connect")
{
  id = $arg1;
}
probe qemu.user.aarch64.kvm_xive_source_reset = process("/usr/bin/qemu-aarch64").mark("kvm_xive_source_reset")
{
  srcno = $arg1;
}
probe qemu.user.aarch64.xive_tctx_accept = process("/usr/bin/qemu-aarch64").mark("xive_tctx_accept")
{
  index = $arg1;
  ring = $arg2;
  ipb = $arg3;
  pipr = $arg4;
  cppr = $arg5;
  nsr = $arg6;
}
probe qemu.user.aarch64.xive_tctx_notify = process("/usr/bin/qemu-aarch64").mark("xive_tctx_notify")
{
  index = $arg1;
  ring = $arg2;
  ipb = $arg3;
  pipr = $arg4;
  cppr = $arg5;
  nsr = $arg6;
}
probe qemu.user.aarch64.xive_tctx_set_cppr = process("/usr/bin/qemu-aarch64").mark("xive_tctx_set_cppr")
{
  index = $arg1;
  ring = $arg2;
  ipb = $arg3;
  pipr = $arg4;
  cppr = $arg5;
  nsr = $arg6;
}
probe qemu.user.aarch64.xive_source_esb_read = process("/usr/bin/qemu-aarch64").mark("xive_source_esb_read")
{
  addr = $arg1;
  srcno = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.xive_source_esb_write = process("/usr/bin/qemu-aarch64").mark("xive_source_esb_write")
{
  addr = $arg1;
  srcno = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.xive_router_end_notify = process("/usr/bin/qemu-aarch64").mark("xive_router_end_notify")
{
  end_blk = $arg1;
  end_idx = $arg2;
  end_data = $arg3;
}
probe qemu.user.aarch64.xive_router_end_escalate = process("/usr/bin/qemu-aarch64").mark("xive_router_end_escalate")
{
  end_blk = $arg1;
  end_idx = $arg2;
  esc_blk = $arg3;
  esc_idx = $arg4;
  end_data = $arg5;
}
probe qemu.user.aarch64.xive_tctx_tm_write = process("/usr/bin/qemu-aarch64").mark("xive_tctx_tm_write")
{
  offset = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.xive_tctx_tm_read = process("/usr/bin/qemu-aarch64").mark("xive_tctx_tm_read")
{
  offset = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.xive_presenter_notify = process("/usr/bin/qemu-aarch64").mark("xive_presenter_notify")
{
  nvt_blk = $arg1;
  nvt_idx = $arg2;
  ring = $arg3;
}
probe qemu.user.aarch64.xive_end_source_read = process("/usr/bin/qemu-aarch64").mark("xive_end_source_read")
{
  end_blk = $arg1;
  end_idx = $arg2;
  addr = $arg3;
}
probe qemu.user.aarch64.pnv_xive_ic_hw_trigger = process("/usr/bin/qemu-aarch64").mark("pnv_xive_ic_hw_trigger")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.goldfish_irq_request = process("/usr/bin/qemu-aarch64").mark("goldfish_irq_request")
{
  dev = $arg1;
  idx = $arg2;
  irq = $arg3;
  level = $arg4;
}
probe qemu.user.aarch64.goldfish_pic_read = process("/usr/bin/qemu-aarch64").mark("goldfish_pic_read")
{
  dev = $arg1;
  idx = $arg2;
  addr = $arg3;
  size = $arg4;
  value = $arg5;
}
probe qemu.user.aarch64.goldfish_pic_write = process("/usr/bin/qemu-aarch64").mark("goldfish_pic_write")
{
  dev = $arg1;
  idx = $arg2;
  addr = $arg3;
  size = $arg4;
  value = $arg5;
}
probe qemu.user.aarch64.goldfish_pic_reset = process("/usr/bin/qemu-aarch64").mark("goldfish_pic_reset")
{
  dev = $arg1;
  idx = $arg2;
}
probe qemu.user.aarch64.goldfish_pic_realize = process("/usr/bin/qemu-aarch64").mark("goldfish_pic_realize")
{
  dev = $arg1;
  idx = $arg2;
}
probe qemu.user.aarch64.goldfish_pic_instance_init = process("/usr/bin/qemu-aarch64").mark("goldfish_pic_instance_init")
{
  dev = $arg1;
}
probe qemu.user.aarch64.sh_intc_sources = process("/usr/bin/qemu-aarch64").mark("sh_intc_sources")
{
  p = $arg1;
  a = $arg2;
  c = $arg3;
  m = $arg4;
  v = $arg5;
  s1 = $arg6;
  s2 = $arg7;
  s3 = $arg8;
}
probe qemu.user.aarch64.sh_intc_pending = process("/usr/bin/qemu-aarch64").mark("sh_intc_pending")
{
  p = $arg1;
  v = $arg2;
}
probe qemu.user.aarch64.sh_intc_register = process("/usr/bin/qemu-aarch64").mark("sh_intc_register")
{
  s = $arg1;
  id = $arg2;
  v = $arg3;
  c = $arg4;
  m = $arg5;
}
probe qemu.user.aarch64.sh_intc_read = process("/usr/bin/qemu-aarch64").mark("sh_intc_read")
{
  size = $arg1;
  offset = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.sh_intc_write = process("/usr/bin/qemu-aarch64").mark("sh_intc_write")
{
  size = $arg1;
  offset = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.sh_intc_set = process("/usr/bin/qemu-aarch64").mark("sh_intc_set")
{
  id = $arg1;
  enable = $arg2;
}
probe qemu.user.aarch64.loongarch_ipi_read = process("/usr/bin/qemu-aarch64").mark("loongarch_ipi_read")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_ipi_write = process("/usr/bin/qemu-aarch64").mark("loongarch_ipi_write")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_pch_pic_irq_handler = process("/usr/bin/qemu-aarch64").mark("loongarch_pch_pic_irq_handler")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.loongarch_pch_pic_low_readw = process("/usr/bin/qemu-aarch64").mark("loongarch_pch_pic_low_readw")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_pch_pic_low_writew = process("/usr/bin/qemu-aarch64").mark("loongarch_pch_pic_low_writew")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_pch_pic_high_readw = process("/usr/bin/qemu-aarch64").mark("loongarch_pch_pic_high_readw")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_pch_pic_high_writew = process("/usr/bin/qemu-aarch64").mark("loongarch_pch_pic_high_writew")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_pch_pic_readb = process("/usr/bin/qemu-aarch64").mark("loongarch_pch_pic_readb")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_pch_pic_writeb = process("/usr/bin/qemu-aarch64").mark("loongarch_pch_pic_writeb")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.loongarch_msi_set_irq = process("/usr/bin/qemu-aarch64").mark("loongarch_msi_set_irq")
{
  irq_num = $arg1;
}
probe qemu.user.aarch64.loongarch_extioi_setirq = process("/usr/bin/qemu-aarch64").mark("loongarch_extioi_setirq")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.loongarch_extioi_readw = process("/usr/bin/qemu-aarch64").mark("loongarch_extioi_readw")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.loongarch_extioi_writew = process("/usr/bin/qemu-aarch64").mark("loongarch_extioi_writew")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.superio_create_parallel = process("/usr/bin/qemu-aarch64").mark("superio_create_parallel")
{
  id = $arg1;
  base = $arg2;
  irq = $arg3;
}
probe qemu.user.aarch64.superio_create_serial = process("/usr/bin/qemu-aarch64").mark("superio_create_serial")
{
  id = $arg1;
  base = $arg2;
  irq = $arg3;
}
probe qemu.user.aarch64.superio_create_floppy = process("/usr/bin/qemu-aarch64").mark("superio_create_floppy")
{
  id = $arg1;
  base = $arg2;
  irq = $arg3;
}
probe qemu.user.aarch64.superio_create_ide = process("/usr/bin/qemu-aarch64").mark("superio_create_ide")
{
  id = $arg1;
  base = $arg2;
  irq = $arg3;
}
probe qemu.user.aarch64.pc87312_io_read = process("/usr/bin/qemu-aarch64").mark("pc87312_io_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pc87312_io_write = process("/usr/bin/qemu-aarch64").mark("pc87312_io_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.apm_io_read = process("/usr/bin/qemu-aarch64").mark("apm_io_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.apm_io_write = process("/usr/bin/qemu-aarch64").mark("apm_io_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.via_isa_write = process("/usr/bin/qemu-aarch64").mark("via_isa_write")
{
  addr = $arg1;
  val = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.via_pm_write = process("/usr/bin/qemu-aarch64").mark("via_pm_write")
{
  addr = $arg1;
  val = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.via_pm_io_read = process("/usr/bin/qemu-aarch64").mark("via_pm_io_read")
{
  addr = $arg1;
  val = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.via_pm_io_write = process("/usr/bin/qemu-aarch64").mark("via_pm_io_write")
{
  addr = $arg1;
  val = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.via_superio_read = process("/usr/bin/qemu-aarch64").mark("via_superio_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.via_superio_write = process("/usr/bin/qemu-aarch64").mark("via_superio_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mhp_pc_dimm_assigned_slot = process("/usr/bin/qemu-aarch64").mark("mhp_pc_dimm_assigned_slot")
{
  slot = $arg1;
}
probe qemu.user.aarch64.memory_device_pre_plug = process("/usr/bin/qemu-aarch64").mark("memory_device_pre_plug")
{
  id = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.memory_device_plug = process("/usr/bin/qemu-aarch64").mark("memory_device_plug")
{
  id = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.memory_device_unplug = process("/usr/bin/qemu-aarch64").mark("memory_device_unplug")
{
  id = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.gt64120_read = process("/usr/bin/qemu-aarch64").mark("gt64120_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.gt64120_write = process("/usr/bin/qemu-aarch64").mark("gt64120_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.gt64120_read_intreg = process("/usr/bin/qemu-aarch64").mark("gt64120_read_intreg")
{
  regname = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.gt64120_write_intreg = process("/usr/bin/qemu-aarch64").mark("gt64120_write_intreg")
{
  regname = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.gt64120_isd_remap = process("/usr/bin/qemu-aarch64").mark("gt64120_isd_remap")
{
  from_length = $arg1;
  from_addr = $arg2;
  to_length = $arg3;
  to_addr = $arg4;
}
probe qemu.user.aarch64.allwinner_cpucfg_cpu_reset = process("/usr/bin/qemu-aarch64").mark("allwinner_cpucfg_cpu_reset")
{
  cpu_id = $arg1;
  reset_addr = $arg2;
}
probe qemu.user.aarch64.allwinner_cpucfg_read = process("/usr/bin/qemu-aarch64").mark("allwinner_cpucfg_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_cpucfg_write = process("/usr/bin/qemu-aarch64").mark("allwinner_cpucfg_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_h3_dramc_rowmirror_disable = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramc_rowmirror_disable")
{
}
probe qemu.user.aarch64.allwinner_h3_dramc_rowmirror_enable = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramc_rowmirror_enable")
{
  addr = $arg1;
}
probe qemu.user.aarch64.allwinner_h3_dramcom_read = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramcom_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_h3_dramcom_write = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramcom_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_h3_dramctl_read = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramctl_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_h3_dramctl_write = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramctl_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_h3_dramphy_read = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramphy_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_h3_dramphy_write = process("/usr/bin/qemu-aarch64").mark("allwinner_h3_dramphy_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_sid_read = process("/usr/bin/qemu-aarch64").mark("allwinner_sid_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_sid_write = process("/usr/bin/qemu-aarch64").mark("allwinner_sid_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.avr_power_read = process("/usr/bin/qemu-aarch64").mark("avr_power_read")
{
  value = $arg1;
}
probe qemu.user.aarch64.avr_power_write = process("/usr/bin/qemu-aarch64").mark("avr_power_write")
{
  value = $arg1;
}
probe qemu.user.aarch64.ecc_mem_writel_mer = process("/usr/bin/qemu-aarch64").mark("ecc_mem_writel_mer")
{
  val = $arg1;
}
probe qemu.user.aarch64.ecc_mem_writel_mdr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_writel_mdr")
{
  val = $arg1;
}
probe qemu.user.aarch64.ecc_mem_writel_mfsr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_writel_mfsr")
{
  val = $arg1;
}
probe qemu.user.aarch64.ecc_mem_writel_vcr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_writel_vcr")
{
  val = $arg1;
}
probe qemu.user.aarch64.ecc_mem_writel_dr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_writel_dr")
{
  val = $arg1;
}
probe qemu.user.aarch64.ecc_mem_writel_ecr0 = process("/usr/bin/qemu-aarch64").mark("ecc_mem_writel_ecr0")
{
  val = $arg1;
}
probe qemu.user.aarch64.ecc_mem_writel_ecr1 = process("/usr/bin/qemu-aarch64").mark("ecc_mem_writel_ecr1")
{
  val = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_mer = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_mer")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_mdr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_mdr")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_mfsr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_mfsr")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_vcr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_vcr")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_mfar0 = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_mfar0")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_mfar1 = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_mfar1")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_dr = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_dr")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_ecr0 = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_ecr0")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_mem_readl_ecr1 = process("/usr/bin/qemu-aarch64").mark("ecc_mem_readl_ecr1")
{
  ret = $arg1;
}
probe qemu.user.aarch64.ecc_diag_mem_writeb = process("/usr/bin/qemu-aarch64").mark("ecc_diag_mem_writeb")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ecc_diag_mem_readb = process("/usr/bin/qemu-aarch64").mark("ecc_diag_mem_readb")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.empty_slot_write = process("/usr/bin/qemu-aarch64").mark("empty_slot_write")
{
  addr = $arg1;
  width = $arg2;
  value = $arg3;
  size = $arg4;
  name = $arg5;
}
probe qemu.user.aarch64.slavio_misc_update_irq_raise = process("/usr/bin/qemu-aarch64").mark("slavio_misc_update_irq_raise")
{
}
probe qemu.user.aarch64.slavio_misc_update_irq_lower = process("/usr/bin/qemu-aarch64").mark("slavio_misc_update_irq_lower")
{
}
probe qemu.user.aarch64.slavio_set_power_fail = process("/usr/bin/qemu-aarch64").mark("slavio_set_power_fail")
{
  power_failing = $arg1;
  config = $arg2;
}
probe qemu.user.aarch64.slavio_cfg_mem_writeb = process("/usr/bin/qemu-aarch64").mark("slavio_cfg_mem_writeb")
{
  val = $arg1;
}
probe qemu.user.aarch64.slavio_cfg_mem_readb = process("/usr/bin/qemu-aarch64").mark("slavio_cfg_mem_readb")
{
  ret = $arg1;
}
probe qemu.user.aarch64.slavio_diag_mem_writeb = process("/usr/bin/qemu-aarch64").mark("slavio_diag_mem_writeb")
{
  val = $arg1;
}
probe qemu.user.aarch64.slavio_diag_mem_readb = process("/usr/bin/qemu-aarch64").mark("slavio_diag_mem_readb")
{
  ret = $arg1;
}
probe qemu.user.aarch64.slavio_mdm_mem_writeb = process("/usr/bin/qemu-aarch64").mark("slavio_mdm_mem_writeb")
{
  val = $arg1;
}
probe qemu.user.aarch64.slavio_mdm_mem_readb = process("/usr/bin/qemu-aarch64").mark("slavio_mdm_mem_readb")
{
  ret = $arg1;
}
probe qemu.user.aarch64.slavio_aux1_mem_writeb = process("/usr/bin/qemu-aarch64").mark("slavio_aux1_mem_writeb")
{
  val = $arg1;
}
probe qemu.user.aarch64.slavio_aux1_mem_readb = process("/usr/bin/qemu-aarch64").mark("slavio_aux1_mem_readb")
{
  ret = $arg1;
}
probe qemu.user.aarch64.slavio_aux2_mem_writeb = process("/usr/bin/qemu-aarch64").mark("slavio_aux2_mem_writeb")
{
  val = $arg1;
}
probe qemu.user.aarch64.slavio_aux2_mem_readb = process("/usr/bin/qemu-aarch64").mark("slavio_aux2_mem_readb")
{
  ret = $arg1;
}
probe qemu.user.aarch64.apc_mem_writeb = process("/usr/bin/qemu-aarch64").mark("apc_mem_writeb")
{
  val = $arg1;
}
probe qemu.user.aarch64.apc_mem_readb = process("/usr/bin/qemu-aarch64").mark("apc_mem_readb")
{
  ret = $arg1;
}
probe qemu.user.aarch64.slavio_sysctrl_mem_writel = process("/usr/bin/qemu-aarch64").mark("slavio_sysctrl_mem_writel")
{
  val = $arg1;
}
probe qemu.user.aarch64.slavio_sysctrl_mem_readl = process("/usr/bin/qemu-aarch64").mark("slavio_sysctrl_mem_readl")
{
  ret = $arg1;
}
probe qemu.user.aarch64.slavio_led_mem_writew = process("/usr/bin/qemu-aarch64").mark("slavio_led_mem_writew")
{
  val = $arg1;
}
probe qemu.user.aarch64.slavio_led_mem_readw = process("/usr/bin/qemu-aarch64").mark("slavio_led_mem_readw")
{
  ret = $arg1;
}
probe qemu.user.aarch64.aspeed_scu_write = process("/usr/bin/qemu-aarch64").mark("aspeed_scu_write")
{
  offset = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.aspeed_scu_read = process("/usr/bin/qemu-aarch64").mark("aspeed_scu_read")
{
  offset = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.mps2_scc_read = process("/usr/bin/qemu-aarch64").mark("mps2_scc_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.mps2_scc_write = process("/usr/bin/qemu-aarch64").mark("mps2_scc_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.mps2_scc_reset = process("/usr/bin/qemu-aarch64").mark("mps2_scc_reset")
{
}
probe qemu.user.aarch64.mps2_scc_cfg_write = process("/usr/bin/qemu-aarch64").mark("mps2_scc_cfg_write")
{
  function_ = $arg1;
  device = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.mps2_scc_cfg_read = process("/usr/bin/qemu-aarch64").mark("mps2_scc_cfg_read")
{
  function_ = $arg1;
  device = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.mps2_fpgaio_read = process("/usr/bin/qemu-aarch64").mark("mps2_fpgaio_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.mps2_fpgaio_write = process("/usr/bin/qemu-aarch64").mark("mps2_fpgaio_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.mps2_fpgaio_reset = process("/usr/bin/qemu-aarch64").mark("mps2_fpgaio_reset")
{
}
probe qemu.user.aarch64.msf2_sysreg_write = process("/usr/bin/qemu-aarch64").mark("msf2_sysreg_write")
{
  offset = $arg1;
  val = $arg2;
  prev = $arg3;
}
probe qemu.user.aarch64.msf2_sysreg_read = process("/usr/bin/qemu-aarch64").mark("msf2_sysreg_read")
{
  offset = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.msf2_sysreg_write_pll_status = process("/usr/bin/qemu-aarch64").mark("msf2_sysreg_write_pll_status")
{
}
probe qemu.user.aarch64.imx7_gpr_read = process("/usr/bin/qemu-aarch64").mark("imx7_gpr_read")
{
  offset = $arg1;
}
probe qemu.user.aarch64.imx7_gpr_write = process("/usr/bin/qemu-aarch64").mark("imx7_gpr_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.mos6522_set_counter = process("/usr/bin/qemu-aarch64").mark("mos6522_set_counter")
{
  index = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mos6522_get_next_irq_time = process("/usr/bin/qemu-aarch64").mark("mos6522_get_next_irq_time")
{
  latch = $arg1;
  d = $arg2;
  delta = $arg3;
}
probe qemu.user.aarch64.mos6522_set_sr_int = process("/usr/bin/qemu-aarch64").mark("mos6522_set_sr_int")
{
}
probe qemu.user.aarch64.mos6522_write = process("/usr/bin/qemu-aarch64").mark("mos6522_write")
{
  addr = $arg1;
  name = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.mos6522_read = process("/usr/bin/qemu-aarch64").mark("mos6522_read")
{
  addr = $arg1;
  name = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.npcm7xx_clk_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_clk_read")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.npcm7xx_clk_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_clk_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.npcm7xx_gcr_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_gcr_read")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.npcm7xx_gcr_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_gcr_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.npcm7xx_mft_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_mft_read")
{
  name = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_mft_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_mft_write")
{
  name = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_mft_rpm = process("/usr/bin/qemu-aarch64").mark("npcm7xx_mft_rpm")
{
  clock = $arg1;
  clock_hz = $arg2;
  state = $arg3;
  cnt = $arg4;
  rpm = $arg5;
  duty = $arg6;
}
probe qemu.user.aarch64.npcm7xx_mft_capture = process("/usr/bin/qemu-aarch64").mark("npcm7xx_mft_capture")
{
  name = $arg1;
  irq_level = $arg2;
}
probe qemu.user.aarch64.npcm7xx_mft_update_clock = process("/usr/bin/qemu-aarch64").mark("npcm7xx_mft_update_clock")
{
  name = $arg1;
  sel = $arg2;
  clock_period = $arg3;
  prescaled_clock_period = $arg4;
}
probe qemu.user.aarch64.npcm7xx_mft_set_duty = process("/usr/bin/qemu-aarch64").mark("npcm7xx_mft_set_duty")
{
  name = $arg1;
  n = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_rng_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_rng_read")
{
  offset = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.npcm7xx_rng_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_rng_write")
{
  offset = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.npcm7xx_pwm_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_pwm_read")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_pwm_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_pwm_write")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_pwm_update_freq = process("/usr/bin/qemu-aarch64").mark("npcm7xx_pwm_update_freq")
{
  id = $arg1;
  index = $arg2;
  old_value = $arg3;
  new_value = $arg4;
}
probe qemu.user.aarch64.npcm7xx_pwm_update_duty = process("/usr/bin/qemu-aarch64").mark("npcm7xx_pwm_update_duty")
{
  id = $arg1;
  index = $arg2;
  old_value = $arg3;
  new_value = $arg4;
}
probe qemu.user.aarch64.stm32f4xx_syscfg_set_irq = process("/usr/bin/qemu-aarch64").mark("stm32f4xx_syscfg_set_irq")
{
  gpio = $arg1;
  line = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.stm32f4xx_pulse_exti = process("/usr/bin/qemu-aarch64").mark("stm32f4xx_pulse_exti")
{
  irq = $arg1;
}
probe qemu.user.aarch64.stm32f4xx_syscfg_read = process("/usr/bin/qemu-aarch64").mark("stm32f4xx_syscfg_read")
{
  addr = $arg1;
}
probe qemu.user.aarch64.stm32f4xx_syscfg_write = process("/usr/bin/qemu-aarch64").mark("stm32f4xx_syscfg_write")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.stm32f4xx_exti_set_irq = process("/usr/bin/qemu-aarch64").mark("stm32f4xx_exti_set_irq")
{
  irq = $arg1;
  leve = $arg2;
}
probe qemu.user.aarch64.stm32f4xx_exti_read = process("/usr/bin/qemu-aarch64").mark("stm32f4xx_exti_read")
{
  addr = $arg1;
}
probe qemu.user.aarch64.stm32f4xx_exti_write = process("/usr/bin/qemu-aarch64").mark("stm32f4xx_exti_write")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.tz_mpc_reg_read = process("/usr/bin/qemu-aarch64").mark("tz_mpc_reg_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.tz_mpc_reg_write = process("/usr/bin/qemu-aarch64").mark("tz_mpc_reg_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.tz_mpc_mem_blocked_read = process("/usr/bin/qemu-aarch64").mark("tz_mpc_mem_blocked_read")
{
  addr = $arg1;
  size = $arg2;
  secure = $arg3;
}
probe qemu.user.aarch64.tz_mpc_mem_blocked_write = process("/usr/bin/qemu-aarch64").mark("tz_mpc_mem_blocked_write")
{
  addr = $arg1;
  data = $arg2;
  size = $arg3;
  secure = $arg4;
}
probe qemu.user.aarch64.tz_mpc_translate = process("/usr/bin/qemu-aarch64").mark("tz_mpc_translate")
{
  addr = $arg1;
  flags = $arg2;
  idx = $arg3;
  res = $arg4;
}
probe qemu.user.aarch64.tz_mpc_iommu_notify = process("/usr/bin/qemu-aarch64").mark("tz_mpc_iommu_notify")
{
  addr = $arg1;
}
probe qemu.user.aarch64.tz_msc_reset = process("/usr/bin/qemu-aarch64").mark("tz_msc_reset")
{
}
probe qemu.user.aarch64.tz_msc_cfg_nonsec = process("/usr/bin/qemu-aarch64").mark("tz_msc_cfg_nonsec")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_msc_cfg_sec_resp = process("/usr/bin/qemu-aarch64").mark("tz_msc_cfg_sec_resp")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_msc_irq_clear = process("/usr/bin/qemu-aarch64").mark("tz_msc_irq_clear")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_msc_update_irq = process("/usr/bin/qemu-aarch64").mark("tz_msc_update_irq")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_msc_access_blocked = process("/usr/bin/qemu-aarch64").mark("tz_msc_access_blocked")
{
  offset = $arg1;
}
probe qemu.user.aarch64.tz_ppc_reset = process("/usr/bin/qemu-aarch64").mark("tz_ppc_reset")
{
}
probe qemu.user.aarch64.tz_ppc_cfg_nonsec = process("/usr/bin/qemu-aarch64").mark("tz_ppc_cfg_nonsec")
{
  n = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.tz_ppc_cfg_ap = process("/usr/bin/qemu-aarch64").mark("tz_ppc_cfg_ap")
{
  n = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.tz_ppc_cfg_sec_resp = process("/usr/bin/qemu-aarch64").mark("tz_ppc_cfg_sec_resp")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_ppc_irq_enable = process("/usr/bin/qemu-aarch64").mark("tz_ppc_irq_enable")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_ppc_irq_clear = process("/usr/bin/qemu-aarch64").mark("tz_ppc_irq_clear")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_ppc_update_irq = process("/usr/bin/qemu-aarch64").mark("tz_ppc_update_irq")
{
  level = $arg1;
}
probe qemu.user.aarch64.tz_ppc_read_blocked = process("/usr/bin/qemu-aarch64").mark("tz_ppc_read_blocked")
{
  n = $arg1;
  offset = $arg2;
  secure = $arg3;
  user = $arg4;
}
probe qemu.user.aarch64.tz_ppc_write_blocked = process("/usr/bin/qemu-aarch64").mark("tz_ppc_write_blocked")
{
  n = $arg1;
  offset = $arg2;
  secure = $arg3;
  user = $arg4;
}
probe qemu.user.aarch64.iotkit_secctl_s_read = process("/usr/bin/qemu-aarch64").mark("iotkit_secctl_s_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.iotkit_secctl_s_write = process("/usr/bin/qemu-aarch64").mark("iotkit_secctl_s_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.iotkit_secctl_ns_read = process("/usr/bin/qemu-aarch64").mark("iotkit_secctl_ns_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.iotkit_secctl_ns_write = process("/usr/bin/qemu-aarch64").mark("iotkit_secctl_ns_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.ccm_entry = process("/usr/bin/qemu-aarch64").mark("ccm_entry")
{
}
probe qemu.user.aarch64.ccm_freq = process("/usr/bin/qemu-aarch64").mark("ccm_freq")
{
  freq = $arg1;
}
probe qemu.user.aarch64.ccm_clock_freq = process("/usr/bin/qemu-aarch64").mark("ccm_clock_freq")
{
  clock = $arg1;
  freq = $arg2;
}
probe qemu.user.aarch64.ccm_read_reg = process("/usr/bin/qemu-aarch64").mark("ccm_read_reg")
{
  reg_name = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.ccm_write_reg = process("/usr/bin/qemu-aarch64").mark("ccm_write_reg")
{
  reg_name = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.iotkit_sysinfo_read = process("/usr/bin/qemu-aarch64").mark("iotkit_sysinfo_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.iotkit_sysinfo_write = process("/usr/bin/qemu-aarch64").mark("iotkit_sysinfo_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.iotkit_sysctl_read = process("/usr/bin/qemu-aarch64").mark("iotkit_sysctl_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.iotkit_sysctl_write = process("/usr/bin/qemu-aarch64").mark("iotkit_sysctl_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.iotkit_sysctl_reset = process("/usr/bin/qemu-aarch64").mark("iotkit_sysctl_reset")
{
}
probe qemu.user.aarch64.armsse_cpu_pwrctrl_read = process("/usr/bin/qemu-aarch64").mark("armsse_cpu_pwrctrl_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.armsse_cpu_pwrctrl_write = process("/usr/bin/qemu-aarch64").mark("armsse_cpu_pwrctrl_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.armsse_cpuid_read = process("/usr/bin/qemu-aarch64").mark("armsse_cpuid_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.armsse_cpuid_write = process("/usr/bin/qemu-aarch64").mark("armsse_cpuid_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.armsse_mhu_read = process("/usr/bin/qemu-aarch64").mark("armsse_mhu_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.armsse_mhu_write = process("/usr/bin/qemu-aarch64").mark("armsse_mhu_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.aspeed_xdma_write = process("/usr/bin/qemu-aarch64").mark("aspeed_xdma_write")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_i3c_read = process("/usr/bin/qemu-aarch64").mark("aspeed_i3c_read")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_i3c_write = process("/usr/bin/qemu-aarch64").mark("aspeed_i3c_write")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_i3c_device_read = process("/usr/bin/qemu-aarch64").mark("aspeed_i3c_device_read")
{
  deviceid = $arg1;
  offset = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.aspeed_i3c_device_write = process("/usr/bin/qemu-aarch64").mark("aspeed_i3c_device_write")
{
  deviceid = $arg1;
  offset = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.aspeed_sdmc_write = process("/usr/bin/qemu-aarch64").mark("aspeed_sdmc_write")
{
  reg = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_sdmc_read = process("/usr/bin/qemu-aarch64").mark("aspeed_sdmc_read")
{
  reg = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_peci_read = process("/usr/bin/qemu-aarch64").mark("aspeed_peci_read")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_peci_write = process("/usr/bin/qemu-aarch64").mark("aspeed_peci_write")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_peci_raise_interrupt = process("/usr/bin/qemu-aarch64").mark("aspeed_peci_raise_interrupt")
{
  ctrl = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.bcm2835_mbox_property = process("/usr/bin/qemu-aarch64").mark("bcm2835_mbox_property")
{
  tag = $arg1;
  bufsize = $arg2;
  resplen = $arg3;
}
probe qemu.user.aarch64.bcm2835_mbox_write = process("/usr/bin/qemu-aarch64").mark("bcm2835_mbox_write")
{
  size = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.bcm2835_mbox_read = process("/usr/bin/qemu-aarch64").mark("bcm2835_mbox_read")
{
  size = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.bcm2835_mbox_irq = process("/usr/bin/qemu-aarch64").mark("bcm2835_mbox_irq")
{
  level = $arg1;
}
probe qemu.user.aarch64.via1_rtc_update_data_out = process("/usr/bin/qemu-aarch64").mark("via1_rtc_update_data_out")
{
  count = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.via1_rtc_update_data_in = process("/usr/bin/qemu-aarch64").mark("via1_rtc_update_data_in")
{
  count = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.via1_rtc_internal_status = process("/usr/bin/qemu-aarch64").mark("via1_rtc_internal_status")
{
  cmd = $arg1;
  alt = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.via1_rtc_internal_cmd = process("/usr/bin/qemu-aarch64").mark("via1_rtc_internal_cmd")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.via1_rtc_cmd_invalid = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_invalid")
{
  value = $arg1;
}
probe qemu.user.aarch64.via1_rtc_internal_time = process("/usr/bin/qemu-aarch64").mark("via1_rtc_internal_time")
{
  time = $arg1;
}
probe qemu.user.aarch64.via1_rtc_internal_set_cmd = process("/usr/bin/qemu-aarch64").mark("via1_rtc_internal_set_cmd")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.via1_rtc_internal_ignore_cmd = process("/usr/bin/qemu-aarch64").mark("via1_rtc_internal_ignore_cmd")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.via1_rtc_internal_set_alt = process("/usr/bin/qemu-aarch64").mark("via1_rtc_internal_set_alt")
{
  alt = $arg1;
  sector = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.via1_rtc_cmd_seconds_read = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_seconds_read")
{
  reg = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.via1_rtc_cmd_seconds_write = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_seconds_write")
{
  reg = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.via1_rtc_cmd_test_write = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_test_write")
{
  value = $arg1;
}
probe qemu.user.aarch64.via1_rtc_cmd_wprotect_write = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_wprotect_write")
{
  value = $arg1;
}
probe qemu.user.aarch64.via1_rtc_cmd_pram_read = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_pram_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.via1_rtc_cmd_pram_write = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_pram_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.via1_rtc_cmd_pram_sect_read = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_pram_sect_read")
{
  sector = $arg1;
  offset = $arg2;
  addr = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.via1_rtc_cmd_pram_sect_write = process("/usr/bin/qemu-aarch64").mark("via1_rtc_cmd_pram_sect_write")
{
  sector = $arg1;
  offset = $arg2;
  addr = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.via1_adb_send = process("/usr/bin/qemu-aarch64").mark("via1_adb_send")
{
  state = $arg1;
  data = $arg2;
  vadbint = $arg3;
}
probe qemu.user.aarch64.via1_adb_receive = process("/usr/bin/qemu-aarch64").mark("via1_adb_receive")
{
  state = $arg1;
  data = $arg2;
  vadbint = $arg3;
  status = $arg4;
  index = $arg5;
  size = $arg6;
}
probe qemu.user.aarch64.via1_adb_poll = process("/usr/bin/qemu-aarch64").mark("via1_adb_poll")
{
  data = $arg1;
  vadbint = $arg2;
  status = $arg3;
  index = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.via1_auxmode = process("/usr/bin/qemu-aarch64").mark("via1_auxmode")
{
  mode = $arg1;
}
probe qemu.user.aarch64.grlib_ahb_pnp_read = process("/usr/bin/qemu-aarch64").mark("grlib_ahb_pnp_read")
{
  addr = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.grlib_apb_pnp_read = process("/usr/bin/qemu-aarch64").mark("grlib_apb_pnp_read")
{
  addr = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.led_set_intensity = process("/usr/bin/qemu-aarch64").mark("led_set_intensity")
{
  color = $arg1;
  desc = $arg2;
  intensity_percent = $arg3;
}
probe qemu.user.aarch64.led_change_intensity = process("/usr/bin/qemu-aarch64").mark("led_change_intensity")
{
  color = $arg1;
  desc = $arg2;
  old_intensity_percent = $arg3;
  new_intensity_percent = $arg4;
}
probe qemu.user.aarch64.pca955x_gpio_status = process("/usr/bin/qemu-aarch64").mark("pca955x_gpio_status")
{
  description = $arg1;
  buf = $arg2;
}
probe qemu.user.aarch64.pca955x_gpio_change = process("/usr/bin/qemu-aarch64").mark("pca955x_gpio_change")
{
  description = $arg1;
  id = $arg2;
  prev_state = $arg3;
  current_state = $arg4;
}
probe qemu.user.aarch64.bcm2835_cprman_read = process("/usr/bin/qemu-aarch64").mark("bcm2835_cprman_read")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.bcm2835_cprman_write = process("/usr/bin/qemu-aarch64").mark("bcm2835_cprman_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.bcm2835_cprman_write_invalid_magic = process("/usr/bin/qemu-aarch64").mark("bcm2835_cprman_write_invalid_magic")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.virt_ctrl_read = process("/usr/bin/qemu-aarch64").mark("virt_ctrl_read")
{
  dev = $arg1;
  addr = $arg2;
  size = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.virt_ctrl_write = process("/usr/bin/qemu-aarch64").mark("virt_ctrl_write")
{
  dev = $arg1;
  addr = $arg2;
  size = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.virt_ctrl_reset = process("/usr/bin/qemu-aarch64").mark("virt_ctrl_reset")
{
  dev = $arg1;
}
probe qemu.user.aarch64.virt_ctrl_realize = process("/usr/bin/qemu-aarch64").mark("virt_ctrl_realize")
{
  dev = $arg1;
}
probe qemu.user.aarch64.virt_ctrl_instance_init = process("/usr/bin/qemu-aarch64").mark("virt_ctrl_instance_init")
{
  dev = $arg1;
}
probe qemu.user.aarch64.lasi_chip_mem_valid = process("/usr/bin/qemu-aarch64").mark("lasi_chip_mem_valid")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.lasi_chip_read = process("/usr/bin/qemu-aarch64").mark("lasi_chip_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.lasi_chip_write = process("/usr/bin/qemu-aarch64").mark("lasi_chip_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.cuda_delay_set_sr_int = process("/usr/bin/qemu-aarch64").mark("cuda_delay_set_sr_int")
{
}
probe qemu.user.aarch64.cuda_data_send = process("/usr/bin/qemu-aarch64").mark("cuda_data_send")
{
  data = $arg1;
}
probe qemu.user.aarch64.cuda_data_recv = process("/usr/bin/qemu-aarch64").mark("cuda_data_recv")
{
  data = $arg1;
}
probe qemu.user.aarch64.cuda_receive_packet_cmd = process("/usr/bin/qemu-aarch64").mark("cuda_receive_packet_cmd")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.cuda_packet_receive = process("/usr/bin/qemu-aarch64").mark("cuda_packet_receive")
{
  len = $arg1;
}
probe qemu.user.aarch64.cuda_packet_receive_data = process("/usr/bin/qemu-aarch64").mark("cuda_packet_receive_data")
{
  i = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.cuda_packet_send = process("/usr/bin/qemu-aarch64").mark("cuda_packet_send")
{
  len = $arg1;
}
probe qemu.user.aarch64.cuda_packet_send_data = process("/usr/bin/qemu-aarch64").mark("cuda_packet_send_data")
{
  i = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.macio_timer_write = process("/usr/bin/qemu-aarch64").mark("macio_timer_write")
{
  addr = $arg1;
  len = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.macio_timer_read = process("/usr/bin/qemu-aarch64").mark("macio_timer_read")
{
  addr = $arg1;
  len = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.macio_set_gpio = process("/usr/bin/qemu-aarch64").mark("macio_set_gpio")
{
  gpio = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.macio_gpio_irq_assert = process("/usr/bin/qemu-aarch64").mark("macio_gpio_irq_assert")
{
  gpio = $arg1;
}
probe qemu.user.aarch64.macio_gpio_irq_deassert = process("/usr/bin/qemu-aarch64").mark("macio_gpio_irq_deassert")
{
  gpio = $arg1;
}
probe qemu.user.aarch64.macio_gpio_write = process("/usr/bin/qemu-aarch64").mark("macio_gpio_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pmu_adb_poll = process("/usr/bin/qemu-aarch64").mark("pmu_adb_poll")
{
  olen = $arg1;
}
probe qemu.user.aarch64.pmu_one_sec_timer = process("/usr/bin/qemu-aarch64").mark("pmu_one_sec_timer")
{
}
probe qemu.user.aarch64.pmu_cmd_set_int_mask = process("/usr/bin/qemu-aarch64").mark("pmu_cmd_set_int_mask")
{
  intmask = $arg1;
}
probe qemu.user.aarch64.pmu_cmd_set_adb_autopoll = process("/usr/bin/qemu-aarch64").mark("pmu_cmd_set_adb_autopoll")
{
  mask = $arg1;
}
probe qemu.user.aarch64.pmu_cmd_adb_nobus = process("/usr/bin/qemu-aarch64").mark("pmu_cmd_adb_nobus")
{
}
probe qemu.user.aarch64.pmu_cmd_adb_request = process("/usr/bin/qemu-aarch64").mark("pmu_cmd_adb_request")
{
  inlen = $arg1;
  indata0 = $arg2;
  indata1 = $arg3;
  indata2 = $arg4;
  indata3 = $arg5;
  indata4 = $arg6;
}
probe qemu.user.aarch64.pmu_cmd_adb_reply = process("/usr/bin/qemu-aarch64").mark("pmu_cmd_adb_reply")
{
  len = $arg1;
}
probe qemu.user.aarch64.pmu_dispatch_cmd = process("/usr/bin/qemu-aarch64").mark("pmu_dispatch_cmd")
{
  name = $arg1;
}
probe qemu.user.aarch64.pmu_dispatch_unknown_cmd = process("/usr/bin/qemu-aarch64").mark("pmu_dispatch_unknown_cmd")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_string = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_string")
{
  str = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_resp_size = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_resp_size")
{
  size = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_error = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_error")
{
  portB = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_clear_treq = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_clear_treq")
{
  state = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_cmd = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_cmd")
{
  cmd = $arg1;
  cmdlen = $arg2;
  rsplen = $arg3;
}
probe qemu.user.aarch64.pmu_debug_protocol_cmdlen = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_cmdlen")
{
  len = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_cmd_toobig = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_cmd_toobig")
{
  len = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_cmd_send_resp_size = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_cmd_send_resp_size")
{
  len = $arg1;
}
probe qemu.user.aarch64.pmu_debug_protocol_cmd_send_resp = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_cmd_send_resp")
{
  pos = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.pmu_debug_protocol_cmd_resp_complete = process("/usr/bin/qemu-aarch64").mark("pmu_debug_protocol_cmd_resp_complete")
{
  ier = $arg1;
}
probe qemu.user.aarch64.allwinner_sun8i_emac_mii_write_reg = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_mii_write_reg")
{
  reg = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.allwinner_sun8i_emac_mii_read_reg = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_mii_read_reg")
{
  reg = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.allwinner_sun8i_emac_receive = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_receive")
{
  desc = $arg1;
  paddr = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.allwinner_sun8i_emac_transmit = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_transmit")
{
  desc = $arg1;
  paddr = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.allwinner_sun8i_emac_reset = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_reset")
{
}
probe qemu.user.aarch64.allwinner_sun8i_emac_set_link = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_set_link")
{
  active = $arg1;
}
probe qemu.user.aarch64.allwinner_sun8i_emac_read = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_read")
{
  offset = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.allwinner_sun8i_emac_write = process("/usr/bin/qemu-aarch64").mark("allwinner_sun8i_emac_write")
{
  offset = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mdio_phy_read = process("/usr/bin/qemu-aarch64").mark("mdio_phy_read")
{
  regnum = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.mdio_phy_write = process("/usr/bin/qemu-aarch64").mark("mdio_phy_write")
{
  regnum = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.mdio_bitbang = process("/usr/bin/qemu-aarch64").mark("mdio_bitbang")
{
  mdc = $arg1;
  mdio = $arg2;
  state = $arg3;
  cnt = $arg4;
  drive = $arg5;
}
probe qemu.user.aarch64.lance_mem_readw = process("/usr/bin/qemu-aarch64").mark("lance_mem_readw")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.lance_mem_writew = process("/usr/bin/qemu-aarch64").mark("lance_mem_writew")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mipsnet_send = process("/usr/bin/qemu-aarch64").mark("mipsnet_send")
{
  size = $arg1;
}
probe qemu.user.aarch64.mipsnet_receive = process("/usr/bin/qemu-aarch64").mark("mipsnet_receive")
{
  size = $arg1;
}
probe qemu.user.aarch64.mipsnet_read = process("/usr/bin/qemu-aarch64").mark("mipsnet_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mipsnet_write = process("/usr/bin/qemu-aarch64").mark("mipsnet_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mipsnet_irq = process("/usr/bin/qemu-aarch64").mark("mipsnet_irq")
{
  isr = $arg1;
  intctl = $arg2;
}
probe qemu.user.aarch64.ne2000_read = process("/usr/bin/qemu-aarch64").mark("ne2000_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ne2000_write = process("/usr/bin/qemu-aarch64").mark("ne2000_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ne2000_ioport_read = process("/usr/bin/qemu-aarch64").mark("ne2000_ioport_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ne2000_ioport_write = process("/usr/bin/qemu-aarch64").mark("ne2000_ioport_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.open_eth_mii_write = process("/usr/bin/qemu-aarch64").mark("open_eth_mii_write")
{
  idx = $arg1;
  v = $arg2;
}
probe qemu.user.aarch64.open_eth_mii_read = process("/usr/bin/qemu-aarch64").mark("open_eth_mii_read")
{
  idx = $arg1;
  v = $arg2;
}
probe qemu.user.aarch64.open_eth_update_irq = process("/usr/bin/qemu-aarch64").mark("open_eth_update_irq")
{
  v = $arg1;
}
probe qemu.user.aarch64.open_eth_receive = process("/usr/bin/qemu-aarch64").mark("open_eth_receive")
{
  len = $arg1;
}
probe qemu.user.aarch64.open_eth_receive_mcast = process("/usr/bin/qemu-aarch64").mark("open_eth_receive_mcast")
{
  idx = $arg1;
  h0 = $arg2;
  h1 = $arg3;
}
probe qemu.user.aarch64.open_eth_receive_reject = process("/usr/bin/qemu-aarch64").mark("open_eth_receive_reject")
{
}
probe qemu.user.aarch64.open_eth_receive_desc = process("/usr/bin/qemu-aarch64").mark("open_eth_receive_desc")
{
  addr = $arg1;
  len_flags = $arg2;
}
probe qemu.user.aarch64.open_eth_start_xmit = process("/usr/bin/qemu-aarch64").mark("open_eth_start_xmit")
{
  addr = $arg1;
  len = $arg2;
  tx_len = $arg3;
}
probe qemu.user.aarch64.open_eth_reg_read = process("/usr/bin/qemu-aarch64").mark("open_eth_reg_read")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.user.aarch64.open_eth_reg_write = process("/usr/bin/qemu-aarch64").mark("open_eth_reg_write")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.user.aarch64.open_eth_desc_read = process("/usr/bin/qemu-aarch64").mark("open_eth_desc_read")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.user.aarch64.open_eth_desc_write = process("/usr/bin/qemu-aarch64").mark("open_eth_desc_write")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.user.aarch64.pcnet_s_reset = process("/usr/bin/qemu-aarch64").mark("pcnet_s_reset")
{
  s = $arg1;
}
probe qemu.user.aarch64.pcnet_user_int = process("/usr/bin/qemu-aarch64").mark("pcnet_user_int")
{
  s = $arg1;
}
probe qemu.user.aarch64.pcnet_isr_change = process("/usr/bin/qemu-aarch64").mark("pcnet_isr_change")
{
  s = $arg1;
  isr = $arg2;
  isr_old = $arg3;
}
probe qemu.user.aarch64.pcnet_init = process("/usr/bin/qemu-aarch64").mark("pcnet_init")
{
  s = $arg1;
  init_addr = $arg2;
}
probe qemu.user.aarch64.pcnet_rlen_tlen = process("/usr/bin/qemu-aarch64").mark("pcnet_rlen_tlen")
{
  s = $arg1;
  rlen = $arg2;
  tlen = $arg3;
}
probe qemu.user.aarch64.pcnet_ss32_rdra_tdra = process("/usr/bin/qemu-aarch64").mark("pcnet_ss32_rdra_tdra")
{
  s = $arg1;
  ss32 = $arg2;
  rdra = $arg3;
  rcvrl = $arg4;
  tdra = $arg5;
  xmtrl = $arg6;
}
probe qemu.user.aarch64.pcnet_aprom_writeb = process("/usr/bin/qemu-aarch64").mark("pcnet_aprom_writeb")
{
  opaque = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.pcnet_aprom_readb = process("/usr/bin/qemu-aarch64").mark("pcnet_aprom_readb")
{
  opaque = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.pcnet_ioport_read = process("/usr/bin/qemu-aarch64").mark("pcnet_ioport_read")
{
  opaque = $arg1;
  addr = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.pcnet_ioport_write = process("/usr/bin/qemu-aarch64").mark("pcnet_ioport_write")
{
  opaque = $arg1;
  addr = $arg2;
  data = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.net_rx_pkt_parsed = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_parsed")
{
  ip4 = $arg1;
  ip6 = $arg2;
  udp = $arg3;
  tcp = $arg4;
  l3o = $arg5;
  l4o = $arg6;
  l5o = $arg7;
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_validate_entry = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_validate_entry")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_validate_not_xxp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_validate_not_xxp")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_validate_udp_with_no_checksum = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_validate_udp_with_no_checksum")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_validate_ip4_fragment = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_validate_ip4_fragment")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_validate_csum = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_validate_csum")
{
  csum_valid = $arg1;
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_calc_entry = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_calc_entry")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_calc_ip4_udp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_calc_ip4_udp")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_calc_ip4_tcp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_calc_ip4_tcp")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_calc_ip6_udp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_calc_ip6_udp")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_calc_ip6_tcp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_calc_ip6_tcp")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_calc_ph_csum = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_calc_ph_csum")
{
  cntr = $arg1;
  csl = $arg2;
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_calc_csum = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_calc_csum")
{
  l4hdr_off = $arg1;
  csl = $arg2;
  cntr = $arg3;
  csum = $arg4;
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_fix_entry = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_fix_entry")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_fix_tcp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_fix_tcp")
{
  l4_cso = $arg1;
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_fix_udp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_fix_udp")
{
  l4_cso = $arg1;
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_fix_not_xxp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_fix_not_xxp")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_fix_ip4_fragment = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_fix_ip4_fragment")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_fix_udp_with_no_checksum = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_fix_udp_with_no_checksum")
{
}
probe qemu.user.aarch64.net_rx_pkt_l4_csum_fix_csum = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l4_csum_fix_csum")
{
  cso = $arg1;
  csum = $arg2;
}
probe qemu.user.aarch64.net_rx_pkt_l3_csum_validate_entry = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l3_csum_validate_entry")
{
}
probe qemu.user.aarch64.net_rx_pkt_l3_csum_validate_not_ip4 = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l3_csum_validate_not_ip4")
{
}
probe qemu.user.aarch64.net_rx_pkt_l3_csum_validate_csum = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_l3_csum_validate_csum")
{
  l3hdr_off = $arg1;
  csl = $arg2;
  cntr = $arg3;
  csum = $arg4;
  csum_valid = $arg5;
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip4 = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip4")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip4_tcp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip4_tcp")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip4_udp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip4_udp")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip6_tcp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip6_tcp")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip6_udp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip6_udp")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip6 = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip6")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip6_ex = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip6_ex")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip6_ex_tcp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip6_ex_tcp")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_ip6_ex_udp = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_ip6_ex_udp")
{
}
probe qemu.user.aarch64.net_rx_pkt_rss_hash = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_hash")
{
  rss_length = $arg1;
  rss_hash = $arg2;
}
probe qemu.user.aarch64.net_rx_pkt_rss_add_chunk = process("/usr/bin/qemu-aarch64").mark("net_rx_pkt_rss_add_chunk")
{
  ptr = $arg1;
  size = $arg2;
  input_offset = $arg3;
}
probe qemu.user.aarch64.e1000_receiver_overrun = process("/usr/bin/qemu-aarch64").mark("e1000_receiver_overrun")
{
  s = $arg1;
  rdh = $arg2;
  rdt = $arg3;
}
probe qemu.user.aarch64.e1000x_rx_can_recv_disabled = process("/usr/bin/qemu-aarch64").mark("e1000x_rx_can_recv_disabled")
{
  link_up = $arg1;
  rx_enabled = $arg2;
  pci_master = $arg3;
}
probe qemu.user.aarch64.e1000x_vlan_is_vlan_pkt = process("/usr/bin/qemu-aarch64").mark("e1000x_vlan_is_vlan_pkt")
{
  is_vlan_pkt = $arg1;
  eth_proto = $arg2;
  vet = $arg3;
}
probe qemu.user.aarch64.e1000x_rx_flt_ucast_match = process("/usr/bin/qemu-aarch64").mark("e1000x_rx_flt_ucast_match")
{
  idx = $arg1;
  b0 = $arg2;
  b1 = $arg3;
  b2 = $arg4;
  b3 = $arg5;
  b4 = $arg6;
  b5 = $arg7;
}
probe qemu.user.aarch64.e1000x_rx_flt_ucast_mismatch = process("/usr/bin/qemu-aarch64").mark("e1000x_rx_flt_ucast_mismatch")
{
  b0 = $arg1;
  b1 = $arg2;
  b2 = $arg3;
  b3 = $arg4;
  b4 = $arg5;
  b5 = $arg6;
}
probe qemu.user.aarch64.e1000x_rx_flt_inexact_mismatch = process("/usr/bin/qemu-aarch64").mark("e1000x_rx_flt_inexact_mismatch")
{
  b0 = $arg1;
  b1 = $arg2;
  b2 = $arg3;
  b3 = $arg4;
  b4 = $arg5;
  b5 = $arg6;
  mo = $arg7;
  mta = $arg8;
  mta_val = $arg9;
}
probe qemu.user.aarch64.e1000x_rx_link_down = process("/usr/bin/qemu-aarch64").mark("e1000x_rx_link_down")
{
  status_reg = $arg1;
}
probe qemu.user.aarch64.e1000x_rx_disabled = process("/usr/bin/qemu-aarch64").mark("e1000x_rx_disabled")
{
  rctl_reg = $arg1;
}
probe qemu.user.aarch64.e1000x_rx_oversized = process("/usr/bin/qemu-aarch64").mark("e1000x_rx_oversized")
{
  size = $arg1;
}
probe qemu.user.aarch64.e1000x_mac_indicate = process("/usr/bin/qemu-aarch64").mark("e1000x_mac_indicate")
{
  b0 = $arg1;
  b1 = $arg2;
  b2 = $arg3;
  b3 = $arg4;
  b4 = $arg5;
  b5 = $arg6;
}
probe qemu.user.aarch64.e1000x_link_negotiation_start = process("/usr/bin/qemu-aarch64").mark("e1000x_link_negotiation_start")
{
}
probe qemu.user.aarch64.e1000x_link_negotiation_done = process("/usr/bin/qemu-aarch64").mark("e1000x_link_negotiation_done")
{
}
probe qemu.user.aarch64.e1000e_core_write = process("/usr/bin/qemu-aarch64").mark("e1000e_core_write")
{
  index = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.e1000e_core_read = process("/usr/bin/qemu-aarch64").mark("e1000e_core_read")
{
  index = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.e1000e_core_mdic_read = process("/usr/bin/qemu-aarch64").mark("e1000e_core_mdic_read")
{
  page = $arg1;
  addr = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.e1000e_core_mdic_read_unhandled = process("/usr/bin/qemu-aarch64").mark("e1000e_core_mdic_read_unhandled")
{
  page = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.e1000e_core_mdic_write = process("/usr/bin/qemu-aarch64").mark("e1000e_core_mdic_write")
{
  page = $arg1;
  addr = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.e1000e_core_mdic_write_unhandled = process("/usr/bin/qemu-aarch64").mark("e1000e_core_mdic_write_unhandled")
{
  page = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.e1000e_core_ctrl_write = process("/usr/bin/qemu-aarch64").mark("e1000e_core_ctrl_write")
{
  index = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.e1000e_core_ctrl_sw_reset = process("/usr/bin/qemu-aarch64").mark("e1000e_core_ctrl_sw_reset")
{
}
probe qemu.user.aarch64.e1000e_core_ctrl_phy_reset = process("/usr/bin/qemu-aarch64").mark("e1000e_core_ctrl_phy_reset")
{
}
probe qemu.user.aarch64.e1000e_link_autoneg_flowctl = process("/usr/bin/qemu-aarch64").mark("e1000e_link_autoneg_flowctl")
{
  enabled = $arg1;
}
probe qemu.user.aarch64.e1000e_link_set_params = process("/usr/bin/qemu-aarch64").mark("e1000e_link_set_params")
{
  autodetect = $arg1;
  speed = $arg2;
  force_spd = $arg3;
  force_dplx = $arg4;
  rx_fctl = $arg5;
  tx_fctl = $arg6;
}
probe qemu.user.aarch64.e1000e_link_read_params = process("/usr/bin/qemu-aarch64").mark("e1000e_link_read_params")
{
  autodetect = $arg1;
  speed = $arg2;
  force_spd = $arg3;
  force_dplx = $arg4;
  rx_fctl = $arg5;
  tx_fctl = $arg6;
}
probe qemu.user.aarch64.e1000e_link_set_ext_params = process("/usr/bin/qemu-aarch64").mark("e1000e_link_set_ext_params")
{
  asd_check = $arg1;
  speed_select_bypass = $arg2;
}
probe qemu.user.aarch64.e1000e_link_status = process("/usr/bin/qemu-aarch64").mark("e1000e_link_status")
{
  link_up = $arg1;
  full_dplx = $arg2;
  speed = $arg3;
  asdv = $arg4;
}
probe qemu.user.aarch64.e1000e_link_status_changed = process("/usr/bin/qemu-aarch64").mark("e1000e_link_status_changed")
{
  status = $arg1;
}
probe qemu.user.aarch64.e1000e_wrn_regs_write_ro = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_regs_write_ro")
{
  index = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.e1000e_wrn_regs_write_unknown = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_regs_write_unknown")
{
  index = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.e1000e_wrn_regs_read_unknown = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_regs_read_unknown")
{
  index = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.e1000e_wrn_regs_read_trivial = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_regs_read_trivial")
{
  index = $arg1;
}
probe qemu.user.aarch64.e1000e_wrn_regs_write_trivial = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_regs_write_trivial")
{
  index = $arg1;
}
probe qemu.user.aarch64.e1000e_wrn_no_ts_support = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_no_ts_support")
{
}
probe qemu.user.aarch64.e1000e_wrn_no_snap_support = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_no_snap_support")
{
}
probe qemu.user.aarch64.e1000e_wrn_iscsi_filtering_not_supported = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_iscsi_filtering_not_supported")
{
}
probe qemu.user.aarch64.e1000e_wrn_nfsw_filtering_not_supported = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_nfsw_filtering_not_supported")
{
}
probe qemu.user.aarch64.e1000e_wrn_nfsr_filtering_not_supported = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_nfsr_filtering_not_supported")
{
}
probe qemu.user.aarch64.e1000e_tx_disabled = process("/usr/bin/qemu-aarch64").mark("e1000e_tx_disabled")
{
}
probe qemu.user.aarch64.e1000e_tx_descr = process("/usr/bin/qemu-aarch64").mark("e1000e_tx_descr")
{
  addr = $arg1;
  lower = $arg2;
  upper = $arg3;
}
probe qemu.user.aarch64.e1000e_ring_free_space = process("/usr/bin/qemu-aarch64").mark("e1000e_ring_free_space")
{
  ridx = $arg1;
  rdlen = $arg2;
  rdh = $arg3;
  rdt = $arg4;
}
probe qemu.user.aarch64.e1000e_rx_can_recv_rings_full = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_can_recv_rings_full")
{
}
probe qemu.user.aarch64.e1000e_rx_can_recv = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_can_recv")
{
}
probe qemu.user.aarch64.e1000e_rx_has_buffers = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_has_buffers")
{
  ridx = $arg1;
  free_desc = $arg2;
  total_size = $arg3;
  desc_buf_size = $arg4;
}
probe qemu.user.aarch64.e1000e_rx_null_descriptor = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_null_descriptor")
{
}
probe qemu.user.aarch64.e1000e_rx_flt_vlan_mismatch = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_flt_vlan_mismatch")
{
  vid = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_flt_vlan_match = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_flt_vlan_match")
{
  vid = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_desc_ps_read = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_desc_ps_read")
{
  a0 = $arg1;
  a1 = $arg2;
  a2 = $arg3;
  a3 = $arg4;
}
probe qemu.user.aarch64.e1000e_rx_desc_ps_write = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_desc_ps_write")
{
  a0 = $arg1;
  a1 = $arg2;
  a2 = $arg3;
  a3 = $arg4;
}
probe qemu.user.aarch64.e1000e_rx_desc_buff_sizes = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_desc_buff_sizes")
{
  b0 = $arg1;
  b1 = $arg2;
  b2 = $arg3;
  b3 = $arg4;
}
probe qemu.user.aarch64.e1000e_rx_desc_len = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_desc_len")
{
  rx_desc_len = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_desc_buff_write = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_desc_buff_write")
{
  idx = $arg1;
  addr = $arg2;
  offset = $arg3;
  source = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.e1000e_rx_descr = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_descr")
{
  ridx = $arg1;
  base = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.e1000e_rx_set_rctl = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_set_rctl")
{
  rctl = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_receive_iov = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_receive_iov")
{
  iovcnt = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_flt_dropped = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_flt_dropped")
{
}
probe qemu.user.aarch64.e1000e_rx_written_to_guest = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_written_to_guest")
{
  causes = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_not_written_to_guest = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_not_written_to_guest")
{
  causes = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_interrupt_set = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_interrupt_set")
{
  causes = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_interrupt_delayed = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_interrupt_delayed")
{
  causes = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_set_cso = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_set_cso")
{
  cso_state = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_set_rdt = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_set_rdt")
{
  queue_idx = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.e1000e_rx_set_rfctl = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_set_rfctl")
{
  val = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_start_recv = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_start_recv")
{
}
probe qemu.user.aarch64.e1000e_rx_rss_started = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_rss_started")
{
}
probe qemu.user.aarch64.e1000e_rx_rss_disabled = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_rss_disabled")
{
}
probe qemu.user.aarch64.e1000e_rx_rss_type = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_rss_type")
{
  type = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_rss_ip4 = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_rss_ip4")
{
  isfragment = $arg1;
  istcp = $arg2;
  mrqc = $arg3;
  tcpipv4_enabled = $arg4;
  ipv4_enabled = $arg5;
}
probe qemu.user.aarch64.e1000e_rx_rss_ip6_rfctl = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_rss_ip6_rfctl")
{
  rfctl = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_rss_ip6 = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_rss_ip6")
{
  ex_dis = $arg1;
  new_ex_dis = $arg2;
  istcp = $arg3;
  has_ext_headers = $arg4;
  ex_dst_valid = $arg5;
  ex_src_valid = $arg6;
  mrqc = $arg7;
  tcpipv6_enabled = $arg8;
  ipv6ex_enabled = $arg9;
  ipv6_enabled = $arg10;
}
probe qemu.user.aarch64.e1000e_rx_rss_dispatched_to_queue = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_rss_dispatched_to_queue")
{
  queue_idx = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_metadata_protocols = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_protocols")
{
  isip4 = $arg1;
  isip6 = $arg2;
  isudp = $arg3;
  istcp = $arg4;
}
probe qemu.user.aarch64.e1000e_rx_metadata_vlan = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_vlan")
{
  vlan_tag = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_metadata_rss = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_rss")
{
  rss = $arg1;
  mrq = $arg2;
}
probe qemu.user.aarch64.e1000e_rx_metadata_ip_id = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_ip_id")
{
  ip_id = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_metadata_ack = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_ack")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_pkt_type = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_pkt_type")
{
  pkt_type = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_metadata_no_virthdr = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_no_virthdr")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_virthdr_no_csum_info = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_virthdr_no_csum_info")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_l3_cso_disabled = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_l3_cso_disabled")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_l4_cso_disabled = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_l4_cso_disabled")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_l3_csum_validation_failed = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_l3_csum_validation_failed")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_l4_csum_validation_failed = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_l4_csum_validation_failed")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_status_flags = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_status_flags")
{
  status_flags = $arg1;
}
probe qemu.user.aarch64.e1000e_rx_metadata_ipv6_sum_disabled = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_ipv6_sum_disabled")
{
}
probe qemu.user.aarch64.e1000e_rx_metadata_ipv6_filtering_disabled = process("/usr/bin/qemu-aarch64").mark("e1000e_rx_metadata_ipv6_filtering_disabled")
{
}
probe qemu.user.aarch64.e1000e_vlan_vet = process("/usr/bin/qemu-aarch64").mark("e1000e_vlan_vet")
{
  vet = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_msi_notify = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_msi_notify")
{
  cause = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_throttling_no_pending_interrupts = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_throttling_no_pending_interrupts")
{
}
probe qemu.user.aarch64.e1000e_irq_msi_notify_postponed = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_msi_notify_postponed")
{
}
probe qemu.user.aarch64.e1000e_irq_legacy_notify_postponed = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_legacy_notify_postponed")
{
}
probe qemu.user.aarch64.e1000e_irq_throttling_no_pending_vec = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_throttling_no_pending_vec")
{
  idx = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_msix_notify_postponed_vec = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_msix_notify_postponed_vec")
{
  idx = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_legacy_notify = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_legacy_notify")
{
  level = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_msix_notify_vec = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_msix_notify_vec")
{
  vector = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_postponed_by_xitr = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_postponed_by_xitr")
{
  reg = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_clear_ims = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_clear_ims")
{
  bits = $arg1;
  old_ims = $arg2;
  new_ims = $arg3;
}
probe qemu.user.aarch64.e1000e_irq_set_ims = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_set_ims")
{
  bits = $arg1;
  old_ims = $arg2;
  new_ims = $arg3;
}
probe qemu.user.aarch64.e1000e_irq_fix_icr_asserted = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_fix_icr_asserted")
{
  new_val = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_add_msi_other = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_add_msi_other")
{
  new_val = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_pending_interrupts = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_pending_interrupts")
{
  pending = $arg1;
  icr = $arg2;
  ims = $arg3;
}
probe qemu.user.aarch64.e1000e_irq_set_cause_entry = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_set_cause_entry")
{
  val = $arg1;
  icr = $arg2;
}
probe qemu.user.aarch64.e1000e_irq_set_cause_exit = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_set_cause_exit")
{
  val = $arg1;
  icr = $arg2;
}
probe qemu.user.aarch64.e1000e_irq_icr_write = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_write")
{
  bits = $arg1;
  old_icr = $arg2;
  new_icr = $arg3;
}
probe qemu.user.aarch64.e1000e_irq_write_ics = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_write_ics")
{
  val = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_icr_process_iame = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_process_iame")
{
}
probe qemu.user.aarch64.e1000e_irq_read_ics = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_read_ics")
{
  ics = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_read_ims = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_read_ims")
{
  ims = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_icr_clear_nonmsix_icr_read = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_clear_nonmsix_icr_read")
{
}
probe qemu.user.aarch64.e1000e_irq_icr_read_entry = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_read_entry")
{
  icr = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_icr_read_exit = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_read_exit")
{
  icr = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_icr_clear_zero_ims = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_clear_zero_ims")
{
}
probe qemu.user.aarch64.e1000e_irq_icr_clear_iame = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_clear_iame")
{
}
probe qemu.user.aarch64.e1000e_irq_iam_clear_eiame = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_iam_clear_eiame")
{
  iam = $arg1;
  cause = $arg2;
}
probe qemu.user.aarch64.e1000e_irq_icr_clear_eiac = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_icr_clear_eiac")
{
  icr = $arg1;
  eiac = $arg2;
}
probe qemu.user.aarch64.e1000e_irq_ims_clear_set_imc = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_ims_clear_set_imc")
{
  val = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_fire_delayed_interrupts = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_fire_delayed_interrupts")
{
}
probe qemu.user.aarch64.e1000e_irq_rearm_timer = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_rearm_timer")
{
  reg = $arg1;
  delay_ns = $arg2;
}
probe qemu.user.aarch64.e1000e_irq_throttling_timer = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_throttling_timer")
{
  reg = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_rdtr_fpd_running = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_rdtr_fpd_running")
{
}
probe qemu.user.aarch64.e1000e_irq_rdtr_fpd_not_running = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_rdtr_fpd_not_running")
{
}
probe qemu.user.aarch64.e1000e_irq_tidv_fpd_running = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_tidv_fpd_running")
{
}
probe qemu.user.aarch64.e1000e_irq_tidv_fpd_not_running = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_tidv_fpd_not_running")
{
}
probe qemu.user.aarch64.e1000e_irq_eitr_set = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_eitr_set")
{
  eitr_num = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.e1000e_irq_itr_set = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_itr_set")
{
  val = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_fire_all_timers = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_fire_all_timers")
{
  val = $arg1;
}
probe qemu.user.aarch64.e1000e_irq_adding_delayed_causes = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_adding_delayed_causes")
{
  val = $arg1;
  icr = $arg2;
}
probe qemu.user.aarch64.e1000e_irq_msix_pending_clearing = process("/usr/bin/qemu-aarch64").mark("e1000e_irq_msix_pending_clearing")
{
  cause = $arg1;
  int_cfg = $arg2;
  vec = $arg3;
}
probe qemu.user.aarch64.e1000e_wrn_msix_vec_wrong = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_msix_vec_wrong")
{
  cause = $arg1;
  cfg = $arg2;
}
probe qemu.user.aarch64.e1000e_wrn_msix_invalid = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_msix_invalid")
{
  cause = $arg1;
  cfg = $arg2;
}
probe qemu.user.aarch64.e1000e_mac_set_sw = process("/usr/bin/qemu-aarch64").mark("e1000e_mac_set_sw")
{
  b0 = $arg1;
  b1 = $arg2;
  b2 = $arg3;
  b3 = $arg4;
  b4 = $arg5;
  b5 = $arg6;
}
probe qemu.user.aarch64.e1000e_vm_state_running = process("/usr/bin/qemu-aarch64").mark("e1000e_vm_state_running")
{
}
probe qemu.user.aarch64.e1000e_vm_state_stopped = process("/usr/bin/qemu-aarch64").mark("e1000e_vm_state_stopped")
{
}
probe qemu.user.aarch64.e1000e_cb_pci_realize = process("/usr/bin/qemu-aarch64").mark("e1000e_cb_pci_realize")
{
}
probe qemu.user.aarch64.e1000e_cb_pci_uninit = process("/usr/bin/qemu-aarch64").mark("e1000e_cb_pci_uninit")
{
}
probe qemu.user.aarch64.e1000e_cb_qdev_reset = process("/usr/bin/qemu-aarch64").mark("e1000e_cb_qdev_reset")
{
}
probe qemu.user.aarch64.e1000e_cb_pre_save = process("/usr/bin/qemu-aarch64").mark("e1000e_cb_pre_save")
{
}
probe qemu.user.aarch64.e1000e_cb_post_load = process("/usr/bin/qemu-aarch64").mark("e1000e_cb_post_load")
{
}
probe qemu.user.aarch64.e1000e_io_write_addr = process("/usr/bin/qemu-aarch64").mark("e1000e_io_write_addr")
{
  addr = $arg1;
}
probe qemu.user.aarch64.e1000e_io_write_data = process("/usr/bin/qemu-aarch64").mark("e1000e_io_write_data")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.e1000e_io_read_addr = process("/usr/bin/qemu-aarch64").mark("e1000e_io_read_addr")
{
  addr = $arg1;
}
probe qemu.user.aarch64.e1000e_io_read_data = process("/usr/bin/qemu-aarch64").mark("e1000e_io_read_data")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.e1000e_wrn_io_write_unknown = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_io_write_unknown")
{
  addr = $arg1;
}
probe qemu.user.aarch64.e1000e_wrn_io_read_unknown = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_io_read_unknown")
{
  addr = $arg1;
}
probe qemu.user.aarch64.e1000e_wrn_io_addr_undefined = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_io_addr_undefined")
{
  addr = $arg1;
}
probe qemu.user.aarch64.e1000e_wrn_io_addr_flash = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_io_addr_flash")
{
  addr = $arg1;
}
probe qemu.user.aarch64.e1000e_wrn_io_addr_unknown = process("/usr/bin/qemu-aarch64").mark("e1000e_wrn_io_addr_unknown")
{
  addr = $arg1;
}
probe qemu.user.aarch64.e1000e_msi_init_fail = process("/usr/bin/qemu-aarch64").mark("e1000e_msi_init_fail")
{
  res = $arg1;
}
probe qemu.user.aarch64.e1000e_msix_init_fail = process("/usr/bin/qemu-aarch64").mark("e1000e_msix_init_fail")
{
  res = $arg1;
}
probe qemu.user.aarch64.e1000e_msix_use_vector_fail = process("/usr/bin/qemu-aarch64").mark("e1000e_msix_use_vector_fail")
{
  vec = $arg1;
  res = $arg2;
}
probe qemu.user.aarch64.e1000e_mac_set_permanent = process("/usr/bin/qemu-aarch64").mark("e1000e_mac_set_permanent")
{
  b0 = $arg1;
  b1 = $arg2;
  b2 = $arg3;
  b3 = $arg4;
  b4 = $arg5;
  b5 = $arg6;
}
probe qemu.user.aarch64.e1000e_cfg_support_virtio = process("/usr/bin/qemu-aarch64").mark("e1000e_cfg_support_virtio")
{
  support = $arg1;
}
probe qemu.user.aarch64.spapr_vlan_get_rx_bd_from_pool_found = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_get_rx_bd_from_pool_found")
{
  pool = $arg1;
  count = $arg2;
  rx_bufs = $arg3;
}
probe qemu.user.aarch64.spapr_vlan_get_rx_bd_from_page = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_get_rx_bd_from_page")
{
  buf_ptr = $arg1;
  bd = $arg2;
}
probe qemu.user.aarch64.spapr_vlan_get_rx_bd_from_page_found = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_get_rx_bd_from_page_found")
{
  use_buf_ptr = $arg1;
  rx_bufs = $arg2;
}
probe qemu.user.aarch64.spapr_vlan_receive = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_receive")
{
  id = $arg1;
  rx_bufs = $arg2;
}
probe qemu.user.aarch64.spapr_vlan_receive_dma_completed = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_receive_dma_completed")
{
}
probe qemu.user.aarch64.spapr_vlan_receive_wrote = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_receive_wrote")
{
  ptr = $arg1;
  hi = $arg2;
  lo = $arg3;
}
probe qemu.user.aarch64.spapr_vlan_add_rxbuf_to_pool_create = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_add_rxbuf_to_pool_create")
{
  pool = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.spapr_vlan_add_rxbuf_to_pool = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_add_rxbuf_to_pool")
{
  pool = $arg1;
  len = $arg2;
  count = $arg3;
}
probe qemu.user.aarch64.spapr_vlan_add_rxbuf_to_page = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_add_rxbuf_to_page")
{
  ptr = $arg1;
  rx_bufs = $arg2;
  bd = $arg3;
}
probe qemu.user.aarch64.spapr_vlan_h_add_logical_lan_buffer = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_h_add_logical_lan_buffer")
{
  reg = $arg1;
  buf = $arg2;
}
probe qemu.user.aarch64.spapr_vlan_h_send_logical_lan = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_h_send_logical_lan")
{
  reg = $arg1;
  continue_token = $arg2;
}
probe qemu.user.aarch64.spapr_vlan_h_send_logical_lan_rxbufs = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_h_send_logical_lan_rxbufs")
{
  rx_bufs = $arg1;
}
probe qemu.user.aarch64.spapr_vlan_h_send_logical_lan_buf_desc = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_h_send_logical_lan_buf_desc")
{
  buf = $arg1;
}
probe qemu.user.aarch64.spapr_vlan_h_send_logical_lan_total = process("/usr/bin/qemu-aarch64").mark("spapr_vlan_h_send_logical_lan_total")
{
  nbufs = $arg1;
  total_len = $arg2;
}
probe qemu.user.aarch64.sungem_tx_checksum = process("/usr/bin/qemu-aarch64").mark("sungem_tx_checksum")
{
  start = $arg1;
  off = $arg2;
}
probe qemu.user.aarch64.sungem_tx_checksum_oob = process("/usr/bin/qemu-aarch64").mark("sungem_tx_checksum_oob")
{
}
probe qemu.user.aarch64.sungem_tx_unfinished = process("/usr/bin/qemu-aarch64").mark("sungem_tx_unfinished")
{
}
probe qemu.user.aarch64.sungem_tx_overflow = process("/usr/bin/qemu-aarch64").mark("sungem_tx_overflow")
{
}
probe qemu.user.aarch64.sungem_tx_finished = process("/usr/bin/qemu-aarch64").mark("sungem_tx_finished")
{
  size = $arg1;
}
probe qemu.user.aarch64.sungem_tx_kick = process("/usr/bin/qemu-aarch64").mark("sungem_tx_kick")
{
}
probe qemu.user.aarch64.sungem_tx_disabled = process("/usr/bin/qemu-aarch64").mark("sungem_tx_disabled")
{
}
probe qemu.user.aarch64.sungem_tx_process = process("/usr/bin/qemu-aarch64").mark("sungem_tx_process")
{
  comp = $arg1;
  kick = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sungem_tx_desc = process("/usr/bin/qemu-aarch64").mark("sungem_tx_desc")
{
  comp = $arg1;
  control = $arg2;
  buffer = $arg3;
}
probe qemu.user.aarch64.sungem_tx_reset = process("/usr/bin/qemu-aarch64").mark("sungem_tx_reset")
{
}
probe qemu.user.aarch64.sungem_rx_mac_disabled = process("/usr/bin/qemu-aarch64").mark("sungem_rx_mac_disabled")
{
}
probe qemu.user.aarch64.sungem_rx_txdma_disabled = process("/usr/bin/qemu-aarch64").mark("sungem_rx_txdma_disabled")
{
}
probe qemu.user.aarch64.sungem_rx_check = process("/usr/bin/qemu-aarch64").mark("sungem_rx_check")
{
  full = $arg1;
  kick = $arg2;
  done = $arg3;
}
probe qemu.user.aarch64.sungem_rx_mac_check = process("/usr/bin/qemu-aarch64").mark("sungem_rx_mac_check")
{
  mac0 = $arg1;
  mac1 = $arg2;
  mac2 = $arg3;
}
probe qemu.user.aarch64.sungem_rx_mac_multicast = process("/usr/bin/qemu-aarch64").mark("sungem_rx_mac_multicast")
{
}
probe qemu.user.aarch64.sungem_rx_mac_compare = process("/usr/bin/qemu-aarch64").mark("sungem_rx_mac_compare")
{
  mac0 = $arg1;
  mac1 = $arg2;
  mac2 = $arg3;
}
probe qemu.user.aarch64.sungem_rx_packet = process("/usr/bin/qemu-aarch64").mark("sungem_rx_packet")
{
  size = $arg1;
}
probe qemu.user.aarch64.sungem_rx_disabled = process("/usr/bin/qemu-aarch64").mark("sungem_rx_disabled")
{
}
probe qemu.user.aarch64.sungem_rx_bad_frame_size = process("/usr/bin/qemu-aarch64").mark("sungem_rx_bad_frame_size")
{
  size = $arg1;
}
probe qemu.user.aarch64.sungem_rx_unmatched = process("/usr/bin/qemu-aarch64").mark("sungem_rx_unmatched")
{
}
probe qemu.user.aarch64.sungem_rx_process = process("/usr/bin/qemu-aarch64").mark("sungem_rx_process")
{
  done = $arg1;
  kick = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sungem_rx_ringfull = process("/usr/bin/qemu-aarch64").mark("sungem_rx_ringfull")
{
}
probe qemu.user.aarch64.sungem_rx_desc = process("/usr/bin/qemu-aarch64").mark("sungem_rx_desc")
{
  control = $arg1;
  buffer = $arg2;
}
probe qemu.user.aarch64.sungem_rx_reset = process("/usr/bin/qemu-aarch64").mark("sungem_rx_reset")
{
}
probe qemu.user.aarch64.sungem_rx_kick = process("/usr/bin/qemu-aarch64").mark("sungem_rx_kick")
{
  val = $arg1;
}
probe qemu.user.aarch64.sungem_reset = process("/usr/bin/qemu-aarch64").mark("sungem_reset")
{
  pci_reset = $arg1;
}
probe qemu.user.aarch64.sungem_mii_write = process("/usr/bin/qemu-aarch64").mark("sungem_mii_write")
{
  phy_addr = $arg1;
  reg_addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.sungem_mii_read = process("/usr/bin/qemu-aarch64").mark("sungem_mii_read")
{
  phy_addr = $arg1;
  reg_addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.sungem_mii_invalid_sof = process("/usr/bin/qemu-aarch64").mark("sungem_mii_invalid_sof")
{
  val = $arg1;
}
probe qemu.user.aarch64.sungem_mii_invalid_op = process("/usr/bin/qemu-aarch64").mark("sungem_mii_invalid_op")
{
  op = $arg1;
}
probe qemu.user.aarch64.sungem_mmio_greg_write = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_greg_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_greg_read = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_greg_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_txdma_write = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_txdma_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_txdma_read = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_txdma_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_rxdma_write = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_rxdma_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_rxdma_read = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_rxdma_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_mac_write = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_mac_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_mac_read = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_mac_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_mif_write = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_mif_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_mif_read = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_mif_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_pcs_write = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_pcs_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sungem_mmio_pcs_read = process("/usr/bin/qemu-aarch64").mark("sungem_mmio_pcs_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sunhme_seb_write = process("/usr/bin/qemu-aarch64").mark("sunhme_seb_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_seb_read = process("/usr/bin/qemu-aarch64").mark("sunhme_seb_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_etx_write = process("/usr/bin/qemu-aarch64").mark("sunhme_etx_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_etx_read = process("/usr/bin/qemu-aarch64").mark("sunhme_etx_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_erx_write = process("/usr/bin/qemu-aarch64").mark("sunhme_erx_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_erx_read = process("/usr/bin/qemu-aarch64").mark("sunhme_erx_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_mac_write = process("/usr/bin/qemu-aarch64").mark("sunhme_mac_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_mac_read = process("/usr/bin/qemu-aarch64").mark("sunhme_mac_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_mii_write = process("/usr/bin/qemu-aarch64").mark("sunhme_mii_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_mii_read = process("/usr/bin/qemu-aarch64").mark("sunhme_mii_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_mif_write = process("/usr/bin/qemu-aarch64").mark("sunhme_mif_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_mif_read = process("/usr/bin/qemu-aarch64").mark("sunhme_mif_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sunhme_tx_desc = process("/usr/bin/qemu-aarch64").mark("sunhme_tx_desc")
{
  buffer = $arg1;
  status = $arg2;
  cr = $arg3;
  nr = $arg4;
}
probe qemu.user.aarch64.sunhme_tx_xsum_add = process("/usr/bin/qemu-aarch64").mark("sunhme_tx_xsum_add")
{
  offset = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.sunhme_tx_xsum_stuff = process("/usr/bin/qemu-aarch64").mark("sunhme_tx_xsum_stuff")
{
  xsum = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.sunhme_tx_done = process("/usr/bin/qemu-aarch64").mark("sunhme_tx_done")
{
  len = $arg1;
}
probe qemu.user.aarch64.sunhme_rx_incoming = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_incoming")
{
  len = $arg1;
}
probe qemu.user.aarch64.sunhme_rx_filter_destmac = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_destmac")
{
  b0 = $arg1;
  b1 = $arg2;
  b2 = $arg3;
  b3 = $arg4;
  b4 = $arg5;
  b5 = $arg6;
}
probe qemu.user.aarch64.sunhme_rx_filter_local_match = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_local_match")
{
}
probe qemu.user.aarch64.sunhme_rx_filter_bcast_match = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_bcast_match")
{
}
probe qemu.user.aarch64.sunhme_rx_filter_hash_nomatch = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_hash_nomatch")
{
}
probe qemu.user.aarch64.sunhme_rx_filter_hash_match = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_hash_match")
{
}
probe qemu.user.aarch64.sunhme_rx_filter_promisc_match = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_promisc_match")
{
}
probe qemu.user.aarch64.sunhme_rx_filter_reject = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_reject")
{
}
probe qemu.user.aarch64.sunhme_rx_filter_accept = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_filter_accept")
{
}
probe qemu.user.aarch64.sunhme_rx_desc = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_desc")
{
  addr = $arg1;
  offset = $arg2;
  status = $arg3;
  len = $arg4;
  cr = $arg5;
  nr = $arg6;
}
probe qemu.user.aarch64.sunhme_rx_xsum_calc = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_xsum_calc")
{
  xsum = $arg1;
}
probe qemu.user.aarch64.sunhme_rx_norxd = process("/usr/bin/qemu-aarch64").mark("sunhme_rx_norxd")
{
}
probe qemu.user.aarch64.sunhme_update_irq = process("/usr/bin/qemu-aarch64").mark("sunhme_update_irq")
{
  mifmask = $arg1;
  mif = $arg2;
  sebmask = $arg3;
  seb = $arg4;
  level = $arg5;
}
probe qemu.user.aarch64.virtio_net_announce_notify = process("/usr/bin/qemu-aarch64").mark("virtio_net_announce_notify")
{
}
probe qemu.user.aarch64.virtio_net_announce_timer = process("/usr/bin/qemu-aarch64").mark("virtio_net_announce_timer")
{
  round = $arg1;
}
probe qemu.user.aarch64.virtio_net_handle_announce = process("/usr/bin/qemu-aarch64").mark("virtio_net_handle_announce")
{
  round = $arg1;
}
probe qemu.user.aarch64.virtio_net_post_load_device = process("/usr/bin/qemu-aarch64").mark("virtio_net_post_load_device")
{
}
probe qemu.user.aarch64.virtio_net_rss_disable = process("/usr/bin/qemu-aarch64").mark("virtio_net_rss_disable")
{
}
probe qemu.user.aarch64.virtio_net_rss_error = process("/usr/bin/qemu-aarch64").mark("virtio_net_rss_error")
{
  msg = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.virtio_net_rss_enable = process("/usr/bin/qemu-aarch64").mark("virtio_net_rss_enable")
{
  p1 = $arg1;
  p2 = $arg2;
  p3 = $arg3;
}
probe qemu.user.aarch64.tulip_reg_write = process("/usr/bin/qemu-aarch64").mark("tulip_reg_write")
{
  addr = $arg1;
  name = $arg2;
  size = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.tulip_reg_read = process("/usr/bin/qemu-aarch64").mark("tulip_reg_read")
{
  addr = $arg1;
  name = $arg2;
  size = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.tulip_receive = process("/usr/bin/qemu-aarch64").mark("tulip_receive")
{
  buf = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.tulip_descriptor = process("/usr/bin/qemu-aarch64").mark("tulip_descriptor")
{
  prefix = $arg1;
  addr = $arg2;
  status = $arg3;
  control = $arg4;
  len1 = $arg5;
  len2 = $arg6;
  buf1 = $arg7;
  buf2 = $arg8;
}
probe qemu.user.aarch64.tulip_rx_state = process("/usr/bin/qemu-aarch64").mark("tulip_rx_state")
{
  state = $arg1;
}
probe qemu.user.aarch64.tulip_tx_state = process("/usr/bin/qemu-aarch64").mark("tulip_tx_state")
{
  state = $arg1;
}
probe qemu.user.aarch64.tulip_irq = process("/usr/bin/qemu-aarch64").mark("tulip_irq")
{
  mask = $arg1;
  en = $arg2;
  state = $arg3;
}
probe qemu.user.aarch64.tulip_mii_write = process("/usr/bin/qemu-aarch64").mark("tulip_mii_write")
{
  phy = $arg1;
  reg = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.tulip_mii_read = process("/usr/bin/qemu-aarch64").mark("tulip_mii_read")
{
  phy = $arg1;
  reg = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.tulip_reset = process("/usr/bin/qemu-aarch64").mark("tulip_reset")
{
}
probe qemu.user.aarch64.tulip_setup_frame = process("/usr/bin/qemu-aarch64").mark("tulip_setup_frame")
{
}
probe qemu.user.aarch64.tulip_setup_filter = process("/usr/bin/qemu-aarch64").mark("tulip_setup_filter")
{
  n = $arg1;
  a = $arg2;
  b = $arg3;
  c = $arg4;
  d = $arg5;
  e = $arg6;
  f = $arg7;
}
probe qemu.user.aarch64.lasi_82596_mem_readw = process("/usr/bin/qemu-aarch64").mark("lasi_82596_mem_readw")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.lasi_82596_mem_writew = process("/usr/bin/qemu-aarch64").mark("lasi_82596_mem_writew")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.i82596_s_reset = process("/usr/bin/qemu-aarch64").mark("i82596_s_reset")
{
  s = $arg1;
}
probe qemu.user.aarch64.i82596_transmit = process("/usr/bin/qemu-aarch64").mark("i82596_transmit")
{
  size = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.i82596_receive_analysis = process("/usr/bin/qemu-aarch64").mark("i82596_receive_analysis")
{
  s = $arg1;
}
probe qemu.user.aarch64.i82596_receive_packet = process("/usr/bin/qemu-aarch64").mark("i82596_receive_packet")
{
  sz = $arg1;
}
probe qemu.user.aarch64.i82596_new_mac = process("/usr/bin/qemu-aarch64").mark("i82596_new_mac")
{
  id_with_mac = $arg1;
}
probe qemu.user.aarch64.i82596_set_multicast = process("/usr/bin/qemu-aarch64").mark("i82596_set_multicast")
{
  count = $arg1;
}
probe qemu.user.aarch64.i82596_channel_attention = process("/usr/bin/qemu-aarch64").mark("i82596_channel_attention")
{
  s = $arg1;
}
probe qemu.user.aarch64.imx_phy_read = process("/usr/bin/qemu-aarch64").mark("imx_phy_read")
{
  val = $arg1;
  phy = $arg2;
  reg = $arg3;
}
probe qemu.user.aarch64.imx_phy_read_num = process("/usr/bin/qemu-aarch64").mark("imx_phy_read_num")
{
  phy = $arg1;
  configured = $arg2;
}
probe qemu.user.aarch64.imx_phy_write = process("/usr/bin/qemu-aarch64").mark("imx_phy_write")
{
  val = $arg1;
  phy = $arg2;
  reg = $arg3;
}
probe qemu.user.aarch64.imx_phy_write_num = process("/usr/bin/qemu-aarch64").mark("imx_phy_write_num")
{
  phy = $arg1;
  configured = $arg2;
}
probe qemu.user.aarch64.imx_phy_update_link = process("/usr/bin/qemu-aarch64").mark("imx_phy_update_link")
{
  s = $arg1;
}
probe qemu.user.aarch64.imx_phy_reset = process("/usr/bin/qemu-aarch64").mark("imx_phy_reset")
{
}
probe qemu.user.aarch64.imx_fec_read_bd = process("/usr/bin/qemu-aarch64").mark("imx_fec_read_bd")
{
  addr = $arg1;
  flags = $arg2;
  len = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.imx_enet_read_bd = process("/usr/bin/qemu-aarch64").mark("imx_enet_read_bd")
{
  addr = $arg1;
  flags = $arg2;
  len = $arg3;
  data = $arg4;
  options = $arg5;
  status = $arg6;
}
probe qemu.user.aarch64.imx_eth_tx_bd_busy = process("/usr/bin/qemu-aarch64").mark("imx_eth_tx_bd_busy")
{
}
probe qemu.user.aarch64.imx_eth_rx_bd_full = process("/usr/bin/qemu-aarch64").mark("imx_eth_rx_bd_full")
{
}
probe qemu.user.aarch64.imx_eth_read = process("/usr/bin/qemu-aarch64").mark("imx_eth_read")
{
  reg = $arg1;
  reg_name = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.imx_eth_write = process("/usr/bin/qemu-aarch64").mark("imx_eth_write")
{
  reg = $arg1;
  reg_name = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.imx_fec_receive = process("/usr/bin/qemu-aarch64").mark("imx_fec_receive")
{
  size = $arg1;
}
probe qemu.user.aarch64.imx_fec_receive_len = process("/usr/bin/qemu-aarch64").mark("imx_fec_receive_len")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.imx_fec_receive_last = process("/usr/bin/qemu-aarch64").mark("imx_fec_receive_last")
{
  last = $arg1;
}
probe qemu.user.aarch64.imx_enet_receive = process("/usr/bin/qemu-aarch64").mark("imx_enet_receive")
{
  size = $arg1;
}
probe qemu.user.aarch64.imx_enet_receive_len = process("/usr/bin/qemu-aarch64").mark("imx_enet_receive_len")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.imx_enet_receive_last = process("/usr/bin/qemu-aarch64").mark("imx_enet_receive_last")
{
  last = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_reset = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_reset")
{
  emc_num = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_update_tx_irq = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_update_tx_irq")
{
  level = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_update_rx_irq = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_update_rx_irq")
{
  level = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_set_mista = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_set_mista")
{
  flags = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_cpu_owned_desc = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_cpu_owned_desc")
{
  addr = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_sent_packet = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_sent_packet")
{
  len = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_tx_done = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_tx_done")
{
  ctxdsa = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_can_receive = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_can_receive")
{
  can_receive = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_packet_filtered_out = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_packet_filtered_out")
{
  fail_reason = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_packet_dropped = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_packet_dropped")
{
  len = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_receiving_packet = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_receiving_packet")
{
  len = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_received_packet = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_received_packet")
{
  len = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_rx_done = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_rx_done")
{
  crxdsa = $arg1;
}
probe qemu.user.aarch64.npcm7xx_emc_reg_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_reg_read")
{
  emc_num = $arg1;
  result = $arg2;
  name = $arg3;
  regno = $arg4;
}
probe qemu.user.aarch64.npcm7xx_emc_reg_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_emc_reg_write")
{
  emc_num = $arg1;
  name = $arg2;
  regno = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.dp8393x_raise_irq = process("/usr/bin/qemu-aarch64").mark("dp8393x_raise_irq")
{
  isr = $arg1;
}
probe qemu.user.aarch64.dp8393x_lower_irq = process("/usr/bin/qemu-aarch64").mark("dp8393x_lower_irq")
{
}
probe qemu.user.aarch64.dp8393x_load_cam = process("/usr/bin/qemu-aarch64").mark("dp8393x_load_cam")
{
  idx = $arg1;
  cam0 = $arg2;
  cam1 = $arg3;
  cam2 = $arg4;
  cam3 = $arg5;
  cam4 = $arg6;
  cam5 = $arg7;
}
probe qemu.user.aarch64.dp8393x_load_cam_done = process("/usr/bin/qemu-aarch64").mark("dp8393x_load_cam_done")
{
  cen = $arg1;
}
probe qemu.user.aarch64.dp8393x_read_rra_regs = process("/usr/bin/qemu-aarch64").mark("dp8393x_read_rra_regs")
{
  crba0 = $arg1;
  crba1 = $arg2;
  rbwc0 = $arg3;
  rbwc1 = $arg4;
}
probe qemu.user.aarch64.dp8393x_transmit_packet = process("/usr/bin/qemu-aarch64").mark("dp8393x_transmit_packet")
{
  ttda = $arg1;
}
probe qemu.user.aarch64.dp8393x_transmit_txlen_error = process("/usr/bin/qemu-aarch64").mark("dp8393x_transmit_txlen_error")
{
  len = $arg1;
}
probe qemu.user.aarch64.dp8393x_read = process("/usr/bin/qemu-aarch64").mark("dp8393x_read")
{
  reg = $arg1;
  name = $arg2;
  val = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.dp8393x_write = process("/usr/bin/qemu-aarch64").mark("dp8393x_write")
{
  reg = $arg1;
  name = $arg2;
  val = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.dp8393x_write_invalid = process("/usr/bin/qemu-aarch64").mark("dp8393x_write_invalid")
{
  reg = $arg1;
}
probe qemu.user.aarch64.dp8393x_write_invalid_dcr = process("/usr/bin/qemu-aarch64").mark("dp8393x_write_invalid_dcr")
{
  name = $arg1;
}
probe qemu.user.aarch64.dp8393x_receive_oversize = process("/usr/bin/qemu-aarch64").mark("dp8393x_receive_oversize")
{
  size = $arg1;
}
probe qemu.user.aarch64.dp8393x_receive_not_netcard = process("/usr/bin/qemu-aarch64").mark("dp8393x_receive_not_netcard")
{
}
probe qemu.user.aarch64.dp8393x_receive_packet = process("/usr/bin/qemu-aarch64").mark("dp8393x_receive_packet")
{
  crba = $arg1;
}
probe qemu.user.aarch64.dp8393x_receive_write_status = process("/usr/bin/qemu-aarch64").mark("dp8393x_receive_write_status")
{
  crba = $arg1;
}
probe qemu.user.aarch64.xlnx_can_update_irq = process("/usr/bin/qemu-aarch64").mark("xlnx_can_update_irq")
{
  isr = $arg1;
  ier = $arg2;
  irq = $arg3;
}
probe qemu.user.aarch64.xlnx_can_reset = process("/usr/bin/qemu-aarch64").mark("xlnx_can_reset")
{
  val = $arg1;
}
probe qemu.user.aarch64.xlnx_can_rx_fifo_filter_reject = process("/usr/bin/qemu-aarch64").mark("xlnx_can_rx_fifo_filter_reject")
{
  id = $arg1;
  dlc = $arg2;
}
probe qemu.user.aarch64.xlnx_can_filter_id_pre_write = process("/usr/bin/qemu-aarch64").mark("xlnx_can_filter_id_pre_write")
{
  filter_num = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.xlnx_can_filter_mask_pre_write = process("/usr/bin/qemu-aarch64").mark("xlnx_can_filter_mask_pre_write")
{
  filter_num = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.xlnx_can_tx_data = process("/usr/bin/qemu-aarch64").mark("xlnx_can_tx_data")
{
  id = $arg1;
  dlc = $arg2;
  db0 = $arg3;
  db1 = $arg4;
  db2 = $arg5;
  db3 = $arg6;
  db4 = $arg7;
  db5 = $arg8;
  db6 = $arg9;
  db7 = $arg10;
}
probe qemu.user.aarch64.xlnx_can_rx_data = process("/usr/bin/qemu-aarch64").mark("xlnx_can_rx_data")
{
  id = $arg1;
  dlc = $arg2;
  db0 = $arg3;
  db1 = $arg4;
  db2 = $arg5;
  db3 = $arg6;
  db4 = $arg7;
  db5 = $arg8;
  db6 = $arg9;
  db7 = $arg10;
}
probe qemu.user.aarch64.xlnx_can_rx_discard = process("/usr/bin/qemu-aarch64").mark("xlnx_can_rx_discard")
{
  status = $arg1;
}
probe qemu.user.aarch64.nubus_slot_read = process("/usr/bin/qemu-aarch64").mark("nubus_slot_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.nubus_slot_write = process("/usr/bin/qemu-aarch64").mark("nubus_slot_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.nubus_super_slot_read = process("/usr/bin/qemu-aarch64").mark("nubus_super_slot_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.nubus_super_slot_write = process("/usr/bin/qemu-aarch64").mark("nubus_super_slot_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.pci_nvme_irq_msix = process("/usr/bin/qemu-aarch64").mark("pci_nvme_irq_msix")
{
  vector = $arg1;
}
probe qemu.user.aarch64.pci_nvme_irq_pin = process("/usr/bin/qemu-aarch64").mark("pci_nvme_irq_pin")
{
}
probe qemu.user.aarch64.pci_nvme_irq_masked = process("/usr/bin/qemu-aarch64").mark("pci_nvme_irq_masked")
{
}
probe qemu.user.aarch64.pci_nvme_dma_read = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dma_read")
{
  prp1 = $arg1;
  prp2 = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dbbuf_config = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dbbuf_config")
{
  dbs_addr = $arg1;
  eis_addr = $arg2;
}
probe qemu.user.aarch64.pci_nvme_map_addr = process("/usr/bin/qemu-aarch64").mark("pci_nvme_map_addr")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.pci_nvme_map_addr_cmb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_map_addr_cmb")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.pci_nvme_map_prp = process("/usr/bin/qemu-aarch64").mark("pci_nvme_map_prp")
{
  trans_len = $arg1;
  len = $arg2;
  prp1 = $arg3;
  prp2 = $arg4;
  num_prps = $arg5;
}
probe qemu.user.aarch64.pci_nvme_map_sgl = process("/usr/bin/qemu-aarch64").mark("pci_nvme_map_sgl")
{
  typ = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.pci_nvme_io_cmd = process("/usr/bin/qemu-aarch64").mark("pci_nvme_io_cmd")
{
  cid = $arg1;
  nsid = $arg2;
  sqid = $arg3;
  opcode = $arg4;
  opname = $arg5;
}
probe qemu.user.aarch64.pci_nvme_admin_cmd = process("/usr/bin/qemu-aarch64").mark("pci_nvme_admin_cmd")
{
  cid = $arg1;
  sqid = $arg2;
  opcode = $arg3;
  opname = $arg4;
}
probe qemu.user.aarch64.pci_nvme_flush_ns = process("/usr/bin/qemu-aarch64").mark("pci_nvme_flush_ns")
{
  nsid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_format_set = process("/usr/bin/qemu-aarch64").mark("pci_nvme_format_set")
{
  nsid = $arg1;
  lbaf = $arg2;
  mset = $arg3;
  pi = $arg4;
  pil = $arg5;
}
probe qemu.user.aarch64.pci_nvme_read = process("/usr/bin/qemu-aarch64").mark("pci_nvme_read")
{
  cid = $arg1;
  nsid = $arg2;
  nlb = $arg3;
  count = $arg4;
  lba = $arg5;
}
probe qemu.user.aarch64.pci_nvme_write = process("/usr/bin/qemu-aarch64").mark("pci_nvme_write")
{
  cid = $arg1;
  verb = $arg2;
  nsid = $arg3;
  nlb = $arg4;
  count = $arg5;
  lba = $arg6;
}
probe qemu.user.aarch64.pci_nvme_rw_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_rw_cb")
{
  cid = $arg1;
  blkname = $arg2;
}
probe qemu.user.aarch64.pci_nvme_misc_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_misc_cb")
{
  cid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_dif_rw = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_rw")
{
  pract = $arg1;
  prinfo = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_rw_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_rw_cb")
{
  cid = $arg1;
  blkname = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_rw_mdata_in_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_rw_mdata_in_cb")
{
  cid = $arg1;
  blkname = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_rw_mdata_out_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_rw_mdata_out_cb")
{
  cid = $arg1;
  blkname = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_rw_check_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_rw_check_cb")
{
  cid = $arg1;
  prinfo = $arg2;
  apptag = $arg3;
  appmask = $arg4;
  reftag = $arg5;
}
probe qemu.user.aarch64.pci_nvme_dif_pract_generate_dif_crc16 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_pract_generate_dif_crc16")
{
  len = $arg1;
  lba_size = $arg2;
  chksum_len = $arg3;
  apptag = $arg4;
  reftag = $arg5;
}
probe qemu.user.aarch64.pci_nvme_dif_pract_generate_dif_crc64 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_pract_generate_dif_crc64")
{
  len = $arg1;
  lba_size = $arg2;
  chksum_len = $arg3;
  apptag = $arg4;
  reftag = $arg5;
}
probe qemu.user.aarch64.pci_nvme_dif_check = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_check")
{
  prinfo = $arg1;
  chksum_len = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_prchk_disabled_crc16 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_prchk_disabled_crc16")
{
  apptag = $arg1;
  reftag = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_prchk_disabled_crc64 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_prchk_disabled_crc64")
{
  apptag = $arg1;
  reftag = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_prchk_guard_crc16 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_prchk_guard_crc16")
{
  guard = $arg1;
  crc = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_prchk_guard_crc64 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_prchk_guard_crc64")
{
  guard = $arg1;
  crc = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_prchk_apptag = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_prchk_apptag")
{
  apptag = $arg1;
  elbat = $arg2;
  elbatm = $arg3;
}
probe qemu.user.aarch64.pci_nvme_dif_prchk_reftag_crc16 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_prchk_reftag_crc16")
{
  reftag = $arg1;
  elbrt = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dif_prchk_reftag_crc64 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dif_prchk_reftag_crc64")
{
  reftag = $arg1;
  elbrt = $arg2;
}
probe qemu.user.aarch64.pci_nvme_copy = process("/usr/bin/qemu-aarch64").mark("pci_nvme_copy")
{
  cid = $arg1;
  nsid = $arg2;
  nr = $arg3;
  format = $arg4;
}
probe qemu.user.aarch64.pci_nvme_copy_source_range = process("/usr/bin/qemu-aarch64").mark("pci_nvme_copy_source_range")
{
  slba = $arg1;
  nlb = $arg2;
}
probe qemu.user.aarch64.pci_nvme_copy_out = process("/usr/bin/qemu-aarch64").mark("pci_nvme_copy_out")
{
  slba = $arg1;
  nlb = $arg2;
}
probe qemu.user.aarch64.pci_nvme_verify = process("/usr/bin/qemu-aarch64").mark("pci_nvme_verify")
{
  cid = $arg1;
  nsid = $arg2;
  slba = $arg3;
  nlb = $arg4;
}
probe qemu.user.aarch64.pci_nvme_verify_mdata_in_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_verify_mdata_in_cb")
{
  cid = $arg1;
  blkname = $arg2;
}
probe qemu.user.aarch64.pci_nvme_verify_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_verify_cb")
{
  cid = $arg1;
  prinfo = $arg2;
  apptag = $arg3;
  appmask = $arg4;
  reftag = $arg5;
}
probe qemu.user.aarch64.pci_nvme_rw_complete_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_rw_complete_cb")
{
  cid = $arg1;
  blkname = $arg2;
}
probe qemu.user.aarch64.pci_nvme_block_status = process("/usr/bin/qemu-aarch64").mark("pci_nvme_block_status")
{
  offset = $arg1;
  bytes = $arg2;
  pnum = $arg3;
  ret = $arg4;
  zeroed = $arg5;
}
probe qemu.user.aarch64.pci_nvme_dsm = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dsm")
{
  nr = $arg1;
  attr = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dsm_deallocate = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dsm_deallocate")
{
  slba = $arg1;
  nlb = $arg2;
}
probe qemu.user.aarch64.pci_nvme_dsm_single_range_limit_exceeded = process("/usr/bin/qemu-aarch64").mark("pci_nvme_dsm_single_range_limit_exceeded")
{
  nlb = $arg1;
  dmrsl = $arg2;
}
probe qemu.user.aarch64.pci_nvme_compare = process("/usr/bin/qemu-aarch64").mark("pci_nvme_compare")
{
  cid = $arg1;
  nsid = $arg2;
  slba = $arg3;
  nlb = $arg4;
}
probe qemu.user.aarch64.pci_nvme_compare_data_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_compare_data_cb")
{
  cid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_compare_mdata_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_compare_mdata_cb")
{
  cid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_aio_discard_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_aio_discard_cb")
{
  cid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_aio_copy_in_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_aio_copy_in_cb")
{
  cid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_aio_flush_cb = process("/usr/bin/qemu-aarch64").mark("pci_nvme_aio_flush_cb")
{
  cid = $arg1;
  blkname = $arg2;
}
probe qemu.user.aarch64.pci_nvme_create_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_create_sq")
{
  addr = $arg1;
  sqid = $arg2;
  cqid = $arg3;
  qsize = $arg4;
  qflags = $arg5;
}
probe qemu.user.aarch64.pci_nvme_create_cq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_create_cq")
{
  addr = $arg1;
  cqid = $arg2;
  vector = $arg3;
  size = $arg4;
  qflags = $arg5;
  ien = $arg6;
}
probe qemu.user.aarch64.pci_nvme_del_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_del_sq")
{
  qid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_del_cq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_del_cq")
{
  cqid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_identify = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify")
{
  cid = $arg1;
  cns = $arg2;
  ctrlid = $arg3;
  csi = $arg4;
}
probe qemu.user.aarch64.pci_nvme_identify_ctrl = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_ctrl")
{
}
probe qemu.user.aarch64.pci_nvme_identify_ctrl_csi = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_ctrl_csi")
{
  csi = $arg1;
}
probe qemu.user.aarch64.pci_nvme_identify_ns = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_ns")
{
  ns = $arg1;
}
probe qemu.user.aarch64.pci_nvme_identify_ctrl_list = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_ctrl_list")
{
  cns = $arg1;
  cntid = $arg2;
}
probe qemu.user.aarch64.pci_nvme_identify_pri_ctrl_cap = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_pri_ctrl_cap")
{
  cntlid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_identify_sec_ctrl_list = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_sec_ctrl_list")
{
  cntlid = $arg1;
  numcntl = $arg2;
}
probe qemu.user.aarch64.pci_nvme_identify_ns_csi = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_ns_csi")
{
  ns = $arg1;
  csi = $arg2;
}
probe qemu.user.aarch64.pci_nvme_identify_nslist = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_nslist")
{
  ns = $arg1;
}
probe qemu.user.aarch64.pci_nvme_identify_nslist_csi = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_nslist_csi")
{
  ns = $arg1;
  csi = $arg2;
}
probe qemu.user.aarch64.pci_nvme_identify_cmd_set = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_cmd_set")
{
}
probe qemu.user.aarch64.pci_nvme_identify_ns_descr_list = process("/usr/bin/qemu-aarch64").mark("pci_nvme_identify_ns_descr_list")
{
  ns = $arg1;
}
probe qemu.user.aarch64.pci_nvme_get_log = process("/usr/bin/qemu-aarch64").mark("pci_nvme_get_log")
{
  cid = $arg1;
  lid = $arg2;
  lsp = $arg3;
  rae = $arg4;
  len = $arg5;
  off = $arg6;
}
probe qemu.user.aarch64.pci_nvme_getfeat = process("/usr/bin/qemu-aarch64").mark("pci_nvme_getfeat")
{
  cid = $arg1;
  nsid = $arg2;
  fid = $arg3;
  sel = $arg4;
  cdw11 = $arg5;
}
probe qemu.user.aarch64.pci_nvme_setfeat = process("/usr/bin/qemu-aarch64").mark("pci_nvme_setfeat")
{
  cid = $arg1;
  nsid = $arg2;
  fid = $arg3;
  save = $arg4;
  cdw11 = $arg5;
}
probe qemu.user.aarch64.pci_nvme_getfeat_vwcache = process("/usr/bin/qemu-aarch64").mark("pci_nvme_getfeat_vwcache")
{
  result = $arg1;
}
probe qemu.user.aarch64.pci_nvme_getfeat_numq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_getfeat_numq")
{
  result = $arg1;
}
probe qemu.user.aarch64.pci_nvme_setfeat_numq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_setfeat_numq")
{
  reqcq = $arg1;
  reqsq = $arg2;
  gotcq = $arg3;
  gotsq = $arg4;
}
probe qemu.user.aarch64.pci_nvme_setfeat_timestamp = process("/usr/bin/qemu-aarch64").mark("pci_nvme_setfeat_timestamp")
{
  ts = $arg1;
}
probe qemu.user.aarch64.pci_nvme_getfeat_timestamp = process("/usr/bin/qemu-aarch64").mark("pci_nvme_getfeat_timestamp")
{
  ts = $arg1;
}
probe qemu.user.aarch64.pci_nvme_process_aers = process("/usr/bin/qemu-aarch64").mark("pci_nvme_process_aers")
{
  queued = $arg1;
}
probe qemu.user.aarch64.pci_nvme_aer = process("/usr/bin/qemu-aarch64").mark("pci_nvme_aer")
{
  cid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_aer_aerl_exceeded = process("/usr/bin/qemu-aarch64").mark("pci_nvme_aer_aerl_exceeded")
{
}
probe qemu.user.aarch64.pci_nvme_aer_masked = process("/usr/bin/qemu-aarch64").mark("pci_nvme_aer_masked")
{
  type = $arg1;
  mask = $arg2;
}
probe qemu.user.aarch64.pci_nvme_aer_post_cqe = process("/usr/bin/qemu-aarch64").mark("pci_nvme_aer_post_cqe")
{
  typ = $arg1;
  info = $arg2;
  log_page = $arg3;
}
probe qemu.user.aarch64.pci_nvme_ns_attachment = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ns_attachment")
{
  cid = $arg1;
  sel = $arg2;
}
probe qemu.user.aarch64.pci_nvme_ns_attachment_attach = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ns_attachment_attach")
{
  cntlid = $arg1;
  nsid = $arg2;
}
probe qemu.user.aarch64.pci_nvme_enqueue_event = process("/usr/bin/qemu-aarch64").mark("pci_nvme_enqueue_event")
{
  typ = $arg1;
  info = $arg2;
  log_page = $arg3;
}
probe qemu.user.aarch64.pci_nvme_enqueue_event_noqueue = process("/usr/bin/qemu-aarch64").mark("pci_nvme_enqueue_event_noqueue")
{
  queued = $arg1;
}
probe qemu.user.aarch64.pci_nvme_enqueue_event_masked = process("/usr/bin/qemu-aarch64").mark("pci_nvme_enqueue_event_masked")
{
  typ = $arg1;
}
probe qemu.user.aarch64.pci_nvme_no_outstanding_aers = process("/usr/bin/qemu-aarch64").mark("pci_nvme_no_outstanding_aers")
{
}
probe qemu.user.aarch64.pci_nvme_enqueue_req_completion = process("/usr/bin/qemu-aarch64").mark("pci_nvme_enqueue_req_completion")
{
  cid = $arg1;
  cqid = $arg2;
  dw0 = $arg3;
  dw1 = $arg4;
  status = $arg5;
}
probe qemu.user.aarch64.pci_nvme_eventidx_cq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_eventidx_cq")
{
  cqid = $arg1;
  new_eventidx = $arg2;
}
probe qemu.user.aarch64.pci_nvme_eventidx_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_eventidx_sq")
{
  sqid = $arg1;
  new_eventidx = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_read = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_write = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_write")
{
  addr = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.pci_nvme_mmio_doorbell_cq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_doorbell_cq")
{
  cqid = $arg1;
  new_head = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_doorbell_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_doorbell_sq")
{
  sqid = $arg1;
  new_tail = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_intm_set = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_intm_set")
{
  data = $arg1;
  new_mask = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_intm_clr = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_intm_clr")
{
  data = $arg1;
  new_mask = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_cfg = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_cfg")
{
  data = $arg1;
}
probe qemu.user.aarch64.pci_nvme_mmio_aqattr = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_aqattr")
{
  data = $arg1;
}
probe qemu.user.aarch64.pci_nvme_mmio_asqaddr = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_asqaddr")
{
  data = $arg1;
}
probe qemu.user.aarch64.pci_nvme_mmio_acqaddr = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_acqaddr")
{
  data = $arg1;
}
probe qemu.user.aarch64.pci_nvme_mmio_asqaddr_hi = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_asqaddr_hi")
{
  data = $arg1;
  new_addr = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_acqaddr_hi = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_acqaddr_hi")
{
  data = $arg1;
  new_addr = $arg2;
}
probe qemu.user.aarch64.pci_nvme_mmio_start_success = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_start_success")
{
}
probe qemu.user.aarch64.pci_nvme_mmio_stopped = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_stopped")
{
}
probe qemu.user.aarch64.pci_nvme_mmio_shutdown_set = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_shutdown_set")
{
}
probe qemu.user.aarch64.pci_nvme_mmio_shutdown_cleared = process("/usr/bin/qemu-aarch64").mark("pci_nvme_mmio_shutdown_cleared")
{
}
probe qemu.user.aarch64.pci_nvme_shadow_doorbell_cq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_shadow_doorbell_cq")
{
  cqid = $arg1;
  new_shadow_doorbell = $arg2;
}
probe qemu.user.aarch64.pci_nvme_shadow_doorbell_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_shadow_doorbell_sq")
{
  sqid = $arg1;
  new_shadow_doorbell = $arg2;
}
probe qemu.user.aarch64.pci_nvme_open_zone = process("/usr/bin/qemu-aarch64").mark("pci_nvme_open_zone")
{
  slba = $arg1;
  zone_idx = $arg2;
  all = $arg3;
}
probe qemu.user.aarch64.pci_nvme_close_zone = process("/usr/bin/qemu-aarch64").mark("pci_nvme_close_zone")
{
  slba = $arg1;
  zone_idx = $arg2;
  all = $arg3;
}
probe qemu.user.aarch64.pci_nvme_finish_zone = process("/usr/bin/qemu-aarch64").mark("pci_nvme_finish_zone")
{
  slba = $arg1;
  zone_idx = $arg2;
  all = $arg3;
}
probe qemu.user.aarch64.pci_nvme_reset_zone = process("/usr/bin/qemu-aarch64").mark("pci_nvme_reset_zone")
{
  slba = $arg1;
  zone_idx = $arg2;
  all = $arg3;
}
probe qemu.user.aarch64.pci_nvme_zns_zone_reset = process("/usr/bin/qemu-aarch64").mark("pci_nvme_zns_zone_reset")
{
  zslba = $arg1;
}
probe qemu.user.aarch64.pci_nvme_offline_zone = process("/usr/bin/qemu-aarch64").mark("pci_nvme_offline_zone")
{
  slba = $arg1;
  zone_idx = $arg2;
  all = $arg3;
}
probe qemu.user.aarch64.pci_nvme_set_descriptor_extension = process("/usr/bin/qemu-aarch64").mark("pci_nvme_set_descriptor_extension")
{
  slba = $arg1;
  zone_idx = $arg2;
}
probe qemu.user.aarch64.pci_nvme_zd_extension_set = process("/usr/bin/qemu-aarch64").mark("pci_nvme_zd_extension_set")
{
  zone_idx = $arg1;
}
probe qemu.user.aarch64.pci_nvme_clear_ns_close = process("/usr/bin/qemu-aarch64").mark("pci_nvme_clear_ns_close")
{
  state = $arg1;
  slba = $arg2;
}
probe qemu.user.aarch64.pci_nvme_clear_ns_reset = process("/usr/bin/qemu-aarch64").mark("pci_nvme_clear_ns_reset")
{
  state = $arg1;
  slba = $arg2;
}
probe qemu.user.aarch64.pci_nvme_zoned_zrwa_implicit_flush = process("/usr/bin/qemu-aarch64").mark("pci_nvme_zoned_zrwa_implicit_flush")
{
  zslba = $arg1;
  nlb = $arg2;
}
probe qemu.user.aarch64.pci_nvme_pci_reset = process("/usr/bin/qemu-aarch64").mark("pci_nvme_pci_reset")
{
}
probe qemu.user.aarch64.pci_nvme_virt_mngmt = process("/usr/bin/qemu-aarch64").mark("pci_nvme_virt_mngmt")
{
  cid = $arg1;
  act = $arg2;
  cntlid = $arg3;
  rt = $arg4;
  nr = $arg5;
}
probe qemu.user.aarch64.pci_nvme_err_mdts = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_mdts")
{
  len = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_zasl = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zasl")
{
  len = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_req_status = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_req_status")
{
  cid = $arg1;
  nsid = $arg2;
  status = $arg3;
  opc = $arg4;
}
probe qemu.user.aarch64.pci_nvme_err_addr_read = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_addr_read")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_addr_write = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_addr_write")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_cfs = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_cfs")
{
}
probe qemu.user.aarch64.pci_nvme_err_aio = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_aio")
{
  cid = $arg1;
  errname = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_copy_invalid_format = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_copy_invalid_format")
{
  format = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_sgld = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_sgld")
{
  cid = $arg1;
  typ = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_num_sgld = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_num_sgld")
{
  cid = $arg1;
  typ = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_sgl_excess_length = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_sgl_excess_length")
{
  residual = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_dma = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_dma")
{
}
probe qemu.user.aarch64.pci_nvme_err_invalid_prplist_ent = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_prplist_ent")
{
  prplist = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_prp2_align = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_prp2_align")
{
  prp2 = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_opc = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_opc")
{
  opc = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_admin_opc = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_admin_opc")
{
  opc = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_lba_range = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_lba_range")
{
  start = $arg1;
  len = $arg2;
  limit_ = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_log_page_offset = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_log_page_offset")
{
  ofs = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_cmb_invalid_cba = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_cmb_invalid_cba")
{
  cmbmsc = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_cmb_not_enabled = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_cmb_not_enabled")
{
  cmbmsc = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_unaligned_zone_cmd = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_unaligned_zone_cmd")
{
  action = $arg1;
  slba = $arg2;
  zslba = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_zone_state_transition = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_zone_state_transition")
{
  action = $arg1;
  slba = $arg2;
  attrs = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_write_not_at_wp = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_write_not_at_wp")
{
  slba = $arg1;
  zone = $arg2;
  wp = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_append_not_at_start = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_append_not_at_start")
{
  slba = $arg1;
  zone = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_zone_is_full = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zone_is_full")
{
  zslba = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_zone_is_read_only = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zone_is_read_only")
{
  zslba = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_zone_is_offline = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zone_is_offline")
{
  zslba = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_zone_boundary = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zone_boundary")
{
  slba = $arg1;
  nlb = $arg2;
  zcap = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_zone_invalid_write = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zone_invalid_write")
{
  slba = $arg1;
  wp = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_zone_write_not_ok = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zone_write_not_ok")
{
  slba = $arg1;
  nlb = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_zone_read_not_ok = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zone_read_not_ok")
{
  slba = $arg1;
  nlb = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_insuff_active_res = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_insuff_active_res")
{
  max_active = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_insuff_open_res = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_insuff_open_res")
{
  max_open = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_zd_extension_map_error = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_zd_extension_map_error")
{
  zone_idx = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_iocsci = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_iocsci")
{
  idx = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_del_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_del_sq")
{
  qid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_sq_cqid = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_sq_cqid")
{
  cqid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_sq_sqid = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_sq_sqid")
{
  sqid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_sq_size = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_sq_size")
{
  qsize = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_sq_addr = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_sq_addr")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_sq_qflags = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_sq_qflags")
{
  qflags = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_del_cq_cqid = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_del_cq_cqid")
{
  cqid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_del_cq_notempty = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_del_cq_notempty")
{
  cqid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_cq_cqid = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_cq_cqid")
{
  cqid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_cq_size = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_cq_size")
{
  size = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_cq_addr = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_cq_addr")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_cq_vector = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_cq_vector")
{
  vector = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_create_cq_qflags = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_create_cq_qflags")
{
  qflags = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_identify_cns = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_identify_cns")
{
  cns = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_getfeat = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_getfeat")
{
  dw10 = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_setfeat = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_setfeat")
{
  dw10 = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_log_page = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_log_page")
{
  cid = $arg1;
  lid = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_cq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_cq")
{
}
probe qemu.user.aarch64.pci_nvme_err_startfail_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_sq")
{
}
probe qemu.user.aarch64.pci_nvme_err_startfail_asq_misaligned = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_asq_misaligned")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_acq_misaligned = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_acq_misaligned")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_page_too_small = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_page_too_small")
{
  log2ps = $arg1;
  maxlog2ps = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_page_too_large = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_page_too_large")
{
  log2ps = $arg1;
  maxlog2ps = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_cqent_too_small = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_cqent_too_small")
{
  log2ps = $arg1;
  maxlog2ps = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_cqent_too_large = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_cqent_too_large")
{
  log2ps = $arg1;
  maxlog2ps = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_sqent_too_small = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_sqent_too_small")
{
  log2ps = $arg1;
  maxlog2ps = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_sqent_too_large = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_sqent_too_large")
{
  log2ps = $arg1;
  maxlog2ps = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_css = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_css")
{
  css = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_startfail_asqent_sz_zero = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_asqent_sz_zero")
{
}
probe qemu.user.aarch64.pci_nvme_err_startfail_acqent_sz_zero = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_acqent_sz_zero")
{
}
probe qemu.user.aarch64.pci_nvme_err_startfail_zasl_too_small = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_zasl_too_small")
{
  zasl = $arg1;
  pagesz = $arg2;
}
probe qemu.user.aarch64.pci_nvme_err_startfail = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail")
{
}
probe qemu.user.aarch64.pci_nvme_err_startfail_virt_state = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_startfail_virt_state")
{
  vq = $arg1;
  vi = $arg2;
  state = $arg3;
}
probe qemu.user.aarch64.pci_nvme_err_invalid_mgmt_action = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_invalid_mgmt_action")
{
  action = $arg1;
}
probe qemu.user.aarch64.pci_nvme_err_ignored_mmio_vf_offline = process("/usr/bin/qemu-aarch64").mark("pci_nvme_err_ignored_mmio_vf_offline")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_misaligned32 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_misaligned32")
{
  offset = $arg1;
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_toosmall = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_toosmall")
{
  offset = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_intmask_with_msix = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_intmask_with_msix")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_ro_csts = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_ro_csts")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_ssreset_w1c_unsupported = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_ssreset_w1c_unsupported")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_ssreset_unsupported = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_ssreset_unsupported")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_cmbloc_reserved = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_cmbloc_reserved")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_cmbsz_readonly = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_cmbsz_readonly")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_pmrcap_readonly = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_pmrcap_readonly")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_pmrsts_readonly = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_pmrsts_readonly")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_pmrebs_readonly = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_pmrebs_readonly")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_pmrswtp_readonly = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_pmrswtp_readonly")
{
}
probe qemu.user.aarch64.pci_nvme_ub_mmiowr_invalid = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiowr_invalid")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.pci_nvme_ub_mmiord_misaligned32 = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiord_misaligned32")
{
  offset = $arg1;
}
probe qemu.user.aarch64.pci_nvme_ub_mmiord_toosmall = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiord_toosmall")
{
  offset = $arg1;
}
probe qemu.user.aarch64.pci_nvme_ub_mmiord_invalid_ofs = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_mmiord_invalid_ofs")
{
  offset = $arg1;
}
probe qemu.user.aarch64.pci_nvme_ub_db_wr_misaligned = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_db_wr_misaligned")
{
  offset = $arg1;
}
probe qemu.user.aarch64.pci_nvme_ub_db_wr_invalid_cq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_db_wr_invalid_cq")
{
  qid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_ub_db_wr_invalid_cqhead = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_db_wr_invalid_cqhead")
{
  qid = $arg1;
  new_head = $arg2;
}
probe qemu.user.aarch64.pci_nvme_ub_db_wr_invalid_sq = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_db_wr_invalid_sq")
{
  qid = $arg1;
}
probe qemu.user.aarch64.pci_nvme_ub_db_wr_invalid_sqtail = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_db_wr_invalid_sqtail")
{
  qid = $arg1;
  new_tail = $arg2;
}
probe qemu.user.aarch64.pci_nvme_ub_unknown_css_value = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_unknown_css_value")
{
}
probe qemu.user.aarch64.pci_nvme_ub_too_many_mappings = process("/usr/bin/qemu-aarch64").mark("pci_nvme_ub_too_many_mappings")
{
}
probe qemu.user.aarch64.nvram_read = process("/usr/bin/qemu-aarch64").mark("nvram_read")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.nvram_write = process("/usr/bin/qemu-aarch64").mark("nvram_write")
{
  addr = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.fw_cfg_select = process("/usr/bin/qemu-aarch64").mark("fw_cfg_select")
{
  s = $arg1;
  key_value = $arg2;
  key_name = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.fw_cfg_read = process("/usr/bin/qemu-aarch64").mark("fw_cfg_read")
{
  s = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.fw_cfg_add_bytes = process("/usr/bin/qemu-aarch64").mark("fw_cfg_add_bytes")
{
  key_value = $arg1;
  key_name = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.fw_cfg_add_file = process("/usr/bin/qemu-aarch64").mark("fw_cfg_add_file")
{
  s = $arg1;
  index = $arg2;
  name = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.fw_cfg_add_string = process("/usr/bin/qemu-aarch64").mark("fw_cfg_add_string")
{
  key_value = $arg1;
  key_name = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.fw_cfg_add_i16 = process("/usr/bin/qemu-aarch64").mark("fw_cfg_add_i16")
{
  key_value = $arg1;
  key_name = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.fw_cfg_add_i32 = process("/usr/bin/qemu-aarch64").mark("fw_cfg_add_i32")
{
  key_value = $arg1;
  key_name = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.fw_cfg_add_i64 = process("/usr/bin/qemu-aarch64").mark("fw_cfg_add_i64")
{
  key_value = $arg1;
  key_name = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.macio_nvram_read = process("/usr/bin/qemu-aarch64").mark("macio_nvram_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.macio_nvram_write = process("/usr/bin/qemu-aarch64").mark("macio_nvram_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pci_update_mappings_del = process("/usr/bin/qemu-aarch64").mark("pci_update_mappings_del")
{
  dev = $arg1;
  bus = $arg2;
  slot = $arg3;
  func = $arg4;
  bar = $arg5;
  addr = $arg6;
  size = $arg7;
}
probe qemu.user.aarch64.pci_update_mappings_add = process("/usr/bin/qemu-aarch64").mark("pci_update_mappings_add")
{
  dev = $arg1;
  bus = $arg2;
  slot = $arg3;
  func = $arg4;
  bar = $arg5;
  addr = $arg6;
  size = $arg7;
}
probe qemu.user.aarch64.pci_cfg_read = process("/usr/bin/qemu-aarch64").mark("pci_cfg_read")
{
  dev = $arg1;
  bus = $arg2;
  slot = $arg3;
  func = $arg4;
  offs = $arg5;
  val = $arg6;
}
probe qemu.user.aarch64.pci_cfg_write = process("/usr/bin/qemu-aarch64").mark("pci_cfg_write")
{
  dev = $arg1;
  bus = $arg2;
  slot = $arg3;
  func = $arg4;
  offs = $arg5;
  val = $arg6;
}
probe qemu.user.aarch64.msix_write_config = process("/usr/bin/qemu-aarch64").mark("msix_write_config")
{
  name = $arg1;
  enabled = $arg2;
  masked = $arg3;
}
probe qemu.user.aarch64.sriov_register_vfs = process("/usr/bin/qemu-aarch64").mark("sriov_register_vfs")
{
  name = $arg1;
  slot = $arg2;
  function_ = $arg3;
  num_vfs = $arg4;
}
probe qemu.user.aarch64.sriov_unregister_vfs = process("/usr/bin/qemu-aarch64").mark("sriov_unregister_vfs")
{
  name = $arg1;
  slot = $arg2;
  function_ = $arg3;
  num_vfs = $arg4;
}
probe qemu.user.aarch64.sriov_config_write = process("/usr/bin/qemu-aarch64").mark("sriov_config_write")
{
  name = $arg1;
  slot = $arg2;
  fun = $arg3;
  offset = $arg4;
  val = $arg5;
  len = $arg6;
}
probe qemu.user.aarch64.bonito_spciconf_small_access = process("/usr/bin/qemu-aarch64").mark("bonito_spciconf_small_access")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.grackle_set_irq = process("/usr/bin/qemu-aarch64").mark("grackle_set_irq")
{
  irq_num = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.mv64361_region_map = process("/usr/bin/qemu-aarch64").mark("mv64361_region_map")
{
  name = $arg1;
  poffs = $arg2;
  size = $arg3;
  moffs = $arg4;
}
probe qemu.user.aarch64.mv64361_region_enable = process("/usr/bin/qemu-aarch64").mark("mv64361_region_enable")
{
  op = $arg1;
  num = $arg2;
}
probe qemu.user.aarch64.mv64361_reg_read = process("/usr/bin/qemu-aarch64").mark("mv64361_reg_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mv64361_reg_write = process("/usr/bin/qemu-aarch64").mark("mv64361_reg_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sabre_set_request = process("/usr/bin/qemu-aarch64").mark("sabre_set_request")
{
  irq_num = $arg1;
}
probe qemu.user.aarch64.sabre_clear_request = process("/usr/bin/qemu-aarch64").mark("sabre_clear_request")
{
  irq_num = $arg1;
}
probe qemu.user.aarch64.sabre_config_write = process("/usr/bin/qemu-aarch64").mark("sabre_config_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sabre_config_read = process("/usr/bin/qemu-aarch64").mark("sabre_config_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sabre_pci_config_write = process("/usr/bin/qemu-aarch64").mark("sabre_pci_config_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sabre_pci_config_read = process("/usr/bin/qemu-aarch64").mark("sabre_pci_config_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sabre_pci_set_irq = process("/usr/bin/qemu-aarch64").mark("sabre_pci_set_irq")
{
  irq_num = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.sabre_pci_set_obio_irq = process("/usr/bin/qemu-aarch64").mark("sabre_pci_set_obio_irq")
{
  irq_num = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.unin_set_irq = process("/usr/bin/qemu-aarch64").mark("unin_set_irq")
{
  irq_num = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.unin_get_config_reg = process("/usr/bin/qemu-aarch64").mark("unin_get_config_reg")
{
  reg = $arg1;
  addr = $arg2;
  retval = $arg3;
}
probe qemu.user.aarch64.unin_data_write = process("/usr/bin/qemu-aarch64").mark("unin_data_write")
{
  addr = $arg1;
  len = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.unin_data_read = process("/usr/bin/qemu-aarch64").mark("unin_data_read")
{
  addr = $arg1;
  len = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.unin_write = process("/usr/bin/qemu-aarch64").mark("unin_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.unin_read = process("/usr/bin/qemu-aarch64").mark("unin_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pnv_phb4_xive_notify = process("/usr/bin/qemu-aarch64").mark("pnv_phb4_xive_notify")
{
  notif_port = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.pnv_phb4_xive_notify_ic = process("/usr/bin/qemu-aarch64").mark("pnv_phb4_xive_notify_ic")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.pnv_phb4_xive_notify_abt = process("/usr/bin/qemu-aarch64").mark("pnv_phb4_xive_notify_abt")
{
  notif_port = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.dino_chip_mem_valid = process("/usr/bin/qemu-aarch64").mark("dino_chip_mem_valid")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.dino_chip_read = process("/usr/bin/qemu-aarch64").mark("dino_chip_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.dino_chip_write = process("/usr/bin/qemu-aarch64").mark("dino_chip_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.spapr_pci_msi = process("/usr/bin/qemu-aarch64").mark("spapr_pci_msi")
{
  msg = $arg1;
  ca = $arg2;
}
probe qemu.user.aarch64.spapr_pci_msi_setup = process("/usr/bin/qemu-aarch64").mark("spapr_pci_msi_setup")
{
  name = $arg1;
  vector = $arg2;
  addr = $arg3;
}
probe qemu.user.aarch64.spapr_pci_rtas_ibm_change_msi = process("/usr/bin/qemu-aarch64").mark("spapr_pci_rtas_ibm_change_msi")
{
  cfg = $arg1;
  func = $arg2;
  req = $arg3;
  first = $arg4;
}
probe qemu.user.aarch64.spapr_pci_rtas_ibm_query_interrupt_source_number = process("/usr/bin/qemu-aarch64").mark("spapr_pci_rtas_ibm_query_interrupt_source_number")
{
  ioa = $arg1;
  intr = $arg2;
}
probe qemu.user.aarch64.spapr_pci_msi_write = process("/usr/bin/qemu-aarch64").mark("spapr_pci_msi_write")
{
  addr = $arg1;
  data = $arg2;
  dt_irq = $arg3;
}
probe qemu.user.aarch64.spapr_pci_lsi_set = process("/usr/bin/qemu-aarch64").mark("spapr_pci_lsi_set")
{
  busname = $arg1;
  pin = $arg2;
  irq = $arg3;
}
probe qemu.user.aarch64.spapr_pci_msi_retry = process("/usr/bin/qemu-aarch64").mark("spapr_pci_msi_retry")
{
  config_addr = $arg1;
  req_num = $arg2;
  max_irqs = $arg3;
}
probe qemu.user.aarch64.spapr_cas_continue = process("/usr/bin/qemu-aarch64").mark("spapr_cas_continue")
{
  n = $arg1;
}
probe qemu.user.aarch64.spapr_cas_pvr = process("/usr/bin/qemu-aarch64").mark("spapr_cas_pvr")
{
  cur_pvr = $arg1;
  explicit_match = $arg2;
  new_pvr = $arg3;
}
probe qemu.user.aarch64.spapr_h_resize_hpt_prepare = process("/usr/bin/qemu-aarch64").mark("spapr_h_resize_hpt_prepare")
{
  flags = $arg1;
  shift = $arg2;
}
probe qemu.user.aarch64.spapr_h_resize_hpt_commit = process("/usr/bin/qemu-aarch64").mark("spapr_h_resize_hpt_commit")
{
  flags = $arg1;
  shift = $arg2;
}
probe qemu.user.aarch64.spapr_update_dt = process("/usr/bin/qemu-aarch64").mark("spapr_update_dt")
{
  cb = $arg1;
}
probe qemu.user.aarch64.spapr_update_dt_failed_size = process("/usr/bin/qemu-aarch64").mark("spapr_update_dt_failed_size")
{
  cbold = $arg1;
  cbnew = $arg2;
  magic = $arg3;
}
probe qemu.user.aarch64.spapr_update_dt_failed_check = process("/usr/bin/qemu-aarch64").mark("spapr_update_dt_failed_check")
{
  cbold = $arg1;
  cbnew = $arg2;
  magic = $arg3;
}
probe qemu.user.aarch64.spapr_h_tpm_comm = process("/usr/bin/qemu-aarch64").mark("spapr_h_tpm_comm")
{
  device_path = $arg1;
  operation = $arg2;
}
probe qemu.user.aarch64.spapr_tpm_execute = process("/usr/bin/qemu-aarch64").mark("spapr_tpm_execute")
{
  data_in = $arg1;
  data_in_sz = $arg2;
  data_out = $arg3;
  data_out_sz = $arg4;
}
probe qemu.user.aarch64.spapr_iommu_put = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_put")
{
  liobn = $arg1;
  ioba = $arg2;
  tce = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.spapr_iommu_get = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_get")
{
  liobn = $arg1;
  ioba = $arg2;
  ret = $arg3;
  tce = $arg4;
}
probe qemu.user.aarch64.spapr_iommu_indirect = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_indirect")
{
  liobn = $arg1;
  ioba = $arg2;
  tce = $arg3;
  iobaN = $arg4;
  tceN = $arg5;
  ret = $arg6;
}
probe qemu.user.aarch64.spapr_iommu_stuff = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_stuff")
{
  liobn = $arg1;
  ioba = $arg2;
  tce_value = $arg3;
  npages = $arg4;
  ret = $arg5;
}
probe qemu.user.aarch64.spapr_iommu_pci_put = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_pci_put")
{
  liobn = $arg1;
  ioba = $arg2;
  tce = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.spapr_iommu_pci_get = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_pci_get")
{
  liobn = $arg1;
  ioba = $arg2;
  ret = $arg3;
  tce = $arg4;
}
probe qemu.user.aarch64.spapr_iommu_pci_indirect = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_pci_indirect")
{
  liobn = $arg1;
  ioba = $arg2;
  tce = $arg3;
  iobaN = $arg4;
  tceN = $arg5;
  ret = $arg6;
}
probe qemu.user.aarch64.spapr_iommu_pci_stuff = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_pci_stuff")
{
  liobn = $arg1;
  ioba = $arg2;
  tce_value = $arg3;
  npages = $arg4;
  ret = $arg5;
}
probe qemu.user.aarch64.spapr_iommu_xlate = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_xlate")
{
  liobn = $arg1;
  ioba = $arg2;
  tce = $arg3;
  perm = $arg4;
  pgsize = $arg5;
}
probe qemu.user.aarch64.spapr_iommu_new_table = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_new_table")
{
  liobn = $arg1;
  table = $arg2;
  fd = $arg3;
}
probe qemu.user.aarch64.spapr_iommu_pre_save = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_pre_save")
{
  liobn = $arg1;
  nb = $arg2;
  offs = $arg3;
  ps = $arg4;
}
probe qemu.user.aarch64.spapr_iommu_post_load = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_post_load")
{
  liobn = $arg1;
  pre_nb = $arg2;
  post_nb = $arg3;
  offs = $arg4;
  ps = $arg5;
}
probe qemu.user.aarch64.spapr_iommu_ddw_query = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_ddw_query")
{
  buid = $arg1;
  cfgaddr = $arg2;
  wa = $arg3;
  win_size = $arg4;
  pgmask = $arg5;
}
probe qemu.user.aarch64.spapr_iommu_ddw_create = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_ddw_create")
{
  buid = $arg1;
  cfgaddr = $arg2;
  pg_size = $arg3;
  req_size = $arg4;
  start = $arg5;
  liobn = $arg6;
}
probe qemu.user.aarch64.spapr_iommu_ddw_remove = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_ddw_remove")
{
  liobn = $arg1;
}
probe qemu.user.aarch64.spapr_iommu_ddw_reset = process("/usr/bin/qemu-aarch64").mark("spapr_iommu_ddw_reset")
{
  buid = $arg1;
  cfgaddr = $arg2;
}
probe qemu.user.aarch64.spapr_drc_set_isolation_state = process("/usr/bin/qemu-aarch64").mark("spapr_drc_set_isolation_state")
{
  index = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.spapr_drc_set_isolation_state_finalizing = process("/usr/bin/qemu-aarch64").mark("spapr_drc_set_isolation_state_finalizing")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_set_dr_indicator = process("/usr/bin/qemu-aarch64").mark("spapr_drc_set_dr_indicator")
{
  index = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.spapr_drc_set_allocation_state = process("/usr/bin/qemu-aarch64").mark("spapr_drc_set_allocation_state")
{
  index = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.spapr_drc_set_allocation_state_finalizing = process("/usr/bin/qemu-aarch64").mark("spapr_drc_set_allocation_state_finalizing")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_set_configured = process("/usr/bin/qemu-aarch64").mark("spapr_drc_set_configured")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_attach = process("/usr/bin/qemu-aarch64").mark("spapr_drc_attach")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_unplug_request = process("/usr/bin/qemu-aarch64").mark("spapr_drc_unplug_request")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_awaiting_quiesce = process("/usr/bin/qemu-aarch64").mark("spapr_drc_awaiting_quiesce")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_reset = process("/usr/bin/qemu-aarch64").mark("spapr_drc_reset")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_realize = process("/usr/bin/qemu-aarch64").mark("spapr_drc_realize")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_realize_child = process("/usr/bin/qemu-aarch64").mark("spapr_drc_realize_child")
{
  index = $arg1;
  childname = $arg2;
}
probe qemu.user.aarch64.spapr_drc_realize_complete = process("/usr/bin/qemu-aarch64").mark("spapr_drc_realize_complete")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_drc_unrealize = process("/usr/bin/qemu-aarch64").mark("spapr_drc_unrealize")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_ovec_parse_vector = process("/usr/bin/qemu-aarch64").mark("spapr_ovec_parse_vector")
{
  vector = $arg1;
  byte = $arg2;
  vec_len = $arg3;
  entry = $arg4;
}
probe qemu.user.aarch64.spapr_ovec_populate_dt = process("/usr/bin/qemu-aarch64").mark("spapr_ovec_populate_dt")
{
  byte = $arg1;
  vec_len = $arg2;
  entry = $arg3;
}
probe qemu.user.aarch64.spapr_rtas_get_sensor_state_not_supported = process("/usr/bin/qemu-aarch64").mark("spapr_rtas_get_sensor_state_not_supported")
{
  index = $arg1;
  type = $arg2;
}
probe qemu.user.aarch64.spapr_rtas_get_sensor_state_invalid = process("/usr/bin/qemu-aarch64").mark("spapr_rtas_get_sensor_state_invalid")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_rtas_ibm_configure_connector_invalid = process("/usr/bin/qemu-aarch64").mark("spapr_rtas_ibm_configure_connector_invalid")
{
  index = $arg1;
}
probe qemu.user.aarch64.spapr_vio_h_reg_crq = process("/usr/bin/qemu-aarch64").mark("spapr_vio_h_reg_crq")
{
  reg = $arg1;
  queue_addr = $arg2;
  queue_len = $arg3;
}
probe qemu.user.aarch64.spapr_vio_free_crq = process("/usr/bin/qemu-aarch64").mark("spapr_vio_free_crq")
{
  reg = $arg1;
}
probe qemu.user.aarch64.vof_error_str_truncated = process("/usr/bin/qemu-aarch64").mark("vof_error_str_truncated")
{
  s = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.vof_error_param = process("/usr/bin/qemu-aarch64").mark("vof_error_param")
{
  method = $arg1;
  nargscheck = $arg2;
  nretcheck = $arg3;
  nargs = $arg4;
  nret = $arg5;
}
probe qemu.user.aarch64.vof_error_unknown_service = process("/usr/bin/qemu-aarch64").mark("vof_error_unknown_service")
{
  service = $arg1;
  nargs = $arg2;
  nret = $arg3;
}
probe qemu.user.aarch64.vof_error_unknown_method = process("/usr/bin/qemu-aarch64").mark("vof_error_unknown_method")
{
  method = $arg1;
}
probe qemu.user.aarch64.vof_error_unknown_ihandle_close = process("/usr/bin/qemu-aarch64").mark("vof_error_unknown_ihandle_close")
{
  ih = $arg1;
}
probe qemu.user.aarch64.vof_error_unknown_path = process("/usr/bin/qemu-aarch64").mark("vof_error_unknown_path")
{
  path = $arg1;
}
probe qemu.user.aarch64.vof_error_write = process("/usr/bin/qemu-aarch64").mark("vof_error_write")
{
  ih = $arg1;
}
probe qemu.user.aarch64.vof_finddevice = process("/usr/bin/qemu-aarch64").mark("vof_finddevice")
{
  path = $arg1;
  ph = $arg2;
}
probe qemu.user.aarch64.vof_claim = process("/usr/bin/qemu-aarch64").mark("vof_claim")
{
  virt = $arg1;
  size = $arg2;
  align = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.vof_release = process("/usr/bin/qemu-aarch64").mark("vof_release")
{
  virt = $arg1;
  size = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.vof_method = process("/usr/bin/qemu-aarch64").mark("vof_method")
{
  ihandle = $arg1;
  method = $arg2;
  param = $arg3;
  ret = $arg4;
  ret2 = $arg5;
}
probe qemu.user.aarch64.vof_getprop = process("/usr/bin/qemu-aarch64").mark("vof_getprop")
{
  ph = $arg1;
  prop = $arg2;
  ret = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.vof_getproplen = process("/usr/bin/qemu-aarch64").mark("vof_getproplen")
{
  ph = $arg1;
  prop = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.vof_setprop = process("/usr/bin/qemu-aarch64").mark("vof_setprop")
{
  ph = $arg1;
  prop = $arg2;
  val = $arg3;
  vallen = $arg4;
  ret = $arg5;
}
probe qemu.user.aarch64.vof_open = process("/usr/bin/qemu-aarch64").mark("vof_open")
{
  path = $arg1;
  ph = $arg2;
  ih = $arg3;
}
probe qemu.user.aarch64.vof_interpret = process("/usr/bin/qemu-aarch64").mark("vof_interpret")
{
  cmd = $arg1;
  param1 = $arg2;
  param2 = $arg3;
  ret = $arg4;
  ret2 = $arg5;
}
probe qemu.user.aarch64.vof_package_to_path = process("/usr/bin/qemu-aarch64").mark("vof_package_to_path")
{
  ph = $arg1;
  tmp = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.vof_instance_to_path = process("/usr/bin/qemu-aarch64").mark("vof_instance_to_path")
{
  ih = $arg1;
  ph = $arg2;
  tmp = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.vof_instance_to_package = process("/usr/bin/qemu-aarch64").mark("vof_instance_to_package")
{
  ih = $arg1;
  ph = $arg2;
}
probe qemu.user.aarch64.vof_write = process("/usr/bin/qemu-aarch64").mark("vof_write")
{
  ih = $arg1;
  cb = $arg2;
  msg = $arg3;
}
probe qemu.user.aarch64.vof_avail = process("/usr/bin/qemu-aarch64").mark("vof_avail")
{
  start = $arg1;
  end = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.vof_claimed = process("/usr/bin/qemu-aarch64").mark("vof_claimed")
{
  start = $arg1;
  end = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.pnv_sbe_xscom_ctrl_read = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_xscom_ctrl_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pnv_sbe_xscom_ctrl_write = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_xscom_ctrl_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pnv_sbe_xscom_mbox_read = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_xscom_mbox_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pnv_sbe_xscom_mbox_write = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_xscom_mbox_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pnv_sbe_reg_set_host_doorbell = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_reg_set_host_doorbell")
{
  val = $arg1;
}
probe qemu.user.aarch64.pnv_sbe_cmd_timer_start = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_cmd_timer_start")
{
  ns = $arg1;
}
probe qemu.user.aarch64.pnv_sbe_cmd_timer_stop = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_cmd_timer_stop")
{
}
probe qemu.user.aarch64.pnv_sbe_cmd_timer_expired = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_cmd_timer_expired")
{
}
probe qemu.user.aarch64.pnv_sbe_msg_recv = process("/usr/bin/qemu-aarch64").mark("pnv_sbe_msg_recv")
{
  cmd = $arg1;
  seq = $arg2;
  ctrl_flags = $arg3;
}
probe qemu.user.aarch64.ppc_tb_adjust = process("/usr/bin/qemu-aarch64").mark("ppc_tb_adjust")
{
  offs1 = $arg1;
  offs2 = $arg2;
  diff = $arg3;
  seconds = $arg4;
}
probe qemu.user.aarch64.ppc_tb_load = process("/usr/bin/qemu-aarch64").mark("ppc_tb_load")
{
  tb = $arg1;
}
probe qemu.user.aarch64.ppc_tb_store = process("/usr/bin/qemu-aarch64").mark("ppc_tb_store")
{
  tb = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.ppc_decr_load = process("/usr/bin/qemu-aarch64").mark("ppc_decr_load")
{
  tb = $arg1;
}
probe qemu.user.aarch64.ppc_decr_excp = process("/usr/bin/qemu-aarch64").mark("ppc_decr_excp")
{
  action = $arg1;
}
probe qemu.user.aarch64.ppc_decr_store = process("/usr/bin/qemu-aarch64").mark("ppc_decr_store")
{
  nr_bits = $arg1;
  decr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.ppc4xx_fit = process("/usr/bin/qemu-aarch64").mark("ppc4xx_fit")
{
  ir = $arg1;
  tcr = $arg2;
  tsr = $arg3;
}
probe qemu.user.aarch64.ppc4xx_pit_stop = process("/usr/bin/qemu-aarch64").mark("ppc4xx_pit_stop")
{
}
probe qemu.user.aarch64.ppc4xx_pit_start = process("/usr/bin/qemu-aarch64").mark("ppc4xx_pit_start")
{
  reload = $arg1;
}
probe qemu.user.aarch64.ppc4xx_pit = process("/usr/bin/qemu-aarch64").mark("ppc4xx_pit")
{
  ar = $arg1;
  ir = $arg2;
  tcr = $arg3;
  tsr = $arg4;
  reload = $arg5;
}
probe qemu.user.aarch64.ppc4xx_wdt = process("/usr/bin/qemu-aarch64").mark("ppc4xx_wdt")
{
  tcr = $arg1;
  tsr = $arg2;
}
probe qemu.user.aarch64.ppc40x_store_pit = process("/usr/bin/qemu-aarch64").mark("ppc40x_store_pit")
{
  value = $arg1;
}
probe qemu.user.aarch64.ppc40x_store_tcr = process("/usr/bin/qemu-aarch64").mark("ppc40x_store_tcr")
{
  value = $arg1;
}
probe qemu.user.aarch64.ppc40x_store_tsr = process("/usr/bin/qemu-aarch64").mark("ppc40x_store_tsr")
{
  value = $arg1;
}
probe qemu.user.aarch64.ppc40x_set_tb_clk = process("/usr/bin/qemu-aarch64").mark("ppc40x_set_tb_clk")
{
  value = $arg1;
}
probe qemu.user.aarch64.ppc40x_timers_init = process("/usr/bin/qemu-aarch64").mark("ppc40x_timers_init")
{
  value = $arg1;
}
probe qemu.user.aarch64.ppc_irq_set = process("/usr/bin/qemu-aarch64").mark("ppc_irq_set")
{
  env = $arg1;
  pin = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.ppc_irq_set_exit = process("/usr/bin/qemu-aarch64").mark("ppc_irq_set_exit")
{
  env = $arg1;
  irq = $arg2;
  level = $arg3;
  pending = $arg4;
  request = $arg5;
}
probe qemu.user.aarch64.ppc_irq_set_state = process("/usr/bin/qemu-aarch64").mark("ppc_irq_set_state")
{
  name = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.ppc_irq_reset = process("/usr/bin/qemu-aarch64").mark("ppc_irq_reset")
{
  name = $arg1;
}
probe qemu.user.aarch64.ppc_irq_cpu = process("/usr/bin/qemu-aarch64").mark("ppc_irq_cpu")
{
  action = $arg1;
}
probe qemu.user.aarch64.ppc_dcr_read = process("/usr/bin/qemu-aarch64").mark("ppc_dcr_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ppc_dcr_write = process("/usr/bin/qemu-aarch64").mark("ppc_dcr_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.prep_systemio_read = process("/usr/bin/qemu-aarch64").mark("prep_systemio_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.prep_systemio_write = process("/usr/bin/qemu-aarch64").mark("prep_systemio_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.rs6000mc_id_read = process("/usr/bin/qemu-aarch64").mark("rs6000mc_id_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.rs6000mc_presence_read = process("/usr/bin/qemu-aarch64").mark("rs6000mc_presence_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.rs6000mc_size_read = process("/usr/bin/qemu-aarch64").mark("rs6000mc_size_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.rs6000mc_size_write = process("/usr/bin/qemu-aarch64").mark("rs6000mc_size_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.rs6000mc_parity_read = process("/usr/bin/qemu-aarch64").mark("rs6000mc_parity_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ppc4xx_pci_map_irq = process("/usr/bin/qemu-aarch64").mark("ppc4xx_pci_map_irq")
{
  devfn = $arg1;
  irq_num = $arg2;
  slot = $arg3;
}
probe qemu.user.aarch64.ppc4xx_pci_set_irq = process("/usr/bin/qemu-aarch64").mark("ppc4xx_pci_set_irq")
{
  irq_num = $arg1;
}
probe qemu.user.aarch64.ppc440_pcix_map_irq = process("/usr/bin/qemu-aarch64").mark("ppc440_pcix_map_irq")
{
  devfn = $arg1;
  irq_num = $arg2;
  slot = $arg3;
}
probe qemu.user.aarch64.ppc440_pcix_set_irq = process("/usr/bin/qemu-aarch64").mark("ppc440_pcix_set_irq")
{
  irq_num = $arg1;
}
probe qemu.user.aarch64.ppc440_pcix_update_pim = process("/usr/bin/qemu-aarch64").mark("ppc440_pcix_update_pim")
{
  idx = $arg1;
  size = $arg2;
  la = $arg3;
}
probe qemu.user.aarch64.ppc440_pcix_update_pom = process("/usr/bin/qemu-aarch64").mark("ppc440_pcix_update_pom")
{
  idx = $arg1;
  size = $arg2;
  la = $arg3;
  pcia = $arg4;
}
probe qemu.user.aarch64.ppc440_pcix_reg_read = process("/usr/bin/qemu-aarch64").mark("ppc440_pcix_reg_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ppc440_pcix_reg_write = process("/usr/bin/qemu-aarch64").mark("ppc440_pcix_reg_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.opba_readb = process("/usr/bin/qemu-aarch64").mark("opba_readb")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.opba_writeb = process("/usr/bin/qemu-aarch64").mark("opba_writeb")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.ppc405_gpio_read = process("/usr/bin/qemu-aarch64").mark("ppc405_gpio_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.ppc405_gpio_write = process("/usr/bin/qemu-aarch64").mark("ppc405_gpio_write")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.ocm_update_mappings = process("/usr/bin/qemu-aarch64").mark("ocm_update_mappings")
{
  isarc = $arg1;
  isacntl = $arg2;
  dsarc = $arg3;
  dsacntl = $arg4;
  ocm_isarc = $arg5;
  ocm_isacntl = $arg6;
  ocm_dsarc = $arg7;
  ocm_dsacntl = $arg8;
}
probe qemu.user.aarch64.ocm_map = process("/usr/bin/qemu-aarch64").mark("ocm_map")
{
  prefix = $arg1;
  isarc = $arg2;
}
probe qemu.user.aarch64.ocm_unmap = process("/usr/bin/qemu-aarch64").mark("ocm_unmap")
{
  prefix = $arg1;
  isarc = $arg2;
}
probe qemu.user.aarch64.ppc4xx_gpt_read = process("/usr/bin/qemu-aarch64").mark("ppc4xx_gpt_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.ppc4xx_gpt_write = process("/usr/bin/qemu-aarch64").mark("ppc4xx_gpt_write")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.ppc405ep_clocks_compute = process("/usr/bin/qemu-aarch64").mark("ppc405ep_clocks_compute")
{
  param = $arg1;
  param2 = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.ppc405ep_clocks_setup = process("/usr/bin/qemu-aarch64").mark("ppc405ep_clocks_setup")
{
  trace = $arg1;
}
probe qemu.user.aarch64.ppc4xx_sdram_enable = process("/usr/bin/qemu-aarch64").mark("ppc4xx_sdram_enable")
{
  trace = $arg1;
}
probe qemu.user.aarch64.ppc4xx_sdram_unmap = process("/usr/bin/qemu-aarch64").mark("ppc4xx_sdram_unmap")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.ppc4xx_sdram_map = process("/usr/bin/qemu-aarch64").mark("ppc4xx_sdram_map")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.ppc4xx_sdram_init = process("/usr/bin/qemu-aarch64").mark("ppc4xx_sdram_init")
{
  base = $arg1;
  size = $arg2;
  bcr = $arg3;
}
probe qemu.user.aarch64.rdma_check_dev_attr = process("/usr/bin/qemu-aarch64").mark("rdma_check_dev_attr")
{
  name = $arg1;
  max_bk = $arg2;
  max_fe = $arg3;
}
probe qemu.user.aarch64.rdma_create_ah_cache_hit = process("/usr/bin/qemu-aarch64").mark("rdma_create_ah_cache_hit")
{
  subnet = $arg1;
  if_id = $arg2;
}
probe qemu.user.aarch64.rdma_create_ah_cache_miss = process("/usr/bin/qemu-aarch64").mark("rdma_create_ah_cache_miss")
{
  subnet = $arg1;
  if_id = $arg2;
}
probe qemu.user.aarch64.rdma_poll_cq = process("/usr/bin/qemu-aarch64").mark("rdma_poll_cq")
{
  ne = $arg1;
  ibcq = $arg2;
}
probe qemu.user.aarch64.rdmacm_mux = process("/usr/bin/qemu-aarch64").mark("rdmacm_mux")
{
  title = $arg1;
  msg_type = $arg2;
  op_code = $arg3;
}
probe qemu.user.aarch64.rdmacm_mux_check_op_status = process("/usr/bin/qemu-aarch64").mark("rdmacm_mux_check_op_status")
{
  msg_type = $arg1;
  op_code = $arg2;
  err_code = $arg3;
}
probe qemu.user.aarch64.rdma_mad_message = process("/usr/bin/qemu-aarch64").mark("rdma_mad_message")
{
  title = $arg1;
  len = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.rdma_backend_rc_qp_state_init = process("/usr/bin/qemu-aarch64").mark("rdma_backend_rc_qp_state_init")
{
  qpn = $arg1;
}
probe qemu.user.aarch64.rdma_backend_ud_qp_state_init = process("/usr/bin/qemu-aarch64").mark("rdma_backend_ud_qp_state_init")
{
  qpn = $arg1;
  qkey = $arg2;
}
probe qemu.user.aarch64.rdma_backend_rc_qp_state_rtr = process("/usr/bin/qemu-aarch64").mark("rdma_backend_rc_qp_state_rtr")
{
  qpn = $arg1;
  subnet = $arg2;
  ifid = $arg3;
  sgid_idx = $arg4;
  dqpn = $arg5;
  rq_psn = $arg6;
}
probe qemu.user.aarch64.rdma_backend_ud_qp_state_rtr = process("/usr/bin/qemu-aarch64").mark("rdma_backend_ud_qp_state_rtr")
{
  qpn = $arg1;
  qkey = $arg2;
}
probe qemu.user.aarch64.rdma_backend_rc_qp_state_rts = process("/usr/bin/qemu-aarch64").mark("rdma_backend_rc_qp_state_rts")
{
  qpn = $arg1;
  sq_psn = $arg2;
}
probe qemu.user.aarch64.rdma_backend_ud_qp_state_rts = process("/usr/bin/qemu-aarch64").mark("rdma_backend_ud_qp_state_rts")
{
  qpn = $arg1;
  sq_psn = $arg2;
  qkey = $arg3;
}
probe qemu.user.aarch64.rdma_backend_get_gid_index = process("/usr/bin/qemu-aarch64").mark("rdma_backend_get_gid_index")
{
  subnet = $arg1;
  ifid = $arg2;
  gid_idx = $arg3;
}
probe qemu.user.aarch64.rdma_backend_gid_change = process("/usr/bin/qemu-aarch64").mark("rdma_backend_gid_change")
{
  op = $arg1;
  subnet = $arg2;
  ifid = $arg3;
}
probe qemu.user.aarch64.rdma_res_tbl_get = process("/usr/bin/qemu-aarch64").mark("rdma_res_tbl_get")
{
  name = $arg1;
  handle = $arg2;
}
probe qemu.user.aarch64.rdma_res_tbl_alloc = process("/usr/bin/qemu-aarch64").mark("rdma_res_tbl_alloc")
{
  name = $arg1;
  handle = $arg2;
}
probe qemu.user.aarch64.rdma_res_tbl_dealloc = process("/usr/bin/qemu-aarch64").mark("rdma_res_tbl_dealloc")
{
  name = $arg1;
  handle = $arg2;
}
probe qemu.user.aarch64.rdma_rm_alloc_mr = process("/usr/bin/qemu-aarch64").mark("rdma_rm_alloc_mr")
{
  mr_handle = $arg1;
  host_virt = $arg2;
  guest_start = $arg3;
  guest_length = $arg4;
  access_flags = $arg5;
}
probe qemu.user.aarch64.rdma_rm_dealloc_mr = process("/usr/bin/qemu-aarch64").mark("rdma_rm_dealloc_mr")
{
  mr_handle = $arg1;
  guest_start = $arg2;
}
probe qemu.user.aarch64.rdma_rm_alloc_qp = process("/usr/bin/qemu-aarch64").mark("rdma_rm_alloc_qp")
{
  rm_qpn = $arg1;
  backend_qpn = $arg2;
  qp_type = $arg3;
}
probe qemu.user.aarch64.rdma_rm_modify_qp = process("/usr/bin/qemu-aarch64").mark("rdma_rm_modify_qp")
{
  qpn = $arg1;
  attr_mask = $arg2;
  qp_state = $arg3;
  sgid_idx = $arg4;
}
probe qemu.user.aarch64.rdma_pci_dma_map = process("/usr/bin/qemu-aarch64").mark("rdma_pci_dma_map")
{
  addr = $arg1;
  vaddr = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.rdma_pci_dma_unmap = process("/usr/bin/qemu-aarch64").mark("rdma_pci_dma_unmap")
{
  vaddr = $arg1;
}
probe qemu.user.aarch64.pvrdma_regs_read = process("/usr/bin/qemu-aarch64").mark("pvrdma_regs_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pvrdma_regs_write = process("/usr/bin/qemu-aarch64").mark("pvrdma_regs_write")
{
  addr = $arg1;
  val = $arg2;
  reg_name = $arg3;
  val_name = $arg4;
}
probe qemu.user.aarch64.pvrdma_uar_write = process("/usr/bin/qemu-aarch64").mark("pvrdma_uar_write")
{
  addr = $arg1;
  val = $arg2;
  reg_name = $arg3;
  val_name = $arg4;
  val1 = $arg5;
  val2 = $arg6;
}
probe qemu.user.aarch64.pvrdma_map_to_pdir_host_virt = process("/usr/bin/qemu-aarch64").mark("pvrdma_map_to_pdir_host_virt")
{
  vfirst = $arg1;
  vremaped = $arg2;
}
probe qemu.user.aarch64.pvrdma_map_to_pdir_next_page = process("/usr/bin/qemu-aarch64").mark("pvrdma_map_to_pdir_next_page")
{
  page_idx = $arg1;
  vnext = $arg2;
  vremaped = $arg3;
}
probe qemu.user.aarch64.pvrdma_exec_cmd = process("/usr/bin/qemu-aarch64").mark("pvrdma_exec_cmd")
{
  cmd = $arg1;
  err = $arg2;
}
probe qemu.user.aarch64.pvrdma_ring_next_elem_read_no_data = process("/usr/bin/qemu-aarch64").mark("pvrdma_ring_next_elem_read_no_data")
{
  ring_name = $arg1;
}
probe qemu.user.aarch64.pvrdma_post_cqe = process("/usr/bin/qemu-aarch64").mark("pvrdma_post_cqe")
{
  cq_handle = $arg1;
  notify = $arg2;
  wr_id = $arg3;
  qpn = $arg4;
  op_code = $arg5;
  status = $arg6;
  byte_len = $arg7;
  src_qp = $arg8;
  wc_flags = $arg9;
  vendor_err = $arg10;
}
probe qemu.user.aarch64.allwinner_rtc_read = process("/usr/bin/qemu-aarch64").mark("allwinner_rtc_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.allwinner_rtc_write = process("/usr/bin/qemu-aarch64").mark("allwinner_rtc_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sun4v_rtc_read = process("/usr/bin/qemu-aarch64").mark("sun4v_rtc_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sun4v_rtc_write = process("/usr/bin/qemu-aarch64").mark("sun4v_rtc_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.xlnx_zynqmp_rtc_gettime = process("/usr/bin/qemu-aarch64").mark("xlnx_zynqmp_rtc_gettime")
{
  year = $arg1;
  month = $arg2;
  day = $arg3;
  hour = $arg4;
  min = $arg5;
  sec = $arg6;
}
probe qemu.user.aarch64.pl031_irq_state = process("/usr/bin/qemu-aarch64").mark("pl031_irq_state")
{
  level = $arg1;
}
probe qemu.user.aarch64.pl031_read = process("/usr/bin/qemu-aarch64").mark("pl031_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pl031_write = process("/usr/bin/qemu-aarch64").mark("pl031_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pl031_alarm_raised = process("/usr/bin/qemu-aarch64").mark("pl031_alarm_raised")
{
}
probe qemu.user.aarch64.pl031_set_alarm = process("/usr/bin/qemu-aarch64").mark("pl031_set_alarm")
{
  ticks = $arg1;
}
probe qemu.user.aarch64.aspeed_rtc_read = process("/usr/bin/qemu-aarch64").mark("aspeed_rtc_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.aspeed_rtc_write = process("/usr/bin/qemu-aarch64").mark("aspeed_rtc_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.m48txx_nvram_io_read = process("/usr/bin/qemu-aarch64").mark("m48txx_nvram_io_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.m48txx_nvram_io_write = process("/usr/bin/qemu-aarch64").mark("m48txx_nvram_io_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.m48txx_nvram_mem_read = process("/usr/bin/qemu-aarch64").mark("m48txx_nvram_mem_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.m48txx_nvram_mem_write = process("/usr/bin/qemu-aarch64").mark("m48txx_nvram_mem_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.goldfish_rtc_read = process("/usr/bin/qemu-aarch64").mark("goldfish_rtc_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.goldfish_rtc_write = process("/usr/bin/qemu-aarch64").mark("goldfish_rtc_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.css_enable_facility = process("/usr/bin/qemu-aarch64").mark("css_enable_facility")
{
  facility = $arg1;
}
probe qemu.user.aarch64.css_crw = process("/usr/bin/qemu-aarch64").mark("css_crw")
{
  rsc = $arg1;
  erc = $arg2;
  rsid = $arg3;
  chained = $arg4;
}
probe qemu.user.aarch64.css_chpid_add = process("/usr/bin/qemu-aarch64").mark("css_chpid_add")
{
  cssid = $arg1;
  chpid = $arg2;
  type = $arg3;
}
probe qemu.user.aarch64.css_new_image = process("/usr/bin/qemu-aarch64").mark("css_new_image")
{
  cssid = $arg1;
  default_cssid = $arg2;
}
probe qemu.user.aarch64.css_assign_subch = process("/usr/bin/qemu-aarch64").mark("css_assign_subch")
{
  do_assign = $arg1;
  cssid = $arg2;
  ssid = $arg3;
  schid = $arg4;
  devno = $arg5;
}
probe qemu.user.aarch64.css_io_interrupt = process("/usr/bin/qemu-aarch64").mark("css_io_interrupt")
{
  cssid = $arg1;
  ssid = $arg2;
  schid = $arg3;
  intparm = $arg4;
  isc = $arg5;
  conditional = $arg6;
}
probe qemu.user.aarch64.css_adapter_interrupt = process("/usr/bin/qemu-aarch64").mark("css_adapter_interrupt")
{
  isc = $arg1;
}
probe qemu.user.aarch64.css_do_sic = process("/usr/bin/qemu-aarch64").mark("css_do_sic")
{
  mode = $arg1;
  isc = $arg2;
}
probe qemu.user.aarch64.virtio_ccw_interpret_ccw = process("/usr/bin/qemu-aarch64").mark("virtio_ccw_interpret_ccw")
{
  cssid = $arg1;
  ssid = $arg2;
  schid = $arg3;
  cmd_code = $arg4;
}
probe qemu.user.aarch64.virtio_ccw_new_device = process("/usr/bin/qemu-aarch64").mark("virtio_ccw_new_device")
{
  cssid = $arg1;
  ssid = $arg2;
  schid = $arg3;
  devno = $arg4;
  devno_mode = $arg5;
}
probe qemu.user.aarch64.virtio_ccw_set_ind = process("/usr/bin/qemu-aarch64").mark("virtio_ccw_set_ind")
{
  ind_loc = $arg1;
  ind_old = $arg2;
  ind_new = $arg3;
}
probe qemu.user.aarch64.s390_pci_clp_cap = process("/usr/bin/qemu-aarch64").mark("s390_pci_clp_cap")
{
  id = $arg1;
  cap = $arg2;
}
probe qemu.user.aarch64.s390_pci_clp_cap_size = process("/usr/bin/qemu-aarch64").mark("s390_pci_clp_cap_size")
{
  id = $arg1;
  size = $arg2;
  cap = $arg3;
}
probe qemu.user.aarch64.s390_pci_clp_dev_info = process("/usr/bin/qemu-aarch64").mark("s390_pci_clp_dev_info")
{
  id = $arg1;
}
probe qemu.user.aarch64.scsi_req_alloc = process("/usr/bin/qemu-aarch64").mark("scsi_req_alloc")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.scsi_req_cancel = process("/usr/bin/qemu-aarch64").mark("scsi_req_cancel")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.scsi_req_data = process("/usr/bin/qemu-aarch64").mark("scsi_req_data")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.scsi_req_data_canceled = process("/usr/bin/qemu-aarch64").mark("scsi_req_data_canceled")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.scsi_req_dequeue = process("/usr/bin/qemu-aarch64").mark("scsi_req_dequeue")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.scsi_req_continue = process("/usr/bin/qemu-aarch64").mark("scsi_req_continue")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.scsi_req_continue_canceled = process("/usr/bin/qemu-aarch64").mark("scsi_req_continue_canceled")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.scsi_req_parsed = process("/usr/bin/qemu-aarch64").mark("scsi_req_parsed")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
  mode = $arg5;
  xfer = $arg6;
}
probe qemu.user.aarch64.scsi_req_parsed_lba = process("/usr/bin/qemu-aarch64").mark("scsi_req_parsed_lba")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
  lba = $arg5;
}
probe qemu.user.aarch64.scsi_req_parse_bad = process("/usr/bin/qemu-aarch64").mark("scsi_req_parse_bad")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
}
probe qemu.user.aarch64.scsi_req_build_sense = process("/usr/bin/qemu-aarch64").mark("scsi_req_build_sense")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  key = $arg4;
  asc = $arg5;
  ascq = $arg6;
}
probe qemu.user.aarch64.scsi_device_set_ua = process("/usr/bin/qemu-aarch64").mark("scsi_device_set_ua")
{
  target = $arg1;
  lun = $arg2;
  key = $arg3;
  asc = $arg4;
  ascq = $arg5;
}
probe qemu.user.aarch64.scsi_report_luns = process("/usr/bin/qemu-aarch64").mark("scsi_report_luns")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.scsi_inquiry = process("/usr/bin/qemu-aarch64").mark("scsi_inquiry")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cdb1 = $arg4;
  cdb2 = $arg5;
}
probe qemu.user.aarch64.scsi_test_unit_ready = process("/usr/bin/qemu-aarch64").mark("scsi_test_unit_ready")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.scsi_request_sense = process("/usr/bin/qemu-aarch64").mark("scsi_request_sense")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.user.aarch64.mptsas_command_complete = process("/usr/bin/qemu-aarch64").mark("mptsas_command_complete")
{
  dev = $arg1;
  ctx = $arg2;
  status = $arg3;
  resid = $arg4;
}
probe qemu.user.aarch64.mptsas_diag_read = process("/usr/bin/qemu-aarch64").mark("mptsas_diag_read")
{
  dev = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.mptsas_diag_write = process("/usr/bin/qemu-aarch64").mark("mptsas_diag_write")
{
  dev = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.mptsas_irq_intx = process("/usr/bin/qemu-aarch64").mark("mptsas_irq_intx")
{
  dev = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.mptsas_irq_msi = process("/usr/bin/qemu-aarch64").mark("mptsas_irq_msi")
{
  dev = $arg1;
}
probe qemu.user.aarch64.mptsas_mmio_read = process("/usr/bin/qemu-aarch64").mark("mptsas_mmio_read")
{
  dev = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.mptsas_mmio_unhandled_read = process("/usr/bin/qemu-aarch64").mark("mptsas_mmio_unhandled_read")
{
  dev = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.mptsas_mmio_unhandled_write = process("/usr/bin/qemu-aarch64").mark("mptsas_mmio_unhandled_write")
{
  dev = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.mptsas_mmio_write = process("/usr/bin/qemu-aarch64").mark("mptsas_mmio_write")
{
  dev = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.mptsas_process_message = process("/usr/bin/qemu-aarch64").mark("mptsas_process_message")
{
  dev = $arg1;
  msg = $arg2;
  ctx = $arg3;
}
probe qemu.user.aarch64.mptsas_process_scsi_io_request = process("/usr/bin/qemu-aarch64").mark("mptsas_process_scsi_io_request")
{
  dev = $arg1;
  bus = $arg2;
  target = $arg3;
  lun = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.mptsas_reset = process("/usr/bin/qemu-aarch64").mark("mptsas_reset")
{
  dev = $arg1;
}
probe qemu.user.aarch64.mptsas_scsi_overflow = process("/usr/bin/qemu-aarch64").mark("mptsas_scsi_overflow")
{
  dev = $arg1;
  ctx = $arg2;
  req = $arg3;
  found = $arg4;
}
probe qemu.user.aarch64.mptsas_sgl_overflow = process("/usr/bin/qemu-aarch64").mark("mptsas_sgl_overflow")
{
  dev = $arg1;
  ctx = $arg2;
  req = $arg3;
  found = $arg4;
}
probe qemu.user.aarch64.mptsas_unhandled_cmd = process("/usr/bin/qemu-aarch64").mark("mptsas_unhandled_cmd")
{
  dev = $arg1;
  ctx = $arg2;
  msg_cmd = $arg3;
}
probe qemu.user.aarch64.mptsas_unhandled_doorbell_cmd = process("/usr/bin/qemu-aarch64").mark("mptsas_unhandled_doorbell_cmd")
{
  dev = $arg1;
  cmd = $arg2;
}
probe qemu.user.aarch64.mptsas_config_sas_device = process("/usr/bin/qemu-aarch64").mark("mptsas_config_sas_device")
{
  dev = $arg1;
  address = $arg2;
  port = $arg3;
  phy_handle = $arg4;
  dev_handle = $arg5;
  page = $arg6;
}
probe qemu.user.aarch64.mptsas_config_sas_phy = process("/usr/bin/qemu-aarch64").mark("mptsas_config_sas_phy")
{
  dev = $arg1;
  address = $arg2;
  port = $arg3;
  phy_handle = $arg4;
  dev_handle = $arg5;
  page = $arg6;
}
probe qemu.user.aarch64.megasas_init_firmware = process("/usr/bin/qemu-aarch64").mark("megasas_init_firmware")
{
  pa = $arg1;
}
probe qemu.user.aarch64.megasas_init_queue = process("/usr/bin/qemu-aarch64").mark("megasas_init_queue")
{
  queue_pa = $arg1;
  queue_len = $arg2;
  head = $arg3;
  tail = $arg4;
  flags = $arg5;
}
probe qemu.user.aarch64.megasas_initq_map_failed = process("/usr/bin/qemu-aarch64").mark("megasas_initq_map_failed")
{
  frame = $arg1;
}
probe qemu.user.aarch64.megasas_initq_mapped = process("/usr/bin/qemu-aarch64").mark("megasas_initq_mapped")
{
  pa = $arg1;
}
probe qemu.user.aarch64.megasas_initq_mismatch = process("/usr/bin/qemu-aarch64").mark("megasas_initq_mismatch")
{
  queue_len = $arg1;
  fw_cmds = $arg2;
}
probe qemu.user.aarch64.megasas_qf_mapped = process("/usr/bin/qemu-aarch64").mark("megasas_qf_mapped")
{
  index = $arg1;
}
probe qemu.user.aarch64.megasas_qf_new = process("/usr/bin/qemu-aarch64").mark("megasas_qf_new")
{
  index = $arg1;
  frame = $arg2;
}
probe qemu.user.aarch64.megasas_qf_busy = process("/usr/bin/qemu-aarch64").mark("megasas_qf_busy")
{
  pa = $arg1;
}
probe qemu.user.aarch64.megasas_qf_enqueue = process("/usr/bin/qemu-aarch64").mark("megasas_qf_enqueue")
{
  index = $arg1;
  count = $arg2;
  context = $arg3;
  head = $arg4;
  tail = $arg5;
  busy = $arg6;
}
probe qemu.user.aarch64.megasas_qf_update = process("/usr/bin/qemu-aarch64").mark("megasas_qf_update")
{
  head = $arg1;
  tail = $arg2;
  busy = $arg3;
}
probe qemu.user.aarch64.megasas_qf_map_failed = process("/usr/bin/qemu-aarch64").mark("megasas_qf_map_failed")
{
  cmd = $arg1;
  frame = $arg2;
}
probe qemu.user.aarch64.megasas_qf_complete_noirq = process("/usr/bin/qemu-aarch64").mark("megasas_qf_complete_noirq")
{
  context = $arg1;
}
probe qemu.user.aarch64.megasas_qf_complete = process("/usr/bin/qemu-aarch64").mark("megasas_qf_complete")
{
  context = $arg1;
  head = $arg2;
  tail = $arg3;
  busy = $arg4;
}
probe qemu.user.aarch64.megasas_frame_busy = process("/usr/bin/qemu-aarch64").mark("megasas_frame_busy")
{
  addr = $arg1;
}
probe qemu.user.aarch64.megasas_unhandled_frame_cmd = process("/usr/bin/qemu-aarch64").mark("megasas_unhandled_frame_cmd")
{
  cmd = $arg1;
  frame_cmd = $arg2;
}
probe qemu.user.aarch64.megasas_handle_scsi = process("/usr/bin/qemu-aarch64").mark("megasas_handle_scsi")
{
  frame = $arg1;
  bus = $arg2;
  dev = $arg3;
  lun = $arg4;
  sdev = $arg5;
  size = $arg6;
}
probe qemu.user.aarch64.megasas_scsi_target_not_present = process("/usr/bin/qemu-aarch64").mark("megasas_scsi_target_not_present")
{
  frame = $arg1;
  bus = $arg2;
  dev = $arg3;
  lun = $arg4;
}
probe qemu.user.aarch64.megasas_scsi_invalid_cdb_len = process("/usr/bin/qemu-aarch64").mark("megasas_scsi_invalid_cdb_len")
{
  frame = $arg1;
  bus = $arg2;
  dev = $arg3;
  lun = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.megasas_iov_read_overflow = process("/usr/bin/qemu-aarch64").mark("megasas_iov_read_overflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.megasas_iov_write_overflow = process("/usr/bin/qemu-aarch64").mark("megasas_iov_write_overflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.megasas_iov_read_underflow = process("/usr/bin/qemu-aarch64").mark("megasas_iov_read_underflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.megasas_iov_write_underflow = process("/usr/bin/qemu-aarch64").mark("megasas_iov_write_underflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.megasas_scsi_req_alloc_failed = process("/usr/bin/qemu-aarch64").mark("megasas_scsi_req_alloc_failed")
{
  frame = $arg1;
  dev = $arg2;
  lun = $arg3;
}
probe qemu.user.aarch64.megasas_scsi_read_start = process("/usr/bin/qemu-aarch64").mark("megasas_scsi_read_start")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.megasas_scsi_write_start = process("/usr/bin/qemu-aarch64").mark("megasas_scsi_write_start")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.megasas_scsi_nodata = process("/usr/bin/qemu-aarch64").mark("megasas_scsi_nodata")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.megasas_scsi_complete = process("/usr/bin/qemu-aarch64").mark("megasas_scsi_complete")
{
  cmd = $arg1;
  status = $arg2;
  len = $arg3;
  xfer = $arg4;
}
probe qemu.user.aarch64.megasas_command_complete = process("/usr/bin/qemu-aarch64").mark("megasas_command_complete")
{
  cmd = $arg1;
  status = $arg2;
  resid = $arg3;
}
probe qemu.user.aarch64.megasas_handle_io = process("/usr/bin/qemu-aarch64").mark("megasas_handle_io")
{
  cmd = $arg1;
  frame = $arg2;
  dev = $arg3;
  lun = $arg4;
  lba = $arg5;
  count = $arg6;
}
probe qemu.user.aarch64.megasas_io_target_not_present = process("/usr/bin/qemu-aarch64").mark("megasas_io_target_not_present")
{
  cmd = $arg1;
  frame = $arg2;
  dev = $arg3;
  lun = $arg4;
}
probe qemu.user.aarch64.megasas_io_read_start = process("/usr/bin/qemu-aarch64").mark("megasas_io_read_start")
{
  cmd = $arg1;
  lba = $arg2;
  count = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.megasas_io_write_start = process("/usr/bin/qemu-aarch64").mark("megasas_io_write_start")
{
  cmd = $arg1;
  lba = $arg2;
  count = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.megasas_io_complete = process("/usr/bin/qemu-aarch64").mark("megasas_io_complete")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.megasas_iovec_sgl_overflow = process("/usr/bin/qemu-aarch64").mark("megasas_iovec_sgl_overflow")
{
  cmd = $arg1;
  index = $arg2;
  limit_ = $arg3;
}
probe qemu.user.aarch64.megasas_iovec_sgl_underflow = process("/usr/bin/qemu-aarch64").mark("megasas_iovec_sgl_underflow")
{
  cmd = $arg1;
  index = $arg2;
}
probe qemu.user.aarch64.megasas_iovec_sgl_invalid = process("/usr/bin/qemu-aarch64").mark("megasas_iovec_sgl_invalid")
{
  cmd = $arg1;
  index = $arg2;
  pa = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.megasas_iovec_overflow = process("/usr/bin/qemu-aarch64").mark("megasas_iovec_overflow")
{
  cmd = $arg1;
  len = $arg2;
  limit_ = $arg3;
}
probe qemu.user.aarch64.megasas_iovec_underflow = process("/usr/bin/qemu-aarch64").mark("megasas_iovec_underflow")
{
  cmd = $arg1;
  len = $arg2;
  limit_ = $arg3;
}
probe qemu.user.aarch64.megasas_handle_dcmd = process("/usr/bin/qemu-aarch64").mark("megasas_handle_dcmd")
{
  cmd = $arg1;
  opcode = $arg2;
}
probe qemu.user.aarch64.megasas_finish_dcmd = process("/usr/bin/qemu-aarch64").mark("megasas_finish_dcmd")
{
  cmd = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_req_alloc_failed = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_req_alloc_failed")
{
  cmd = $arg1;
  desc = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_internal_submit = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_internal_submit")
{
  cmd = $arg1;
  desc = $arg2;
  dev = $arg3;
}
probe qemu.user.aarch64.megasas_dcmd_internal_finish = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_internal_finish")
{
  cmd = $arg1;
  opcode = $arg2;
  lun = $arg3;
}
probe qemu.user.aarch64.megasas_dcmd_internal_invalid = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_internal_invalid")
{
  cmd = $arg1;
  opcode = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_unhandled = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_unhandled")
{
  cmd = $arg1;
  opcode = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.megasas_dcmd_zero_sge = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_zero_sge")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.megasas_dcmd_invalid_sge = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_invalid_sge")
{
  cmd = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_invalid_xfer_len = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_invalid_xfer_len")
{
  cmd = $arg1;
  size = $arg2;
  max = $arg3;
}
probe qemu.user.aarch64.megasas_dcmd_enter = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_enter")
{
  cmd = $arg1;
  dcmd = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.megasas_dcmd_dummy = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_dummy")
{
  cmd = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_set_fw_time = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_set_fw_time")
{
  cmd = $arg1;
  time = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_pd_get_list = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_pd_get_list")
{
  cmd = $arg1;
  num = $arg2;
  max = $arg3;
  offset = $arg4;
}
probe qemu.user.aarch64.megasas_dcmd_ld_get_list = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_ld_get_list")
{
  cmd = $arg1;
  num = $arg2;
  max = $arg3;
}
probe qemu.user.aarch64.megasas_dcmd_ld_get_info = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_ld_get_info")
{
  cmd = $arg1;
  ld_id = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_ld_list_query = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_ld_list_query")
{
  cmd = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_pd_get_info = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_pd_get_info")
{
  cmd = $arg1;
  pd_id = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_pd_list_query = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_pd_list_query")
{
  cmd = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_reset_ld = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_reset_ld")
{
  cmd = $arg1;
  target_id = $arg2;
}
probe qemu.user.aarch64.megasas_dcmd_unsupported = process("/usr/bin/qemu-aarch64").mark("megasas_dcmd_unsupported")
{
  cmd = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.megasas_abort_frame = process("/usr/bin/qemu-aarch64").mark("megasas_abort_frame")
{
  cmd = $arg1;
  abort_cmd = $arg2;
}
probe qemu.user.aarch64.megasas_abort_no_cmd = process("/usr/bin/qemu-aarch64").mark("megasas_abort_no_cmd")
{
  cmd = $arg1;
  context = $arg2;
}
probe qemu.user.aarch64.megasas_abort_invalid_context = process("/usr/bin/qemu-aarch64").mark("megasas_abort_invalid_context")
{
  cmd = $arg1;
  context = $arg2;
  abort_cmd = $arg3;
}
probe qemu.user.aarch64.megasas_reset = process("/usr/bin/qemu-aarch64").mark("megasas_reset")
{
  fw_state = $arg1;
}
probe qemu.user.aarch64.megasas_init = process("/usr/bin/qemu-aarch64").mark("megasas_init")
{
  sges = $arg1;
  cmds = $arg2;
  mode = $arg3;
}
probe qemu.user.aarch64.megasas_msix_raise = process("/usr/bin/qemu-aarch64").mark("megasas_msix_raise")
{
  vector = $arg1;
}
probe qemu.user.aarch64.megasas_msi_raise = process("/usr/bin/qemu-aarch64").mark("megasas_msi_raise")
{
  vector = $arg1;
}
probe qemu.user.aarch64.megasas_irq_lower = process("/usr/bin/qemu-aarch64").mark("megasas_irq_lower")
{
}
probe qemu.user.aarch64.megasas_irq_raise = process("/usr/bin/qemu-aarch64").mark("megasas_irq_raise")
{
}
probe qemu.user.aarch64.megasas_intr_enabled = process("/usr/bin/qemu-aarch64").mark("megasas_intr_enabled")
{
}
probe qemu.user.aarch64.megasas_intr_disabled = process("/usr/bin/qemu-aarch64").mark("megasas_intr_disabled")
{
}
probe qemu.user.aarch64.megasas_msix_enabled = process("/usr/bin/qemu-aarch64").mark("megasas_msix_enabled")
{
  vector = $arg1;
}
probe qemu.user.aarch64.megasas_msi_enabled = process("/usr/bin/qemu-aarch64").mark("megasas_msi_enabled")
{
  vector = $arg1;
}
probe qemu.user.aarch64.megasas_mmio_readl = process("/usr/bin/qemu-aarch64").mark("megasas_mmio_readl")
{
  reg = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.megasas_mmio_invalid_readl = process("/usr/bin/qemu-aarch64").mark("megasas_mmio_invalid_readl")
{
  addr = $arg1;
}
probe qemu.user.aarch64.megasas_mmio_writel = process("/usr/bin/qemu-aarch64").mark("megasas_mmio_writel")
{
  reg = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.megasas_mmio_invalid_writel = process("/usr/bin/qemu-aarch64").mark("megasas_mmio_invalid_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pvscsi_ring_init_data = process("/usr/bin/qemu-aarch64").mark("pvscsi_ring_init_data")
{
  txr_len_log2 = $arg1;
  rxr_len_log2 = $arg2;
}
probe qemu.user.aarch64.pvscsi_ring_init_msg = process("/usr/bin/qemu-aarch64").mark("pvscsi_ring_init_msg")
{
  len_log2 = $arg1;
}
probe qemu.user.aarch64.pvscsi_ring_flush_cmp = process("/usr/bin/qemu-aarch64").mark("pvscsi_ring_flush_cmp")
{
  filled_cmp_ptr = $arg1;
}
probe qemu.user.aarch64.pvscsi_ring_flush_msg = process("/usr/bin/qemu-aarch64").mark("pvscsi_ring_flush_msg")
{
  filled_cmp_ptr = $arg1;
}
probe qemu.user.aarch64.pvscsi_update_irq_level = process("/usr/bin/qemu-aarch64").mark("pvscsi_update_irq_level")
{
  raise = $arg1;
  mask = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.pvscsi_update_irq_msi = process("/usr/bin/qemu-aarch64").mark("pvscsi_update_irq_msi")
{
}
probe qemu.user.aarch64.pvscsi_cmp_ring_put = process("/usr/bin/qemu-aarch64").mark("pvscsi_cmp_ring_put")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pvscsi_msg_ring_put = process("/usr/bin/qemu-aarch64").mark("pvscsi_msg_ring_put")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pvscsi_complete_request = process("/usr/bin/qemu-aarch64").mark("pvscsi_complete_request")
{
  context = $arg1;
  len = $arg2;
  sense_key = $arg3;
}
probe qemu.user.aarch64.pvscsi_get_sg_list = process("/usr/bin/qemu-aarch64").mark("pvscsi_get_sg_list")
{
  nsg = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.pvscsi_get_next_sg_elem = process("/usr/bin/qemu-aarch64").mark("pvscsi_get_next_sg_elem")
{
  flags = $arg1;
}
probe qemu.user.aarch64.pvscsi_command_complete_not_found = process("/usr/bin/qemu-aarch64").mark("pvscsi_command_complete_not_found")
{
  tag = $arg1;
}
probe qemu.user.aarch64.pvscsi_command_complete_data_run = process("/usr/bin/qemu-aarch64").mark("pvscsi_command_complete_data_run")
{
}
probe qemu.user.aarch64.pvscsi_command_complete_sense_len = process("/usr/bin/qemu-aarch64").mark("pvscsi_command_complete_sense_len")
{
  len = $arg1;
}
probe qemu.user.aarch64.pvscsi_convert_sglist = process("/usr/bin/qemu-aarch64").mark("pvscsi_convert_sglist")
{
  context = $arg1;
  addr = $arg2;
  resid = $arg3;
}
probe qemu.user.aarch64.pvscsi_process_req_descr = process("/usr/bin/qemu-aarch64").mark("pvscsi_process_req_descr")
{
  cmd = $arg1;
  ctx = $arg2;
}
probe qemu.user.aarch64.pvscsi_process_req_descr_unknown_device = process("/usr/bin/qemu-aarch64").mark("pvscsi_process_req_descr_unknown_device")
{
}
probe qemu.user.aarch64.pvscsi_process_req_descr_invalid_dir = process("/usr/bin/qemu-aarch64").mark("pvscsi_process_req_descr_invalid_dir")
{
}
probe qemu.user.aarch64.pvscsi_process_io = process("/usr/bin/qemu-aarch64").mark("pvscsi_process_io")
{
  addr = $arg1;
}
probe qemu.user.aarch64.pvscsi_on_cmd_noimpl = process("/usr/bin/qemu-aarch64").mark("pvscsi_on_cmd_noimpl")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.pvscsi_on_cmd_reset_dev = process("/usr/bin/qemu-aarch64").mark("pvscsi_on_cmd_reset_dev")
{
  tgt = $arg1;
  lun = $arg2;
  dev = $arg3;
}
probe qemu.user.aarch64.pvscsi_on_cmd_arrived = process("/usr/bin/qemu-aarch64").mark("pvscsi_on_cmd_arrived")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.pvscsi_on_cmd_abort = process("/usr/bin/qemu-aarch64").mark("pvscsi_on_cmd_abort")
{
  ctx = $arg1;
  tgt = $arg2;
}
probe qemu.user.aarch64.pvscsi_on_cmd_unknown = process("/usr/bin/qemu-aarch64").mark("pvscsi_on_cmd_unknown")
{
  cmd_id = $arg1;
}
probe qemu.user.aarch64.pvscsi_on_cmd_unknown_data = process("/usr/bin/qemu-aarch64").mark("pvscsi_on_cmd_unknown_data")
{
  data = $arg1;
}
probe qemu.user.aarch64.pvscsi_io_write = process("/usr/bin/qemu-aarch64").mark("pvscsi_io_write")
{
  cmd = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.pvscsi_io_write_unknown = process("/usr/bin/qemu-aarch64").mark("pvscsi_io_write_unknown")
{
  addr = $arg1;
  sz = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.pvscsi_io_read = process("/usr/bin/qemu-aarch64").mark("pvscsi_io_read")
{
  cmd = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.pvscsi_io_read_unknown = process("/usr/bin/qemu-aarch64").mark("pvscsi_io_read_unknown")
{
  addr = $arg1;
  sz = $arg2;
}
probe qemu.user.aarch64.pvscsi_init_msi_fail = process("/usr/bin/qemu-aarch64").mark("pvscsi_init_msi_fail")
{
  res = $arg1;
}
probe qemu.user.aarch64.pvscsi_state = process("/usr/bin/qemu-aarch64").mark("pvscsi_state")
{
  state = $arg1;
}
probe qemu.user.aarch64.pvscsi_tx_rings_ppn = process("/usr/bin/qemu-aarch64").mark("pvscsi_tx_rings_ppn")
{
  label = $arg1;
  ppn = $arg2;
}
probe qemu.user.aarch64.pvscsi_tx_rings_num_pages = process("/usr/bin/qemu-aarch64").mark("pvscsi_tx_rings_num_pages")
{
  label = $arg1;
  num = $arg2;
}
probe qemu.user.aarch64.esp_error_fifo_overrun = process("/usr/bin/qemu-aarch64").mark("esp_error_fifo_overrun")
{
}
probe qemu.user.aarch64.esp_error_unhandled_command = process("/usr/bin/qemu-aarch64").mark("esp_error_unhandled_command")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_error_invalid_write = process("/usr/bin/qemu-aarch64").mark("esp_error_invalid_write")
{
  val = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.esp_raise_irq = process("/usr/bin/qemu-aarch64").mark("esp_raise_irq")
{
}
probe qemu.user.aarch64.esp_lower_irq = process("/usr/bin/qemu-aarch64").mark("esp_lower_irq")
{
}
probe qemu.user.aarch64.esp_raise_drq = process("/usr/bin/qemu-aarch64").mark("esp_raise_drq")
{
}
probe qemu.user.aarch64.esp_lower_drq = process("/usr/bin/qemu-aarch64").mark("esp_lower_drq")
{
}
probe qemu.user.aarch64.esp_dma_enable = process("/usr/bin/qemu-aarch64").mark("esp_dma_enable")
{
}
probe qemu.user.aarch64.esp_dma_disable = process("/usr/bin/qemu-aarch64").mark("esp_dma_disable")
{
}
probe qemu.user.aarch64.esp_pdma_read = process("/usr/bin/qemu-aarch64").mark("esp_pdma_read")
{
  size = $arg1;
}
probe qemu.user.aarch64.esp_pdma_write = process("/usr/bin/qemu-aarch64").mark("esp_pdma_write")
{
  size = $arg1;
}
probe qemu.user.aarch64.esp_get_cmd = process("/usr/bin/qemu-aarch64").mark("esp_get_cmd")
{
  dmalen = $arg1;
  target = $arg2;
}
probe qemu.user.aarch64.esp_do_command_phase = process("/usr/bin/qemu-aarch64").mark("esp_do_command_phase")
{
  busid = $arg1;
}
probe qemu.user.aarch64.esp_do_identify = process("/usr/bin/qemu-aarch64").mark("esp_do_identify")
{
  byte = $arg1;
}
probe qemu.user.aarch64.esp_handle_satn_stop = process("/usr/bin/qemu-aarch64").mark("esp_handle_satn_stop")
{
  cmdlen = $arg1;
}
probe qemu.user.aarch64.esp_write_response = process("/usr/bin/qemu-aarch64").mark("esp_write_response")
{
  status = $arg1;
}
probe qemu.user.aarch64.esp_do_dma = process("/usr/bin/qemu-aarch64").mark("esp_do_dma")
{
  cmdlen = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.esp_command_complete = process("/usr/bin/qemu-aarch64").mark("esp_command_complete")
{
}
probe qemu.user.aarch64.esp_command_complete_deferred = process("/usr/bin/qemu-aarch64").mark("esp_command_complete_deferred")
{
}
probe qemu.user.aarch64.esp_command_complete_unexpected = process("/usr/bin/qemu-aarch64").mark("esp_command_complete_unexpected")
{
}
probe qemu.user.aarch64.esp_command_complete_fail = process("/usr/bin/qemu-aarch64").mark("esp_command_complete_fail")
{
}
probe qemu.user.aarch64.esp_transfer_data = process("/usr/bin/qemu-aarch64").mark("esp_transfer_data")
{
  dma_left = $arg1;
  ti_size = $arg2;
}
probe qemu.user.aarch64.esp_handle_ti = process("/usr/bin/qemu-aarch64").mark("esp_handle_ti")
{
  minlen = $arg1;
}
probe qemu.user.aarch64.esp_handle_ti_cmd = process("/usr/bin/qemu-aarch64").mark("esp_handle_ti_cmd")
{
  cmdlen = $arg1;
}
probe qemu.user.aarch64.esp_mem_readb = process("/usr/bin/qemu-aarch64").mark("esp_mem_readb")
{
  saddr = $arg1;
  reg = $arg2;
}
probe qemu.user.aarch64.esp_mem_writeb = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb")
{
  saddr = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_nop = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_nop")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_flush = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_flush")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_reset = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_reset")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_bus_reset = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_bus_reset")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_iccs = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_iccs")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_msgacc = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_msgacc")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_pad = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_pad")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_satn = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_satn")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_rstatn = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_rstatn")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_sel = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_sel")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_selatn = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_selatn")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_selatns = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_selatns")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_ensel = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_ensel")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_dissel = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_dissel")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_mem_writeb_cmd_ti = process("/usr/bin/qemu-aarch64").mark("esp_mem_writeb_cmd_ti")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_pci_error_invalid_dma_direction = process("/usr/bin/qemu-aarch64").mark("esp_pci_error_invalid_dma_direction")
{
}
probe qemu.user.aarch64.esp_pci_error_invalid_read = process("/usr/bin/qemu-aarch64").mark("esp_pci_error_invalid_read")
{
  reg = $arg1;
}
probe qemu.user.aarch64.esp_pci_error_invalid_write = process("/usr/bin/qemu-aarch64").mark("esp_pci_error_invalid_write")
{
  reg = $arg1;
}
probe qemu.user.aarch64.esp_pci_error_invalid_write_dma = process("/usr/bin/qemu-aarch64").mark("esp_pci_error_invalid_write_dma")
{
  val = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.esp_pci_dma_read = process("/usr/bin/qemu-aarch64").mark("esp_pci_dma_read")
{
  saddr = $arg1;
  reg = $arg2;
}
probe qemu.user.aarch64.esp_pci_dma_write = process("/usr/bin/qemu-aarch64").mark("esp_pci_dma_write")
{
  saddr = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.esp_pci_dma_idle = process("/usr/bin/qemu-aarch64").mark("esp_pci_dma_idle")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_pci_dma_blast = process("/usr/bin/qemu-aarch64").mark("esp_pci_dma_blast")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_pci_dma_abort = process("/usr/bin/qemu-aarch64").mark("esp_pci_dma_abort")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_pci_dma_start = process("/usr/bin/qemu-aarch64").mark("esp_pci_dma_start")
{
  val = $arg1;
}
probe qemu.user.aarch64.esp_pci_sbac_read = process("/usr/bin/qemu-aarch64").mark("esp_pci_sbac_read")
{
  reg = $arg1;
}
probe qemu.user.aarch64.esp_pci_sbac_write = process("/usr/bin/qemu-aarch64").mark("esp_pci_sbac_write")
{
  reg = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.spapr_vscsi_send_rsp = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_send_rsp")
{
  status = $arg1;
  res_in = $arg2;
  res_out = $arg3;
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_no_data = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_no_data")
{
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_direct = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_direct")
{
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_indirect = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_indirect")
{
  qtag = $arg1;
  desc = $arg2;
  local_desc = $arg3;
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_out_of_range = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_out_of_range")
{
  desc = $arg1;
  desc_offset = $arg2;
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_dma_read_error = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_dma_read_error")
{
  rc = $arg1;
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_indirect_seg_ext = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_indirect_seg_ext")
{
  qtag = $arg1;
  n = $arg2;
  desc = $arg3;
  va = $arg4;
  len = $arg5;
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_out_of_desc = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_out_of_desc")
{
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_out_of_desc_boundary = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_out_of_desc_boundary")
{
  offset = $arg1;
  desc = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.spapr_vscsi_fetch_desc_done = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_fetch_desc_done")
{
  desc_num = $arg1;
  desc_offset = $arg2;
  va = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.spapr_vscsi_srp_indirect_data = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_srp_indirect_data")
{
  len = $arg1;
}
probe qemu.user.aarch64.spapr_vscsi_srp_indirect_data_rw = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_srp_indirect_data_rw")
{
  writing = $arg1;
  rc = $arg2;
}
probe qemu.user.aarch64.spapr_vscsi_srp_indirect_data_buf = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_srp_indirect_data_buf")
{
  a = $arg1;
  b = $arg2;
  c = $arg3;
  d = $arg4;
}
probe qemu.user.aarch64.spapr_vscsi_srp_transfer_data = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_srp_transfer_data")
{
  len = $arg1;
}
probe qemu.user.aarch64.spapr_vscsi_transfer_data = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_transfer_data")
{
  tag = $arg1;
  len = $arg2;
  req = $arg3;
}
probe qemu.user.aarch64.spapr_vscsi_command_complete = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_command_complete")
{
  tag = $arg1;
  status = $arg2;
  req = $arg3;
}
probe qemu.user.aarch64.spapr_vscsi_command_complete_sense_data1 = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_command_complete_sense_data1")
{
  len = $arg1;
  s0 = $arg2;
  s1 = $arg3;
  s2 = $arg4;
  s3 = $arg5;
  s4 = $arg6;
  s5 = $arg7;
  s6 = $arg8;
  s7 = $arg9;
}
probe qemu.user.aarch64.spapr_vscsi_command_complete_sense_data2 = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_command_complete_sense_data2")
{
  s8 = $arg1;
  s9 = $arg2;
  s10 = $arg3;
  s11 = $arg4;
  s12 = $arg5;
  s13 = $arg6;
  s14 = $arg7;
  s15 = $arg8;
}
probe qemu.user.aarch64.spapr_vscsi_command_complete_status = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_command_complete_status")
{
  status = $arg1;
}
probe qemu.user.aarch64.spapr_vscsi_save_request = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_save_request")
{
  qtag = $arg1;
  desc = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.spapr_vscsi_load_request = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_load_request")
{
  qtag = $arg1;
  desc = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.spapr_vscsi_process_login = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_process_login")
{
}
probe qemu.user.aarch64.spapr_vscsi_process_tsk_mgmt = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_process_tsk_mgmt")
{
  func = $arg1;
}
probe qemu.user.aarch64.spapr_vscsi_queue_cmd_no_drive = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_queue_cmd_no_drive")
{
  lun = $arg1;
}
probe qemu.user.aarch64.spapr_vscsi_queue_cmd = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_queue_cmd")
{
  qtag = $arg1;
  cdb = $arg2;
  cmd = $arg3;
  lun = $arg4;
  ret = $arg5;
}
probe qemu.user.aarch64.spapr_vscsi_do_crq = process("/usr/bin/qemu-aarch64").mark("spapr_vscsi_do_crq")
{
  c0 = $arg1;
  c1 = $arg2;
}
probe qemu.user.aarch64.lsi_reset = process("/usr/bin/qemu-aarch64").mark("lsi_reset")
{
}
probe qemu.user.aarch64.lsi_update_irq = process("/usr/bin/qemu-aarch64").mark("lsi_update_irq")
{
  level = $arg1;
  dstat = $arg2;
  sist1 = $arg3;
  sist0 = $arg4;
}
probe qemu.user.aarch64.lsi_update_irq_disconnected = process("/usr/bin/qemu-aarch64").mark("lsi_update_irq_disconnected")
{
}
probe qemu.user.aarch64.lsi_script_scsi_interrupt = process("/usr/bin/qemu-aarch64").mark("lsi_script_scsi_interrupt")
{
  stat1 = $arg1;
  stat0 = $arg2;
  sist1 = $arg3;
  sist0 = $arg4;
}
probe qemu.user.aarch64.lsi_script_dma_interrupt = process("/usr/bin/qemu-aarch64").mark("lsi_script_dma_interrupt")
{
  stat = $arg1;
  dstat = $arg2;
}
probe qemu.user.aarch64.lsi_bad_phase_jump = process("/usr/bin/qemu-aarch64").mark("lsi_bad_phase_jump")
{
  dsp = $arg1;
}
probe qemu.user.aarch64.lsi_bad_phase_interrupt = process("/usr/bin/qemu-aarch64").mark("lsi_bad_phase_interrupt")
{
}
probe qemu.user.aarch64.lsi_bad_selection = process("/usr/bin/qemu-aarch64").mark("lsi_bad_selection")
{
  id = $arg1;
}
probe qemu.user.aarch64.lsi_do_dma_unavailable = process("/usr/bin/qemu-aarch64").mark("lsi_do_dma_unavailable")
{
}
probe qemu.user.aarch64.lsi_do_dma = process("/usr/bin/qemu-aarch64").mark("lsi_do_dma")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.lsi_queue_command = process("/usr/bin/qemu-aarch64").mark("lsi_queue_command")
{
  tag = $arg1;
}
probe qemu.user.aarch64.lsi_add_msg_byte_error = process("/usr/bin/qemu-aarch64").mark("lsi_add_msg_byte_error")
{
}
probe qemu.user.aarch64.lsi_add_msg_byte = process("/usr/bin/qemu-aarch64").mark("lsi_add_msg_byte")
{
  data = $arg1;
}
probe qemu.user.aarch64.lsi_reselect = process("/usr/bin/qemu-aarch64").mark("lsi_reselect")
{
  id = $arg1;
}
probe qemu.user.aarch64.lsi_queue_req_error = process("/usr/bin/qemu-aarch64").mark("lsi_queue_req_error")
{
  p = $arg1;
}
probe qemu.user.aarch64.lsi_queue_req = process("/usr/bin/qemu-aarch64").mark("lsi_queue_req")
{
  tag = $arg1;
}
probe qemu.user.aarch64.lsi_command_complete = process("/usr/bin/qemu-aarch64").mark("lsi_command_complete")
{
  status = $arg1;
}
probe qemu.user.aarch64.lsi_transfer_data = process("/usr/bin/qemu-aarch64").mark("lsi_transfer_data")
{
  tag = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.lsi_do_command = process("/usr/bin/qemu-aarch64").mark("lsi_do_command")
{
  dbc = $arg1;
}
probe qemu.user.aarch64.lsi_do_status = process("/usr/bin/qemu-aarch64").mark("lsi_do_status")
{
  dbc = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.lsi_do_status_error = process("/usr/bin/qemu-aarch64").mark("lsi_do_status_error")
{
}
probe qemu.user.aarch64.lsi_do_msgin = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgin")
{
  dbc = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.lsi_do_msgout = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout")
{
  dbc = $arg1;
}
probe qemu.user.aarch64.lsi_do_msgout_disconnect = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_disconnect")
{
}
probe qemu.user.aarch64.lsi_do_msgout_noop = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_noop")
{
}
probe qemu.user.aarch64.lsi_do_msgout_extended = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_extended")
{
  msg = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.lsi_do_msgout_ignored = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_ignored")
{
  msg = $arg1;
}
probe qemu.user.aarch64.lsi_do_msgout_simplequeue = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_simplequeue")
{
  select_tag = $arg1;
}
probe qemu.user.aarch64.lsi_do_msgout_abort = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_abort")
{
  tag = $arg1;
}
probe qemu.user.aarch64.lsi_do_msgout_clearqueue = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_clearqueue")
{
  tag = $arg1;
}
probe qemu.user.aarch64.lsi_do_msgout_busdevicereset = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_busdevicereset")
{
  tag = $arg1;
}
probe qemu.user.aarch64.lsi_do_msgout_select = process("/usr/bin/qemu-aarch64").mark("lsi_do_msgout_select")
{
  id = $arg1;
}
probe qemu.user.aarch64.lsi_memcpy = process("/usr/bin/qemu-aarch64").mark("lsi_memcpy")
{
  dest = $arg1;
  src = $arg2;
  count = $arg3;
}
probe qemu.user.aarch64.lsi_wait_reselect = process("/usr/bin/qemu-aarch64").mark("lsi_wait_reselect")
{
}
probe qemu.user.aarch64.lsi_execute_script = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script")
{
  dsp = $arg1;
  insn = $arg2;
  addr = $arg3;
}
probe qemu.user.aarch64.lsi_execute_script_blockmove_delayed = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_blockmove_delayed")
{
}
probe qemu.user.aarch64.lsi_execute_script_blockmove_badphase = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_blockmove_badphase")
{
  phase = $arg1;
  expected = $arg2;
}
probe qemu.user.aarch64.lsi_execute_script_io_alreadyreselected = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_io_alreadyreselected")
{
}
probe qemu.user.aarch64.lsi_execute_script_io_selected = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_io_selected")
{
  id = $arg1;
  atn = $arg2;
}
probe qemu.user.aarch64.lsi_execute_script_io_disconnect = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_io_disconnect")
{
}
probe qemu.user.aarch64.lsi_execute_script_io_set = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_io_set")
{
  atn = $arg1;
  ack = $arg2;
  tm = $arg3;
  cc = $arg4;
}
probe qemu.user.aarch64.lsi_execute_script_io_clear = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_io_clear")
{
  atn = $arg1;
  ack = $arg2;
  tm = $arg3;
  cc = $arg4;
}
probe qemu.user.aarch64.lsi_execute_script_io_opcode = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_io_opcode")
{
  opcode = $arg1;
  reg = $arg2;
  opname = $arg3;
  data8 = $arg4;
  sfbr = $arg5;
  ssfbr = $arg6;
}
probe qemu.user.aarch64.lsi_execute_script_tc_nop = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_nop")
{
}
probe qemu.user.aarch64.lsi_execute_script_tc_delayedselect_timeout = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_delayedselect_timeout")
{
}
probe qemu.user.aarch64.lsi_execute_script_tc_compc = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_compc")
{
  result = $arg1;
}
probe qemu.user.aarch64.lsi_execute_script_tc_compp = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_compp")
{
  phase = $arg1;
  op = $arg2;
  insn_phase = $arg3;
}
probe qemu.user.aarch64.lsi_execute_script_tc_compd = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_compd")
{
  sfbr = $arg1;
  mask = $arg2;
  op = $arg3;
  result = $arg4;
}
probe qemu.user.aarch64.lsi_execute_script_tc_jump = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_jump")
{
  addr = $arg1;
}
probe qemu.user.aarch64.lsi_execute_script_tc_call = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_call")
{
  addr = $arg1;
}
probe qemu.user.aarch64.lsi_execute_script_tc_return = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_return")
{
  addr = $arg1;
}
probe qemu.user.aarch64.lsi_execute_script_tc_interrupt = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_interrupt")
{
  addr = $arg1;
}
probe qemu.user.aarch64.lsi_execute_script_tc_illegal = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_illegal")
{
}
probe qemu.user.aarch64.lsi_execute_script_tc_cc_failed = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_tc_cc_failed")
{
}
probe qemu.user.aarch64.lsi_execute_script_mm_load = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_mm_load")
{
  reg = $arg1;
  n = $arg2;
  addr = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.lsi_execute_script_mm_store = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_mm_store")
{
  reg = $arg1;
  n = $arg2;
  addr = $arg3;
}
probe qemu.user.aarch64.lsi_execute_script_stop = process("/usr/bin/qemu-aarch64").mark("lsi_execute_script_stop")
{
}
probe qemu.user.aarch64.lsi_awoken = process("/usr/bin/qemu-aarch64").mark("lsi_awoken")
{
}
probe qemu.user.aarch64.lsi_reg_read = process("/usr/bin/qemu-aarch64").mark("lsi_reg_read")
{
  name = $arg1;
  offset = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.lsi_reg_write = process("/usr/bin/qemu-aarch64").mark("lsi_reg_write")
{
  name = $arg1;
  offset = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.virtio_scsi_cmd_req = process("/usr/bin/qemu-aarch64").mark("virtio_scsi_cmd_req")
{
  lun = $arg1;
  tag = $arg2;
  cmd = $arg3;
}
probe qemu.user.aarch64.virtio_scsi_cmd_resp = process("/usr/bin/qemu-aarch64").mark("virtio_scsi_cmd_resp")
{
  lun = $arg1;
  tag = $arg2;
  response = $arg3;
  status = $arg4;
}
probe qemu.user.aarch64.virtio_scsi_tmf_req = process("/usr/bin/qemu-aarch64").mark("virtio_scsi_tmf_req")
{
  lun = $arg1;
  tag = $arg2;
  subtype = $arg3;
}
probe qemu.user.aarch64.virtio_scsi_tmf_resp = process("/usr/bin/qemu-aarch64").mark("virtio_scsi_tmf_resp")
{
  lun = $arg1;
  tag = $arg2;
  response = $arg3;
}
probe qemu.user.aarch64.virtio_scsi_an_req = process("/usr/bin/qemu-aarch64").mark("virtio_scsi_an_req")
{
  lun = $arg1;
  event_requested = $arg2;
}
probe qemu.user.aarch64.virtio_scsi_an_resp = process("/usr/bin/qemu-aarch64").mark("virtio_scsi_an_resp")
{
  lun = $arg1;
  response = $arg2;
}
probe qemu.user.aarch64.virtio_scsi_event = process("/usr/bin/qemu-aarch64").mark("virtio_scsi_event")
{
  lun = $arg1;
  event = $arg2;
  reason = $arg3;
}
probe qemu.user.aarch64.scsi_disk_check_condition = process("/usr/bin/qemu-aarch64").mark("scsi_disk_check_condition")
{
  tag = $arg1;
  key = $arg2;
  asc = $arg3;
  ascq = $arg4;
}
probe qemu.user.aarch64.scsi_disk_read_complete = process("/usr/bin/qemu-aarch64").mark("scsi_disk_read_complete")
{
  tag = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.scsi_disk_read_data_count = process("/usr/bin/qemu-aarch64").mark("scsi_disk_read_data_count")
{
  sector_count = $arg1;
}
probe qemu.user.aarch64.scsi_disk_read_data_invalid = process("/usr/bin/qemu-aarch64").mark("scsi_disk_read_data_invalid")
{
}
probe qemu.user.aarch64.scsi_disk_write_complete_noio = process("/usr/bin/qemu-aarch64").mark("scsi_disk_write_complete_noio")
{
  tag = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.scsi_disk_write_data_invalid = process("/usr/bin/qemu-aarch64").mark("scsi_disk_write_data_invalid")
{
}
probe qemu.user.aarch64.scsi_disk_emulate_vpd_page_00 = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_vpd_page_00")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_vpd_page_80_not_supported = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_vpd_page_80_not_supported")
{
}
probe qemu.user.aarch64.scsi_disk_emulate_vpd_page_80 = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_vpd_page_80")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_vpd_page_83 = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_vpd_page_83")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_vpd_page_b0_not_supported = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_vpd_page_b0_not_supported")
{
}
probe qemu.user.aarch64.scsi_disk_emulate_mode_sense = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_mode_sense")
{
  cmd = $arg1;
  page = $arg2;
  xfer = $arg3;
  control = $arg4;
}
probe qemu.user.aarch64.scsi_disk_emulate_read_toc = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_read_toc")
{
  start_track = $arg1;
  format = $arg2;
  msf = $arg3;
}
probe qemu.user.aarch64.scsi_disk_emulate_read_data = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_read_data")
{
  buflen = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_write_data = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_write_data")
{
  buflen = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_SAI_16 = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_SAI_16")
{
}
probe qemu.user.aarch64.scsi_disk_emulate_command_SAI_unsupported = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_SAI_unsupported")
{
}
probe qemu.user.aarch64.scsi_disk_emulate_command_SEEK_10 = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_SEEK_10")
{
  lba = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_MODE_SELECT = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_MODE_SELECT")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_MODE_SELECT_10 = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_MODE_SELECT_10")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_UNMAP = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_UNMAP")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_VERIFY = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_VERIFY")
{
  bytchk = $arg1;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_WRITE_SAME = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_WRITE_SAME")
{
  cmd = $arg1;
  xfer = $arg2;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_UNKNOWN = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_UNKNOWN")
{
  cmd = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.scsi_disk_emulate_command_FORMAT_UNIT = process("/usr/bin/qemu-aarch64").mark("scsi_disk_emulate_command_FORMAT_UNIT")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.scsi_disk_dma_command_READ = process("/usr/bin/qemu-aarch64").mark("scsi_disk_dma_command_READ")
{
  lba = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.scsi_disk_dma_command_WRITE = process("/usr/bin/qemu-aarch64").mark("scsi_disk_dma_command_WRITE")
{
  cmd = $arg1;
  lba = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.scsi_disk_new_request = process("/usr/bin/qemu-aarch64").mark("scsi_disk_new_request")
{
  lun = $arg1;
  tag = $arg2;
  line = $arg3;
}
probe qemu.user.aarch64.scsi_disk_aio_sgio_command = process("/usr/bin/qemu-aarch64").mark("scsi_disk_aio_sgio_command")
{
  tag = $arg1;
  cmd = $arg2;
  lba = $arg3;
  len = $arg4;
  timeout = $arg5;
}
probe qemu.user.aarch64.scsi_disk_mode_select_page_truncated = process("/usr/bin/qemu-aarch64").mark("scsi_disk_mode_select_page_truncated")
{
  page = $arg1;
  len = $arg2;
  page_len = $arg3;
}
probe qemu.user.aarch64.scsi_disk_mode_select_set_blocksize = process("/usr/bin/qemu-aarch64").mark("scsi_disk_mode_select_set_blocksize")
{
  blocksize = $arg1;
}
probe qemu.user.aarch64.scsi_generic_command_complete_noio = process("/usr/bin/qemu-aarch64").mark("scsi_generic_command_complete_noio")
{
  req = $arg1;
  tag = $arg2;
  statuc = $arg3;
}
probe qemu.user.aarch64.scsi_generic_read_complete = process("/usr/bin/qemu-aarch64").mark("scsi_generic_read_complete")
{
  tag = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.scsi_generic_read_data = process("/usr/bin/qemu-aarch64").mark("scsi_generic_read_data")
{
  tag = $arg1;
}
probe qemu.user.aarch64.scsi_generic_write_complete = process("/usr/bin/qemu-aarch64").mark("scsi_generic_write_complete")
{
  ret = $arg1;
}
probe qemu.user.aarch64.scsi_generic_write_complete_blocksize = process("/usr/bin/qemu-aarch64").mark("scsi_generic_write_complete_blocksize")
{
  blocksize = $arg1;
}
probe qemu.user.aarch64.scsi_generic_write_data = process("/usr/bin/qemu-aarch64").mark("scsi_generic_write_data")
{
  tag = $arg1;
}
probe qemu.user.aarch64.scsi_generic_send_command = process("/usr/bin/qemu-aarch64").mark("scsi_generic_send_command")
{
  line = $arg1;
}
probe qemu.user.aarch64.scsi_generic_realize_type = process("/usr/bin/qemu-aarch64").mark("scsi_generic_realize_type")
{
  type = $arg1;
}
probe qemu.user.aarch64.scsi_generic_realize_blocksize = process("/usr/bin/qemu-aarch64").mark("scsi_generic_realize_blocksize")
{
  blocksize = $arg1;
}
probe qemu.user.aarch64.scsi_generic_aio_sgio_command = process("/usr/bin/qemu-aarch64").mark("scsi_generic_aio_sgio_command")
{
  tag = $arg1;
  cmd = $arg2;
  timeout = $arg3;
}
probe qemu.user.aarch64.scsi_generic_ioctl_sgio_command = process("/usr/bin/qemu-aarch64").mark("scsi_generic_ioctl_sgio_command")
{
  cmd = $arg1;
  timeout = $arg2;
}
probe qemu.user.aarch64.scsi_generic_ioctl_sgio_done = process("/usr/bin/qemu-aarch64").mark("scsi_generic_ioctl_sgio_done")
{
  cmd = $arg1;
  ret = $arg2;
  status = $arg3;
  host_status = $arg4;
}
probe qemu.user.aarch64.allwinner_sdhost_set_inserted = process("/usr/bin/qemu-aarch64").mark("allwinner_sdhost_set_inserted")
{
  inserted = $arg1;
}
probe qemu.user.aarch64.allwinner_sdhost_process_desc = process("/usr/bin/qemu-aarch64").mark("allwinner_sdhost_process_desc")
{
  desc_addr = $arg1;
  desc_size = $arg2;
  is_write = $arg3;
  max_bytes = $arg4;
}
probe qemu.user.aarch64.allwinner_sdhost_read = process("/usr/bin/qemu-aarch64").mark("allwinner_sdhost_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_sdhost_write = process("/usr/bin/qemu-aarch64").mark("allwinner_sdhost_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.allwinner_sdhost_update_irq = process("/usr/bin/qemu-aarch64").mark("allwinner_sdhost_update_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.bcm2835_sdhost_read = process("/usr/bin/qemu-aarch64").mark("bcm2835_sdhost_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.bcm2835_sdhost_write = process("/usr/bin/qemu-aarch64").mark("bcm2835_sdhost_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.bcm2835_sdhost_edm_change = process("/usr/bin/qemu-aarch64").mark("bcm2835_sdhost_edm_change")
{
  why = $arg1;
  edm = $arg2;
}
probe qemu.user.aarch64.bcm2835_sdhost_update_irq = process("/usr/bin/qemu-aarch64").mark("bcm2835_sdhost_update_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.sdbus_command = process("/usr/bin/qemu-aarch64").mark("sdbus_command")
{
  bus_name = $arg1;
  cmd = $arg2;
  arg = $arg3;
}
probe qemu.user.aarch64.sdbus_read = process("/usr/bin/qemu-aarch64").mark("sdbus_read")
{
  bus_name = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sdbus_write = process("/usr/bin/qemu-aarch64").mark("sdbus_write")
{
  bus_name = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sdbus_set_voltage = process("/usr/bin/qemu-aarch64").mark("sdbus_set_voltage")
{
  bus_name = $arg1;
  millivolts = $arg2;
}
probe qemu.user.aarch64.sdbus_get_dat_lines = process("/usr/bin/qemu-aarch64").mark("sdbus_get_dat_lines")
{
  bus_name = $arg1;
  dat_lines = $arg2;
}
probe qemu.user.aarch64.sdbus_get_cmd_line = process("/usr/bin/qemu-aarch64").mark("sdbus_get_cmd_line")
{
  bus_name = $arg1;
  cmd_line = $arg2;
}
probe qemu.user.aarch64.sdhci_set_inserted = process("/usr/bin/qemu-aarch64").mark("sdhci_set_inserted")
{
  level = $arg1;
}
probe qemu.user.aarch64.sdhci_send_command = process("/usr/bin/qemu-aarch64").mark("sdhci_send_command")
{
  cmd = $arg1;
  arg = $arg2;
}
probe qemu.user.aarch64.sdhci_error = process("/usr/bin/qemu-aarch64").mark("sdhci_error")
{
  msg = $arg1;
}
probe qemu.user.aarch64.sdhci_response4 = process("/usr/bin/qemu-aarch64").mark("sdhci_response4")
{
  r0 = $arg1;
}
probe qemu.user.aarch64.sdhci_response16 = process("/usr/bin/qemu-aarch64").mark("sdhci_response16")
{
  r3 = $arg1;
  r2 = $arg2;
  r1 = $arg3;
  r0 = $arg4;
}
probe qemu.user.aarch64.sdhci_end_transfer = process("/usr/bin/qemu-aarch64").mark("sdhci_end_transfer")
{
  cmd = $arg1;
  arg = $arg2;
}
probe qemu.user.aarch64.sdhci_adma = process("/usr/bin/qemu-aarch64").mark("sdhci_adma")
{
  desc = $arg1;
  sysad = $arg2;
}
probe qemu.user.aarch64.sdhci_adma_loop = process("/usr/bin/qemu-aarch64").mark("sdhci_adma_loop")
{
  addr = $arg1;
  length = $arg2;
  attr = $arg3;
}
probe qemu.user.aarch64.sdhci_adma_transfer_completed = process("/usr/bin/qemu-aarch64").mark("sdhci_adma_transfer_completed")
{
}
probe qemu.user.aarch64.sdhci_access = process("/usr/bin/qemu-aarch64").mark("sdhci_access")
{
  access = $arg1;
  size = $arg2;
  offset = $arg3;
  dir = $arg4;
  val = $arg5;
  val2 = $arg6;
}
probe qemu.user.aarch64.sdhci_read_dataport = process("/usr/bin/qemu-aarch64").mark("sdhci_read_dataport")
{
  data_count = $arg1;
}
probe qemu.user.aarch64.sdhci_write_dataport = process("/usr/bin/qemu-aarch64").mark("sdhci_write_dataport")
{
  data_count = $arg1;
}
probe qemu.user.aarch64.sdhci_capareg = process("/usr/bin/qemu-aarch64").mark("sdhci_capareg")
{
  desc = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sdcard_normal_command = process("/usr/bin/qemu-aarch64").mark("sdcard_normal_command")
{
  proto = $arg1;
  cmd_desc = $arg2;
  cmd = $arg3;
  arg = $arg4;
  state = $arg5;
}
probe qemu.user.aarch64.sdcard_app_command = process("/usr/bin/qemu-aarch64").mark("sdcard_app_command")
{
  proto = $arg1;
  acmd_desc = $arg2;
  acmd = $arg3;
  arg = $arg4;
  state = $arg5;
}
probe qemu.user.aarch64.sdcard_response = process("/usr/bin/qemu-aarch64").mark("sdcard_response")
{
  rspdesc = $arg1;
  rsplen = $arg2;
}
probe qemu.user.aarch64.sdcard_powerup = process("/usr/bin/qemu-aarch64").mark("sdcard_powerup")
{
}
probe qemu.user.aarch64.sdcard_inquiry_cmd41 = process("/usr/bin/qemu-aarch64").mark("sdcard_inquiry_cmd41")
{
}
probe qemu.user.aarch64.sdcard_reset = process("/usr/bin/qemu-aarch64").mark("sdcard_reset")
{
}
probe qemu.user.aarch64.sdcard_set_blocklen = process("/usr/bin/qemu-aarch64").mark("sdcard_set_blocklen")
{
  length = $arg1;
}
probe qemu.user.aarch64.sdcard_inserted = process("/usr/bin/qemu-aarch64").mark("sdcard_inserted")
{
  readonly = $arg1;
}
probe qemu.user.aarch64.sdcard_ejected = process("/usr/bin/qemu-aarch64").mark("sdcard_ejected")
{
}
probe qemu.user.aarch64.sdcard_erase = process("/usr/bin/qemu-aarch64").mark("sdcard_erase")
{
  first = $arg1;
  last = $arg2;
}
probe qemu.user.aarch64.sdcard_lock = process("/usr/bin/qemu-aarch64").mark("sdcard_lock")
{
}
probe qemu.user.aarch64.sdcard_unlock = process("/usr/bin/qemu-aarch64").mark("sdcard_unlock")
{
}
probe qemu.user.aarch64.sdcard_read_block = process("/usr/bin/qemu-aarch64").mark("sdcard_read_block")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.sdcard_write_block = process("/usr/bin/qemu-aarch64").mark("sdcard_write_block")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.sdcard_write_data = process("/usr/bin/qemu-aarch64").mark("sdcard_write_data")
{
  proto = $arg1;
  cmd_desc = $arg2;
  cmd = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.sdcard_read_data = process("/usr/bin/qemu-aarch64").mark("sdcard_read_data")
{
  proto = $arg1;
  cmd_desc = $arg2;
  cmd = $arg3;
  length = $arg4;
}
probe qemu.user.aarch64.sdcard_set_voltage = process("/usr/bin/qemu-aarch64").mark("sdcard_set_voltage")
{
  millivolts = $arg1;
}
probe qemu.user.aarch64.pxa2xx_mmci_read = process("/usr/bin/qemu-aarch64").mark("pxa2xx_mmci_read")
{
  size = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.pxa2xx_mmci_write = process("/usr/bin/qemu-aarch64").mark("pxa2xx_mmci_write")
{
  size = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.pl181_command_send = process("/usr/bin/qemu-aarch64").mark("pl181_command_send")
{
  cmd = $arg1;
  arg = $arg2;
}
probe qemu.user.aarch64.pl181_command_sent = process("/usr/bin/qemu-aarch64").mark("pl181_command_sent")
{
}
probe qemu.user.aarch64.pl181_command_response_pending = process("/usr/bin/qemu-aarch64").mark("pl181_command_response_pending")
{
}
probe qemu.user.aarch64.pl181_command_timeout = process("/usr/bin/qemu-aarch64").mark("pl181_command_timeout")
{
}
probe qemu.user.aarch64.pl181_fifo_push = process("/usr/bin/qemu-aarch64").mark("pl181_fifo_push")
{
  data = $arg1;
}
probe qemu.user.aarch64.pl181_fifo_pop = process("/usr/bin/qemu-aarch64").mark("pl181_fifo_pop")
{
  data = $arg1;
}
probe qemu.user.aarch64.pl181_fifo_transfer_complete = process("/usr/bin/qemu-aarch64").mark("pl181_fifo_transfer_complete")
{
}
probe qemu.user.aarch64.pl181_data_engine_idle = process("/usr/bin/qemu-aarch64").mark("pl181_data_engine_idle")
{
}
probe qemu.user.aarch64.aspeed_sdhci_read = process("/usr/bin/qemu-aarch64").mark("aspeed_sdhci_read")
{
  addr = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.aspeed_sdhci_write = process("/usr/bin/qemu-aarch64").mark("aspeed_sdhci_write")
{
  addr = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.sh7750_porta = process("/usr/bin/qemu-aarch64").mark("sh7750_porta")
{
  prev = $arg1;
  cur = $arg2;
  pdtr = $arg3;
  pctr = $arg4;
}
probe qemu.user.aarch64.sh7750_portb = process("/usr/bin/qemu-aarch64").mark("sh7750_portb")
{
  prev = $arg1;
  cur = $arg2;
  pdtr = $arg3;
  pctr = $arg4;
}
probe qemu.user.aarch64.sun4m_cpu_set_irq_raise = process("/usr/bin/qemu-aarch64").mark("sun4m_cpu_set_irq_raise")
{
  level = $arg1;
}
probe qemu.user.aarch64.sun4m_cpu_set_irq_lower = process("/usr/bin/qemu-aarch64").mark("sun4m_cpu_set_irq_lower")
{
  level = $arg1;
}
probe qemu.user.aarch64.sun4m_iommu_mem_readl = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.sun4m_iommu_mem_writel = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.sun4m_iommu_mem_writel_ctrl = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_mem_writel_ctrl")
{
  iostart = $arg1;
}
probe qemu.user.aarch64.sun4m_iommu_mem_writel_tlbflush = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_mem_writel_tlbflush")
{
  val = $arg1;
}
probe qemu.user.aarch64.sun4m_iommu_mem_writel_pgflush = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_mem_writel_pgflush")
{
  val = $arg1;
}
probe qemu.user.aarch64.sun4m_iommu_page_get_flags = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_page_get_flags")
{
  pa = $arg1;
  iopte = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.sun4m_iommu_translate_pa = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_translate_pa")
{
  addr = $arg1;
  pa = $arg2;
  iopte = $arg3;
}
probe qemu.user.aarch64.sun4m_iommu_bad_addr = process("/usr/bin/qemu-aarch64").mark("sun4m_iommu_bad_addr")
{
  addr = $arg1;
}
probe qemu.user.aarch64.leon3_set_irq = process("/usr/bin/qemu-aarch64").mark("leon3_set_irq")
{
  intno = $arg1;
}
probe qemu.user.aarch64.leon3_reset_irq = process("/usr/bin/qemu-aarch64").mark("leon3_reset_irq")
{
  intno = $arg1;
}
probe qemu.user.aarch64.int_helper_icache_freeze = process("/usr/bin/qemu-aarch64").mark("int_helper_icache_freeze")
{
}
probe qemu.user.aarch64.int_helper_dcache_freeze = process("/usr/bin/qemu-aarch64").mark("int_helper_dcache_freeze")
{
}
probe qemu.user.aarch64.ebus_isa_irq_handler = process("/usr/bin/qemu-aarch64").mark("ebus_isa_irq_handler")
{
  n = $arg1;
  level = $arg2;
}
probe qemu.user.aarch64.sun4u_iommu_mem_read = process("/usr/bin/qemu-aarch64").mark("sun4u_iommu_mem_read")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sun4u_iommu_mem_write = process("/usr/bin/qemu-aarch64").mark("sun4u_iommu_mem_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sun4u_iommu_translate = process("/usr/bin/qemu-aarch64").mark("sun4u_iommu_translate")
{
  addr = $arg1;
  trans_addr = $arg2;
  tte = $arg3;
}
probe qemu.user.aarch64.sparc64_cpu_ivec_raise_irq = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_ivec_raise_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.sparc64_cpu_ivec_lower_irq = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_ivec_lower_irq")
{
  irq = $arg1;
}
probe qemu.user.aarch64.sparc64_cpu_tick_irq_disabled = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_tick_irq_disabled")
{
}
probe qemu.user.aarch64.sparc64_cpu_tick_irq_fire = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_tick_irq_fire")
{
}
probe qemu.user.aarch64.sparc64_cpu_stick_irq_disabled = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_stick_irq_disabled")
{
}
probe qemu.user.aarch64.sparc64_cpu_stick_irq_fire = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_stick_irq_fire")
{
}
probe qemu.user.aarch64.sparc64_cpu_hstick_irq_disabled = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_hstick_irq_disabled")
{
}
probe qemu.user.aarch64.sparc64_cpu_hstick_irq_fire = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_hstick_irq_fire")
{
}
probe qemu.user.aarch64.sparc64_cpu_tick_set_count = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_tick_set_count")
{
  name = $arg1;
  real_count = $arg2;
  npt = $arg3;
  p = $arg4;
}
probe qemu.user.aarch64.sparc64_cpu_tick_get_count = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_tick_get_count")
{
  name = $arg1;
  real_count = $arg2;
  npt = $arg3;
  p = $arg4;
}
probe qemu.user.aarch64.sparc64_cpu_tick_set_limit = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_tick_set_limit")
{
  name = $arg1;
  real_limit = $arg2;
  dis = $arg3;
  p = $arg4;
  limit_ = $arg5;
  t = $arg6;
  dt = $arg7;
}
probe qemu.user.aarch64.sparc64_cpu_tick_set_limit_zero = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_tick_set_limit_zero")
{
  name = $arg1;
}
probe qemu.user.aarch64.aspeed_smc_flash_set_segment = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_flash_set_segment")
{
  cs = $arg1;
  reg = $arg2;
  start = $arg3;
  end = $arg4;
}
probe qemu.user.aarch64.aspeed_smc_flash_read = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_flash_read")
{
  cs = $arg1;
  addr = $arg2;
  size = $arg3;
  data = $arg4;
  mode = $arg5;
}
probe qemu.user.aarch64.aspeed_smc_do_snoop = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_do_snoop")
{
  cs = $arg1;
  index = $arg2;
  dummies = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.aspeed_smc_flash_write = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_flash_write")
{
  cs = $arg1;
  addr = $arg2;
  size = $arg3;
  data = $arg4;
  mode = $arg5;
}
probe qemu.user.aarch64.aspeed_smc_read = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_read")
{
  addr = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.aspeed_smc_dma_checksum = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_dma_checksum")
{
  addr = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.aspeed_smc_dma_rw = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_dma_rw")
{
  dir = $arg1;
  flash_addr = $arg2;
  dram_addr = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.aspeed_smc_write = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_write")
{
  addr = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.aspeed_smc_flash_select = process("/usr/bin/qemu-aarch64").mark("aspeed_smc_flash_select")
{
  cs = $arg1;
  prefix = $arg2;
}
probe qemu.user.aarch64.npcm7xx_fiu_enter_reset = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_enter_reset")
{
  id = $arg1;
  reset_type = $arg2;
}
probe qemu.user.aarch64.npcm7xx_fiu_hold_reset = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_hold_reset")
{
  id = $arg1;
}
probe qemu.user.aarch64.npcm7xx_fiu_select = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_select")
{
  id = $arg1;
  cs = $arg2;
}
probe qemu.user.aarch64.npcm7xx_fiu_deselect = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_deselect")
{
  id = $arg1;
  cs = $arg2;
}
probe qemu.user.aarch64.npcm7xx_fiu_ctrl_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_ctrl_read")
{
  id = $arg1;
  addr = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.npcm7xx_fiu_ctrl_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_ctrl_write")
{
  id = $arg1;
  addr = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.npcm7xx_fiu_flash_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_flash_read")
{
  id = $arg1;
  cs = $arg2;
  addr = $arg3;
  size = $arg4;
  value = $arg5;
}
probe qemu.user.aarch64.npcm7xx_fiu_flash_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_fiu_flash_write")
{
  id = $arg1;
  cs = $arg2;
  addr = $arg3;
  size = $arg4;
  value = $arg5;
}
probe qemu.user.aarch64.ibex_spi_host_reset = process("/usr/bin/qemu-aarch64").mark("ibex_spi_host_reset")
{
  msg = $arg1;
}
probe qemu.user.aarch64.ibex_spi_host_transfer = process("/usr/bin/qemu-aarch64").mark("ibex_spi_host_transfer")
{
  tx_data = $arg1;
  rx_data = $arg2;
}
probe qemu.user.aarch64.ibex_spi_host_write = process("/usr/bin/qemu-aarch64").mark("ibex_spi_host_write")
{
  addr = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.ibex_spi_host_read = process("/usr/bin/qemu-aarch64").mark("ibex_spi_host_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.slavio_timer_get_out = process("/usr/bin/qemu-aarch64").mark("slavio_timer_get_out")
{
  limit_ = $arg1;
  counthigh = $arg2;
  count = $arg3;
}
probe qemu.user.aarch64.slavio_timer_irq = process("/usr/bin/qemu-aarch64").mark("slavio_timer_irq")
{
  counthigh = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.slavio_timer_mem_readl_invalid = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_readl_invalid")
{
  addr = $arg1;
}
probe qemu.user.aarch64.slavio_timer_mem_readl = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.slavio_timer_mem_writel = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.slavio_timer_mem_writel_limit = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_limit")
{
  timer_index = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.slavio_timer_mem_writel_counter_invalid = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_counter_invalid")
{
}
probe qemu.user.aarch64.slavio_timer_mem_writel_status_start = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_status_start")
{
  timer_index = $arg1;
}
probe qemu.user.aarch64.slavio_timer_mem_writel_status_stop = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_status_stop")
{
  timer_index = $arg1;
}
probe qemu.user.aarch64.slavio_timer_mem_writel_mode_user = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_mode_user")
{
  timer_index = $arg1;
}
probe qemu.user.aarch64.slavio_timer_mem_writel_mode_counter = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_mode_counter")
{
  timer_index = $arg1;
}
probe qemu.user.aarch64.slavio_timer_mem_writel_mode_invalid = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_mode_invalid")
{
}
probe qemu.user.aarch64.slavio_timer_mem_writel_invalid = process("/usr/bin/qemu-aarch64").mark("slavio_timer_mem_writel_invalid")
{
  addr = $arg1;
}
probe qemu.user.aarch64.grlib_gptimer_enable = process("/usr/bin/qemu-aarch64").mark("grlib_gptimer_enable")
{
  id = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.grlib_gptimer_disabled = process("/usr/bin/qemu-aarch64").mark("grlib_gptimer_disabled")
{
  id = $arg1;
  config = $arg2;
}
probe qemu.user.aarch64.grlib_gptimer_restart = process("/usr/bin/qemu-aarch64").mark("grlib_gptimer_restart")
{
  id = $arg1;
  reload = $arg2;
}
probe qemu.user.aarch64.grlib_gptimer_set_scaler = process("/usr/bin/qemu-aarch64").mark("grlib_gptimer_set_scaler")
{
  scaler = $arg1;
  freq = $arg2;
}
probe qemu.user.aarch64.grlib_gptimer_hit = process("/usr/bin/qemu-aarch64").mark("grlib_gptimer_hit")
{
  id = $arg1;
}
probe qemu.user.aarch64.grlib_gptimer_readl = process("/usr/bin/qemu-aarch64").mark("grlib_gptimer_readl")
{
  id = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.grlib_gptimer_writel = process("/usr/bin/qemu-aarch64").mark("grlib_gptimer_writel")
{
  id = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.aspeed_timer_ctrl_enable = process("/usr/bin/qemu-aarch64").mark("aspeed_timer_ctrl_enable")
{
  i = $arg1;
  enable = $arg2;
}
probe qemu.user.aarch64.aspeed_timer_ctrl_external_clock = process("/usr/bin/qemu-aarch64").mark("aspeed_timer_ctrl_external_clock")
{
  i = $arg1;
  enable = $arg2;
}
probe qemu.user.aarch64.aspeed_timer_ctrl_overflow_interrupt = process("/usr/bin/qemu-aarch64").mark("aspeed_timer_ctrl_overflow_interrupt")
{
  i = $arg1;
  enable = $arg2;
}
probe qemu.user.aarch64.aspeed_timer_ctrl_pulse_enable = process("/usr/bin/qemu-aarch64").mark("aspeed_timer_ctrl_pulse_enable")
{
  i = $arg1;
  enable = $arg2;
}
probe qemu.user.aarch64.aspeed_timer_set_ctrl2 = process("/usr/bin/qemu-aarch64").mark("aspeed_timer_set_ctrl2")
{
  value = $arg1;
}
probe qemu.user.aarch64.aspeed_timer_set_value = process("/usr/bin/qemu-aarch64").mark("aspeed_timer_set_value")
{
  timer = $arg1;
  reg = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.aspeed_timer_read = process("/usr/bin/qemu-aarch64").mark("aspeed_timer_read")
{
  offset = $arg1;
  size = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.systick_reload = process("/usr/bin/qemu-aarch64").mark("systick_reload")
{
}
probe qemu.user.aarch64.systick_timer_tick = process("/usr/bin/qemu-aarch64").mark("systick_timer_tick")
{
}
probe qemu.user.aarch64.systick_read = process("/usr/bin/qemu-aarch64").mark("systick_read")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.systick_write = process("/usr/bin/qemu-aarch64").mark("systick_write")
{
  addr = $arg1;
  value = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_timer_read = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_timer_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_timer_write = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_timer_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_timer_reset = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_timer_reset")
{
}
probe qemu.user.aarch64.cmsdk_apb_dualtimer_read = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_dualtimer_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_dualtimer_write = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_dualtimer_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_dualtimer_reset = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_dualtimer_reset")
{
}
probe qemu.user.aarch64.npcm7xx_timer_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_timer_read")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_timer_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_timer_write")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_timer_irq = process("/usr/bin/qemu-aarch64").mark("npcm7xx_timer_irq")
{
  id = $arg1;
  timer = $arg2;
  state = $arg3;
}
probe qemu.user.aarch64.nrf51_timer_read = process("/usr/bin/qemu-aarch64").mark("nrf51_timer_read")
{
  timer_id = $arg1;
  addr = $arg2;
  value = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.nrf51_timer_write = process("/usr/bin/qemu-aarch64").mark("nrf51_timer_write")
{
  timer_id = $arg1;
  addr = $arg2;
  value = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.nrf51_timer_set_count = process("/usr/bin/qemu-aarch64").mark("nrf51_timer_set_count")
{
  timer_id = $arg1;
  counter_id = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.bcm2835_systmr_timer_expired = process("/usr/bin/qemu-aarch64").mark("bcm2835_systmr_timer_expired")
{
  id = $arg1;
}
probe qemu.user.aarch64.bcm2835_systmr_irq_ack = process("/usr/bin/qemu-aarch64").mark("bcm2835_systmr_irq_ack")
{
  id = $arg1;
}
probe qemu.user.aarch64.bcm2835_systmr_read = process("/usr/bin/qemu-aarch64").mark("bcm2835_systmr_read")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.bcm2835_systmr_write = process("/usr/bin/qemu-aarch64").mark("bcm2835_systmr_write")
{
  offset = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.bcm2835_systmr_run = process("/usr/bin/qemu-aarch64").mark("bcm2835_systmr_run")
{
  id = $arg1;
  delay_us = $arg2;
}
probe qemu.user.aarch64.avr_timer16_read = process("/usr/bin/qemu-aarch64").mark("avr_timer16_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.avr_timer16_read_ifr = process("/usr/bin/qemu-aarch64").mark("avr_timer16_read_ifr")
{
  value = $arg1;
}
probe qemu.user.aarch64.avr_timer16_read_imsk = process("/usr/bin/qemu-aarch64").mark("avr_timer16_read_imsk")
{
  value = $arg1;
}
probe qemu.user.aarch64.avr_timer16_write = process("/usr/bin/qemu-aarch64").mark("avr_timer16_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.avr_timer16_write_imsk = process("/usr/bin/qemu-aarch64").mark("avr_timer16_write_imsk")
{
  value = $arg1;
}
probe qemu.user.aarch64.avr_timer16_interrupt_count = process("/usr/bin/qemu-aarch64").mark("avr_timer16_interrupt_count")
{
  cnt = $arg1;
}
probe qemu.user.aarch64.avr_timer16_interrupt_overflow = process("/usr/bin/qemu-aarch64").mark("avr_timer16_interrupt_overflow")
{
  reason = $arg1;
}
probe qemu.user.aarch64.avr_timer16_next_alarm = process("/usr/bin/qemu-aarch64").mark("avr_timer16_next_alarm")
{
  delay_ns = $arg1;
}
probe qemu.user.aarch64.avr_timer16_clksrc_update = process("/usr/bin/qemu-aarch64").mark("avr_timer16_clksrc_update")
{
  freq_hz = $arg1;
  period_ns = $arg2;
  delay_s = $arg3;
}
probe qemu.user.aarch64.sse_counter_control_read = process("/usr/bin/qemu-aarch64").mark("sse_counter_control_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sse_counter_control_write = process("/usr/bin/qemu-aarch64").mark("sse_counter_control_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sse_counter_status_read = process("/usr/bin/qemu-aarch64").mark("sse_counter_status_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sse_counter_status_write = process("/usr/bin/qemu-aarch64").mark("sse_counter_status_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sse_counter_reset = process("/usr/bin/qemu-aarch64").mark("sse_counter_reset")
{
}
probe qemu.user.aarch64.sse_timer_read = process("/usr/bin/qemu-aarch64").mark("sse_timer_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sse_timer_write = process("/usr/bin/qemu-aarch64").mark("sse_timer_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.sse_timer_reset = process("/usr/bin/qemu-aarch64").mark("sse_timer_reset")
{
}
probe qemu.user.aarch64.sifive_pwm_set_alarm = process("/usr/bin/qemu-aarch64").mark("sifive_pwm_set_alarm")
{
  alarm = $arg1;
  now = $arg2;
}
probe qemu.user.aarch64.sifive_pwm_interrupt = process("/usr/bin/qemu-aarch64").mark("sifive_pwm_interrupt")
{
  num = $arg1;
}
probe qemu.user.aarch64.sifive_pwm_read = process("/usr/bin/qemu-aarch64").mark("sifive_pwm_read")
{
  offset = $arg1;
}
probe qemu.user.aarch64.sifive_pwm_write = process("/usr/bin/qemu-aarch64").mark("sifive_pwm_write")
{
  data = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.sh_timer_start_stop = process("/usr/bin/qemu-aarch64").mark("sh_timer_start_stop")
{
  enable = $arg1;
  current = $arg2;
}
probe qemu.user.aarch64.sh_timer_read = process("/usr/bin/qemu-aarch64").mark("sh_timer_read")
{
  offset = $arg1;
}
probe qemu.user.aarch64.sh_timer_write = process("/usr/bin/qemu-aarch64").mark("sh_timer_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.tpm_crb_mmio_read = process("/usr/bin/qemu-aarch64").mark("tpm_crb_mmio_read")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.tpm_crb_mmio_write = process("/usr/bin/qemu-aarch64").mark("tpm_crb_mmio_write")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.tpm_tis_raise_irq = process("/usr/bin/qemu-aarch64").mark("tpm_tis_raise_irq")
{
  irqmask = $arg1;
}
probe qemu.user.aarch64.tpm_tis_new_active_locality = process("/usr/bin/qemu-aarch64").mark("tpm_tis_new_active_locality")
{
  locty = $arg1;
}
probe qemu.user.aarch64.tpm_tis_abort = process("/usr/bin/qemu-aarch64").mark("tpm_tis_abort")
{
  locty = $arg1;
}
probe qemu.user.aarch64.tpm_tis_data_read = process("/usr/bin/qemu-aarch64").mark("tpm_tis_data_read")
{
  value = $arg1;
  off = $arg2;
}
probe qemu.user.aarch64.tpm_tis_mmio_read = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_read")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.tpm_tis_mmio_write = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write")
{
  size = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.tpm_tis_mmio_write_locty4 = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_locty4")
{
}
probe qemu.user.aarch64.tpm_tis_mmio_write_release_locty = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_release_locty")
{
  locty = $arg1;
}
probe qemu.user.aarch64.tpm_tis_mmio_write_locty_req_use = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_locty_req_use")
{
  locty = $arg1;
}
probe qemu.user.aarch64.tpm_tis_mmio_write_next_locty = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_next_locty")
{
  locty = $arg1;
}
probe qemu.user.aarch64.tpm_tis_mmio_write_locty_seized = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_locty_seized")
{
  locty = $arg1;
  active = $arg2;
}
probe qemu.user.aarch64.tpm_tis_mmio_write_init_abort = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_init_abort")
{
}
probe qemu.user.aarch64.tpm_tis_mmio_write_lowering_irq = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_lowering_irq")
{
}
probe qemu.user.aarch64.tpm_tis_mmio_write_data2send = process("/usr/bin/qemu-aarch64").mark("tpm_tis_mmio_write_data2send")
{
  value = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.tpm_tis_pre_save = process("/usr/bin/qemu-aarch64").mark("tpm_tis_pre_save")
{
  locty = $arg1;
  rw_offset = $arg2;
}
probe qemu.user.aarch64.tpm_ppi_memset = process("/usr/bin/qemu-aarch64").mark("tpm_ppi_memset")
{
  ptr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.tpm_spapr_do_crq = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq")
{
  raw1 = $arg1;
  raw2 = $arg2;
}
probe qemu.user.aarch64.tpm_spapr_do_crq_crq_result = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_crq_result")
{
}
probe qemu.user.aarch64.tpm_spapr_do_crq_crq_complete_result = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_crq_complete_result")
{
}
probe qemu.user.aarch64.tpm_spapr_do_crq_tpm_command = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_tpm_command")
{
}
probe qemu.user.aarch64.tpm_spapr_do_crq_tpm_get_rtce_buffer_size = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_tpm_get_rtce_buffer_size")
{
  buffersize = $arg1;
}
probe qemu.user.aarch64.tpm_spapr_do_crq_get_version = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_get_version")
{
  version = $arg1;
}
probe qemu.user.aarch64.tpm_spapr_do_crq_prepare_to_suspend = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_prepare_to_suspend")
{
}
probe qemu.user.aarch64.tpm_spapr_do_crq_unknown_msg_type = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_unknown_msg_type")
{
  type = $arg1;
}
probe qemu.user.aarch64.tpm_spapr_do_crq_unknown_crq = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_do_crq_unknown_crq")
{
  raw1 = $arg1;
  raw2 = $arg2;
}
probe qemu.user.aarch64.tpm_spapr_post_load = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_post_load")
{
}
probe qemu.user.aarch64.tpm_spapr_caught_response = process("/usr/bin/qemu-aarch64").mark("tpm_spapr_caught_response")
{
  v = $arg1;
}
probe qemu.user.aarch64.usb_packet_state_change = process("/usr/bin/qemu-aarch64").mark("usb_packet_state_change")
{
  bus = $arg1;
  port = $arg2;
  ep = $arg3;
  p = $arg4;
  o = $arg5;
  n = $arg6;
}
probe qemu.user.aarch64.usb_packet_state_fault = process("/usr/bin/qemu-aarch64").mark("usb_packet_state_fault")
{
  bus = $arg1;
  port = $arg2;
  ep = $arg3;
  p = $arg4;
  o = $arg5;
  n = $arg6;
}
probe qemu.user.aarch64.usb_port_claim = process("/usr/bin/qemu-aarch64").mark("usb_port_claim")
{
  bus = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.usb_port_attach = process("/usr/bin/qemu-aarch64").mark("usb_port_attach")
{
  bus = $arg1;
  port = $arg2;
  devspeed = $arg3;
  portspeed = $arg4;
}
probe qemu.user.aarch64.usb_port_detach = process("/usr/bin/qemu-aarch64").mark("usb_port_detach")
{
  bus = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.usb_port_release = process("/usr/bin/qemu-aarch64").mark("usb_port_release")
{
  bus = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.usb_ohci_exit = process("/usr/bin/qemu-aarch64").mark("usb_ohci_exit")
{
  s = $arg1;
}
probe qemu.user.aarch64.usb_ohci_iso_td_read_failed = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_read_failed")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_iso_td_head = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_head")
{
  head = $arg1;
  tail = $arg2;
  flags = $arg3;
  bp = $arg4;
  next_ = $arg5;
  be = $arg6;
  framenum = $arg7;
  startframe = $arg8;
  framecount = $arg9;
  rel_frame_num = $arg10;
}
probe qemu.user.aarch64.usb_ohci_iso_td_head_offset = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_head_offset")
{
  o0 = $arg1;
  o1 = $arg2;
  o2 = $arg3;
  o3 = $arg4;
  o4 = $arg5;
  o5 = $arg6;
  o6 = $arg7;
  o7 = $arg8;
}
probe qemu.user.aarch64.usb_ohci_iso_td_relative_frame_number_neg = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_relative_frame_number_neg")
{
  rel = $arg1;
}
probe qemu.user.aarch64.usb_ohci_iso_td_relative_frame_number_big = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_relative_frame_number_big")
{
  rel = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.usb_ohci_iso_td_bad_direction = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_bad_direction")
{
  dir = $arg1;
}
probe qemu.user.aarch64.usb_ohci_iso_td_bad_bp_be = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_bad_bp_be")
{
  bp = $arg1;
  be = $arg2;
}
probe qemu.user.aarch64.usb_ohci_iso_td_bad_cc_not_accessed = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_bad_cc_not_accessed")
{
  start = $arg1;
  next_ = $arg2;
}
probe qemu.user.aarch64.usb_ohci_iso_td_bad_cc_overrun = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_bad_cc_overrun")
{
  start = $arg1;
  next_ = $arg2;
}
probe qemu.user.aarch64.usb_ohci_iso_td_so = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_so")
{
  so = $arg1;
  eo = $arg2;
  s = $arg3;
  e = $arg4;
  str = $arg5;
  len = $arg6;
  ret = $arg7;
}
probe qemu.user.aarch64.usb_ohci_iso_td_data_overrun = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_data_overrun")
{
  ret = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.usb_ohci_iso_td_data_underrun = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_data_underrun")
{
  ret = $arg1;
}
probe qemu.user.aarch64.usb_ohci_iso_td_nak = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_nak")
{
  ret = $arg1;
}
probe qemu.user.aarch64.usb_ohci_iso_td_bad_response = process("/usr/bin/qemu-aarch64").mark("usb_ohci_iso_td_bad_response")
{
  ret = $arg1;
}
probe qemu.user.aarch64.usb_ohci_port_attach = process("/usr/bin/qemu-aarch64").mark("usb_ohci_port_attach")
{
  index = $arg1;
}
probe qemu.user.aarch64.usb_ohci_port_detach = process("/usr/bin/qemu-aarch64").mark("usb_ohci_port_detach")
{
  index = $arg1;
}
probe qemu.user.aarch64.usb_ohci_port_wakeup = process("/usr/bin/qemu-aarch64").mark("usb_ohci_port_wakeup")
{
  index = $arg1;
}
probe qemu.user.aarch64.usb_ohci_port_suspend = process("/usr/bin/qemu-aarch64").mark("usb_ohci_port_suspend")
{
  index = $arg1;
}
probe qemu.user.aarch64.usb_ohci_port_reset = process("/usr/bin/qemu-aarch64").mark("usb_ohci_port_reset")
{
  index = $arg1;
}
probe qemu.user.aarch64.usb_ohci_remote_wakeup = process("/usr/bin/qemu-aarch64").mark("usb_ohci_remote_wakeup")
{
  s = $arg1;
}
probe qemu.user.aarch64.usb_ohci_reset = process("/usr/bin/qemu-aarch64").mark("usb_ohci_reset")
{
  s = $arg1;
}
probe qemu.user.aarch64.usb_ohci_start = process("/usr/bin/qemu-aarch64").mark("usb_ohci_start")
{
  s = $arg1;
}
probe qemu.user.aarch64.usb_ohci_resume = process("/usr/bin/qemu-aarch64").mark("usb_ohci_resume")
{
  s = $arg1;
}
probe qemu.user.aarch64.usb_ohci_stop = process("/usr/bin/qemu-aarch64").mark("usb_ohci_stop")
{
  s = $arg1;
}
probe qemu.user.aarch64.usb_ohci_set_ctl = process("/usr/bin/qemu-aarch64").mark("usb_ohci_set_ctl")
{
  s = $arg1;
  new_state = $arg2;
}
probe qemu.user.aarch64.usb_ohci_td_underrun = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_underrun")
{
}
probe qemu.user.aarch64.usb_ohci_td_dev_error = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_dev_error")
{
}
probe qemu.user.aarch64.usb_ohci_td_nak = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_nak")
{
}
probe qemu.user.aarch64.usb_ohci_td_stall = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_stall")
{
}
probe qemu.user.aarch64.usb_ohci_td_babble = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_babble")
{
}
probe qemu.user.aarch64.usb_ohci_td_bad_device_response = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_bad_device_response")
{
  rc = $arg1;
}
probe qemu.user.aarch64.usb_ohci_td_read_error = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_read_error")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_td_bad_direction = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_bad_direction")
{
  dir = $arg1;
}
probe qemu.user.aarch64.usb_ohci_td_skip_async = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_skip_async")
{
}
probe qemu.user.aarch64.usb_ohci_td_pkt_hdr = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_pkt_hdr")
{
  addr = $arg1;
  pktlen = $arg2;
  len = $arg3;
  s = $arg4;
  flag_r = $arg5;
  cbp = $arg6;
  be = $arg7;
}
probe qemu.user.aarch64.usb_ohci_td_pkt_short = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_pkt_short")
{
  dir = $arg1;
  buf = $arg2;
}
probe qemu.user.aarch64.usb_ohci_td_pkt_full = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_pkt_full")
{
  dir = $arg1;
  buf = $arg2;
}
probe qemu.user.aarch64.usb_ohci_td_too_many_pending = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_too_many_pending")
{
  ep = $arg1;
}
probe qemu.user.aarch64.usb_ohci_td_packet_status = process("/usr/bin/qemu-aarch64").mark("usb_ohci_td_packet_status")
{
  status = $arg1;
}
probe qemu.user.aarch64.usb_ohci_ed_read_error = process("/usr/bin/qemu-aarch64").mark("usb_ohci_ed_read_error")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_ed_pkt = process("/usr/bin/qemu-aarch64").mark("usb_ohci_ed_pkt")
{
  cur = $arg1;
  h = $arg2;
  c = $arg3;
  head = $arg4;
  tail = $arg5;
  next_ = $arg6;
}
probe qemu.user.aarch64.usb_ohci_ed_pkt_flags = process("/usr/bin/qemu-aarch64").mark("usb_ohci_ed_pkt_flags")
{
  fa = $arg1;
  en = $arg2;
  d = $arg3;
  s = $arg4;
  k = $arg5;
  f = $arg6;
  mps = $arg7;
}
probe qemu.user.aarch64.usb_ohci_hcca_read_error = process("/usr/bin/qemu-aarch64").mark("usb_ohci_hcca_read_error")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_mem_read_unaligned = process("/usr/bin/qemu-aarch64").mark("usb_ohci_mem_read_unaligned")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_mem_read_bad_offset = process("/usr/bin/qemu-aarch64").mark("usb_ohci_mem_read_bad_offset")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_mem_write_unaligned = process("/usr/bin/qemu-aarch64").mark("usb_ohci_mem_write_unaligned")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_mem_write_bad_offset = process("/usr/bin/qemu-aarch64").mark("usb_ohci_mem_write_bad_offset")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_ohci_process_lists = process("/usr/bin/qemu-aarch64").mark("usb_ohci_process_lists")
{
  head = $arg1;
  cur = $arg2;
}
probe qemu.user.aarch64.usb_ohci_set_frame_interval = process("/usr/bin/qemu-aarch64").mark("usb_ohci_set_frame_interval")
{
  name = $arg1;
  fi_x = $arg2;
  fi_u = $arg3;
}
probe qemu.user.aarch64.usb_ohci_hub_power_up = process("/usr/bin/qemu-aarch64").mark("usb_ohci_hub_power_up")
{
}
probe qemu.user.aarch64.usb_ohci_hub_power_down = process("/usr/bin/qemu-aarch64").mark("usb_ohci_hub_power_down")
{
}
probe qemu.user.aarch64.usb_ohci_init_time = process("/usr/bin/qemu-aarch64").mark("usb_ohci_init_time")
{
  frametime = $arg1;
  bittime = $arg2;
}
probe qemu.user.aarch64.usb_ohci_die = process("/usr/bin/qemu-aarch64").mark("usb_ohci_die")
{
}
probe qemu.user.aarch64.usb_ohci_async_complete = process("/usr/bin/qemu-aarch64").mark("usb_ohci_async_complete")
{
}
probe qemu.user.aarch64.usb_ehci_reset = process("/usr/bin/qemu-aarch64").mark("usb_ehci_reset")
{
}
probe qemu.user.aarch64.usb_ehci_unrealize = process("/usr/bin/qemu-aarch64").mark("usb_ehci_unrealize")
{
}
probe qemu.user.aarch64.usb_ehci_opreg_read = process("/usr/bin/qemu-aarch64").mark("usb_ehci_opreg_read")
{
  addr = $arg1;
  str = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_ehci_opreg_write = process("/usr/bin/qemu-aarch64").mark("usb_ehci_opreg_write")
{
  addr = $arg1;
  str = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_ehci_opreg_change = process("/usr/bin/qemu-aarch64").mark("usb_ehci_opreg_change")
{
  addr = $arg1;
  str = $arg2;
  new = $arg3;
  old = $arg4;
}
probe qemu.user.aarch64.usb_ehci_portsc_read = process("/usr/bin/qemu-aarch64").mark("usb_ehci_portsc_read")
{
  addr = $arg1;
  port = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_ehci_portsc_write = process("/usr/bin/qemu-aarch64").mark("usb_ehci_portsc_write")
{
  addr = $arg1;
  port = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_ehci_portsc_change = process("/usr/bin/qemu-aarch64").mark("usb_ehci_portsc_change")
{
  addr = $arg1;
  port = $arg2;
  new = $arg3;
  old = $arg4;
}
probe qemu.user.aarch64.usb_ehci_usbsts = process("/usr/bin/qemu-aarch64").mark("usb_ehci_usbsts")
{
  sts = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.usb_ehci_state = process("/usr/bin/qemu-aarch64").mark("usb_ehci_state")
{
  schedule = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.usb_ehci_qh_ptrs = process("/usr/bin/qemu-aarch64").mark("usb_ehci_qh_ptrs")
{
  q = $arg1;
  addr = $arg2;
  nxt = $arg3;
  c_qtd = $arg4;
  n_qtd = $arg5;
  a_qtd = $arg6;
}
probe qemu.user.aarch64.usb_ehci_qh_fields = process("/usr/bin/qemu-aarch64").mark("usb_ehci_qh_fields")
{
  addr = $arg1;
  rl = $arg2;
  mplen = $arg3;
  eps = $arg4;
  ep = $arg5;
  devaddr = $arg6;
}
probe qemu.user.aarch64.usb_ehci_qh_bits = process("/usr/bin/qemu-aarch64").mark("usb_ehci_qh_bits")
{
  addr = $arg1;
  c = $arg2;
  h = $arg3;
  dtc = $arg4;
  i = $arg5;
}
probe qemu.user.aarch64.usb_ehci_qtd_ptrs = process("/usr/bin/qemu-aarch64").mark("usb_ehci_qtd_ptrs")
{
  q = $arg1;
  addr = $arg2;
  nxt = $arg3;
  altnext = $arg4;
}
probe qemu.user.aarch64.usb_ehci_qtd_fields = process("/usr/bin/qemu-aarch64").mark("usb_ehci_qtd_fields")
{
  addr = $arg1;
  tbytes = $arg2;
  cpage = $arg3;
  cerr = $arg4;
  pid = $arg5;
}
probe qemu.user.aarch64.usb_ehci_qtd_bits = process("/usr/bin/qemu-aarch64").mark("usb_ehci_qtd_bits")
{
  addr = $arg1;
  ioc = $arg2;
  active = $arg3;
  halt = $arg4;
  babble = $arg5;
  xacterr = $arg6;
}
probe qemu.user.aarch64.usb_ehci_itd = process("/usr/bin/qemu-aarch64").mark("usb_ehci_itd")
{
  addr = $arg1;
  nxt = $arg2;
  mplen = $arg3;
  mult = $arg4;
  ep = $arg5;
  devaddr = $arg6;
}
probe qemu.user.aarch64.usb_ehci_sitd = process("/usr/bin/qemu-aarch64").mark("usb_ehci_sitd")
{
  addr = $arg1;
  nxt = $arg2;
  active = $arg3;
}
probe qemu.user.aarch64.usb_ehci_port_attach = process("/usr/bin/qemu-aarch64").mark("usb_ehci_port_attach")
{
  port = $arg1;
  owner = $arg2;
  device = $arg3;
}
probe qemu.user.aarch64.usb_ehci_port_detach = process("/usr/bin/qemu-aarch64").mark("usb_ehci_port_detach")
{
  port = $arg1;
  owner = $arg2;
}
probe qemu.user.aarch64.usb_ehci_port_reset = process("/usr/bin/qemu-aarch64").mark("usb_ehci_port_reset")
{
  port = $arg1;
  enable = $arg2;
}
probe qemu.user.aarch64.usb_ehci_port_suspend = process("/usr/bin/qemu-aarch64").mark("usb_ehci_port_suspend")
{
  port = $arg1;
}
probe qemu.user.aarch64.usb_ehci_port_wakeup = process("/usr/bin/qemu-aarch64").mark("usb_ehci_port_wakeup")
{
  port = $arg1;
}
probe qemu.user.aarch64.usb_ehci_port_resume = process("/usr/bin/qemu-aarch64").mark("usb_ehci_port_resume")
{
  port = $arg1;
}
probe qemu.user.aarch64.usb_ehci_queue_action = process("/usr/bin/qemu-aarch64").mark("usb_ehci_queue_action")
{
  q = $arg1;
  action = $arg2;
}
probe qemu.user.aarch64.usb_ehci_packet_action = process("/usr/bin/qemu-aarch64").mark("usb_ehci_packet_action")
{
  q = $arg1;
  p = $arg2;
  action = $arg3;
}
probe qemu.user.aarch64.usb_ehci_irq = process("/usr/bin/qemu-aarch64").mark("usb_ehci_irq")
{
  level = $arg1;
  frindex = $arg2;
  sts = $arg3;
  mask = $arg4;
}
probe qemu.user.aarch64.usb_ehci_guest_bug = process("/usr/bin/qemu-aarch64").mark("usb_ehci_guest_bug")
{
  reason = $arg1;
}
probe qemu.user.aarch64.usb_ehci_doorbell_ring = process("/usr/bin/qemu-aarch64").mark("usb_ehci_doorbell_ring")
{
}
probe qemu.user.aarch64.usb_ehci_doorbell_ack = process("/usr/bin/qemu-aarch64").mark("usb_ehci_doorbell_ack")
{
}
probe qemu.user.aarch64.usb_ehci_dma_error = process("/usr/bin/qemu-aarch64").mark("usb_ehci_dma_error")
{
}
probe qemu.user.aarch64.usb_uhci_reset = process("/usr/bin/qemu-aarch64").mark("usb_uhci_reset")
{
}
probe qemu.user.aarch64.usb_uhci_exit = process("/usr/bin/qemu-aarch64").mark("usb_uhci_exit")
{
}
probe qemu.user.aarch64.usb_uhci_schedule_start = process("/usr/bin/qemu-aarch64").mark("usb_uhci_schedule_start")
{
}
probe qemu.user.aarch64.usb_uhci_schedule_stop = process("/usr/bin/qemu-aarch64").mark("usb_uhci_schedule_stop")
{
}
probe qemu.user.aarch64.usb_uhci_frame_start = process("/usr/bin/qemu-aarch64").mark("usb_uhci_frame_start")
{
  num = $arg1;
}
probe qemu.user.aarch64.usb_uhci_frame_stop_bandwidth = process("/usr/bin/qemu-aarch64").mark("usb_uhci_frame_stop_bandwidth")
{
}
probe qemu.user.aarch64.usb_uhci_frame_loop_stop_idle = process("/usr/bin/qemu-aarch64").mark("usb_uhci_frame_loop_stop_idle")
{
}
probe qemu.user.aarch64.usb_uhci_frame_loop_continue = process("/usr/bin/qemu-aarch64").mark("usb_uhci_frame_loop_continue")
{
}
probe qemu.user.aarch64.usb_uhci_mmio_readw = process("/usr/bin/qemu-aarch64").mark("usb_uhci_mmio_readw")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_uhci_mmio_writew = process("/usr/bin/qemu-aarch64").mark("usb_uhci_mmio_writew")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_uhci_queue_add = process("/usr/bin/qemu-aarch64").mark("usb_uhci_queue_add")
{
  token = $arg1;
}
probe qemu.user.aarch64.usb_uhci_queue_del = process("/usr/bin/qemu-aarch64").mark("usb_uhci_queue_del")
{
  token = $arg1;
  reason = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_add = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_add")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_link_async = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_link_async")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_unlink_async = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_unlink_async")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_cancel = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_cancel")
{
  token = $arg1;
  addr = $arg2;
  done = $arg3;
}
probe qemu.user.aarch64.usb_uhci_packet_complete_success = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_complete_success")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_complete_shortxfer = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_complete_shortxfer")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_complete_stall = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_complete_stall")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_complete_babble = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_complete_babble")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_complete_error = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_complete_error")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_packet_del = process("/usr/bin/qemu-aarch64").mark("usb_uhci_packet_del")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_uhci_qh_load = process("/usr/bin/qemu-aarch64").mark("usb_uhci_qh_load")
{
  qh = $arg1;
}
probe qemu.user.aarch64.usb_uhci_td_load = process("/usr/bin/qemu-aarch64").mark("usb_uhci_td_load")
{
  qh = $arg1;
  td = $arg2;
  ctrl = $arg3;
  token = $arg4;
}
probe qemu.user.aarch64.usb_uhci_td_queue = process("/usr/bin/qemu-aarch64").mark("usb_uhci_td_queue")
{
  td = $arg1;
  ctrl = $arg2;
  token = $arg3;
}
probe qemu.user.aarch64.usb_uhci_td_nextqh = process("/usr/bin/qemu-aarch64").mark("usb_uhci_td_nextqh")
{
  qh = $arg1;
  td = $arg2;
}
probe qemu.user.aarch64.usb_uhci_td_async = process("/usr/bin/qemu-aarch64").mark("usb_uhci_td_async")
{
  qh = $arg1;
  td = $arg2;
}
probe qemu.user.aarch64.usb_uhci_td_complete = process("/usr/bin/qemu-aarch64").mark("usb_uhci_td_complete")
{
  qh = $arg1;
  td = $arg2;
}
probe qemu.user.aarch64.usb_xhci_reset = process("/usr/bin/qemu-aarch64").mark("usb_xhci_reset")
{
}
probe qemu.user.aarch64.usb_xhci_exit = process("/usr/bin/qemu-aarch64").mark("usb_xhci_exit")
{
}
probe qemu.user.aarch64.usb_xhci_run = process("/usr/bin/qemu-aarch64").mark("usb_xhci_run")
{
}
probe qemu.user.aarch64.usb_xhci_stop = process("/usr/bin/qemu-aarch64").mark("usb_xhci_stop")
{
}
probe qemu.user.aarch64.usb_xhci_cap_read = process("/usr/bin/qemu-aarch64").mark("usb_xhci_cap_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_xhci_oper_read = process("/usr/bin/qemu-aarch64").mark("usb_xhci_oper_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_xhci_port_read = process("/usr/bin/qemu-aarch64").mark("usb_xhci_port_read")
{
  port = $arg1;
  off = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_xhci_runtime_read = process("/usr/bin/qemu-aarch64").mark("usb_xhci_runtime_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_xhci_doorbell_read = process("/usr/bin/qemu-aarch64").mark("usb_xhci_doorbell_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_xhci_oper_write = process("/usr/bin/qemu-aarch64").mark("usb_xhci_oper_write")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_xhci_port_write = process("/usr/bin/qemu-aarch64").mark("usb_xhci_port_write")
{
  port = $arg1;
  off = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_xhci_runtime_write = process("/usr/bin/qemu-aarch64").mark("usb_xhci_runtime_write")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_xhci_doorbell_write = process("/usr/bin/qemu-aarch64").mark("usb_xhci_doorbell_write")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_xhci_irq_intx = process("/usr/bin/qemu-aarch64").mark("usb_xhci_irq_intx")
{
  level = $arg1;
}
probe qemu.user.aarch64.usb_xhci_irq_msi = process("/usr/bin/qemu-aarch64").mark("usb_xhci_irq_msi")
{
  nr = $arg1;
}
probe qemu.user.aarch64.usb_xhci_irq_msix = process("/usr/bin/qemu-aarch64").mark("usb_xhci_irq_msix")
{
  nr = $arg1;
}
probe qemu.user.aarch64.usb_xhci_irq_msix_use = process("/usr/bin/qemu-aarch64").mark("usb_xhci_irq_msix_use")
{
  nr = $arg1;
}
probe qemu.user.aarch64.usb_xhci_irq_msix_unuse = process("/usr/bin/qemu-aarch64").mark("usb_xhci_irq_msix_unuse")
{
  nr = $arg1;
}
probe qemu.user.aarch64.usb_xhci_queue_event = process("/usr/bin/qemu-aarch64").mark("usb_xhci_queue_event")
{
  vector = $arg1;
  idx = $arg2;
  trb = $arg3;
  evt = $arg4;
  param = $arg5;
  status = $arg6;
  control = $arg7;
}
probe qemu.user.aarch64.usb_xhci_fetch_trb = process("/usr/bin/qemu-aarch64").mark("usb_xhci_fetch_trb")
{
  addr = $arg1;
  name = $arg2;
  param = $arg3;
  status = $arg4;
  control = $arg5;
}
probe qemu.user.aarch64.usb_xhci_port_reset = process("/usr/bin/qemu-aarch64").mark("usb_xhci_port_reset")
{
  port = $arg1;
  warm = $arg2;
}
probe qemu.user.aarch64.usb_xhci_port_link = process("/usr/bin/qemu-aarch64").mark("usb_xhci_port_link")
{
  port = $arg1;
  pls = $arg2;
}
probe qemu.user.aarch64.usb_xhci_port_notify = process("/usr/bin/qemu-aarch64").mark("usb_xhci_port_notify")
{
  port = $arg1;
  pls = $arg2;
}
probe qemu.user.aarch64.usb_xhci_slot_enable = process("/usr/bin/qemu-aarch64").mark("usb_xhci_slot_enable")
{
  slotid = $arg1;
}
probe qemu.user.aarch64.usb_xhci_slot_disable = process("/usr/bin/qemu-aarch64").mark("usb_xhci_slot_disable")
{
  slotid = $arg1;
}
probe qemu.user.aarch64.usb_xhci_slot_address = process("/usr/bin/qemu-aarch64").mark("usb_xhci_slot_address")
{
  slotid = $arg1;
  port = $arg2;
}
probe qemu.user.aarch64.usb_xhci_slot_configure = process("/usr/bin/qemu-aarch64").mark("usb_xhci_slot_configure")
{
  slotid = $arg1;
}
probe qemu.user.aarch64.usb_xhci_slot_evaluate = process("/usr/bin/qemu-aarch64").mark("usb_xhci_slot_evaluate")
{
  slotid = $arg1;
}
probe qemu.user.aarch64.usb_xhci_slot_reset = process("/usr/bin/qemu-aarch64").mark("usb_xhci_slot_reset")
{
  slotid = $arg1;
}
probe qemu.user.aarch64.usb_xhci_ep_enable = process("/usr/bin/qemu-aarch64").mark("usb_xhci_ep_enable")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.user.aarch64.usb_xhci_ep_disable = process("/usr/bin/qemu-aarch64").mark("usb_xhci_ep_disable")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.user.aarch64.usb_xhci_ep_set_dequeue = process("/usr/bin/qemu-aarch64").mark("usb_xhci_ep_set_dequeue")
{
  slotid = $arg1;
  epid = $arg2;
  streamid = $arg3;
  param = $arg4;
}
probe qemu.user.aarch64.usb_xhci_ep_kick = process("/usr/bin/qemu-aarch64").mark("usb_xhci_ep_kick")
{
  slotid = $arg1;
  epid = $arg2;
  streamid = $arg3;
}
probe qemu.user.aarch64.usb_xhci_ep_stop = process("/usr/bin/qemu-aarch64").mark("usb_xhci_ep_stop")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.user.aarch64.usb_xhci_ep_reset = process("/usr/bin/qemu-aarch64").mark("usb_xhci_ep_reset")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.user.aarch64.usb_xhci_ep_state = process("/usr/bin/qemu-aarch64").mark("usb_xhci_ep_state")
{
  slotid = $arg1;
  epid = $arg2;
  os = $arg3;
  ns = $arg4;
}
probe qemu.user.aarch64.usb_xhci_xfer_start = process("/usr/bin/qemu-aarch64").mark("usb_xhci_xfer_start")
{
  xfer = $arg1;
  slotid = $arg2;
  epid = $arg3;
  streamid = $arg4;
}
probe qemu.user.aarch64.usb_xhci_xfer_async = process("/usr/bin/qemu-aarch64").mark("usb_xhci_xfer_async")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.usb_xhci_xfer_nak = process("/usr/bin/qemu-aarch64").mark("usb_xhci_xfer_nak")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.usb_xhci_xfer_retry = process("/usr/bin/qemu-aarch64").mark("usb_xhci_xfer_retry")
{
  xfer = $arg1;
}
probe qemu.user.aarch64.usb_xhci_xfer_success = process("/usr/bin/qemu-aarch64").mark("usb_xhci_xfer_success")
{
  xfer = $arg1;
  bytes = $arg2;
}
probe qemu.user.aarch64.usb_xhci_xfer_error = process("/usr/bin/qemu-aarch64").mark("usb_xhci_xfer_error")
{
  xfer = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.usb_xhci_unimplemented = process("/usr/bin/qemu-aarch64").mark("usb_xhci_unimplemented")
{
  item = $arg1;
  nr = $arg2;
}
probe qemu.user.aarch64.usb_xhci_enforced_limit = process("/usr/bin/qemu-aarch64").mark("usb_xhci_enforced_limit")
{
  item = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_update_irq = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_update_irq")
{
  level = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_raise_global_irq = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_raise_global_irq")
{
  intr = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_lower_global_irq = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_lower_global_irq")
{
  intr = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_raise_host_irq = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_raise_host_irq")
{
  intr = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_lower_host_irq = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_lower_host_irq")
{
  intr = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_sof = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_sof")
{
  next_ = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_bus_start = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_bus_start")
{
}
probe qemu.user.aarch64.usb_dwc2_bus_stop = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_bus_stop")
{
}
probe qemu.user.aarch64.usb_dwc2_find_device = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_find_device")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_port_disabled = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_port_disabled")
{
  pnum = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_device_found = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_device_found")
{
  pnum = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_device_not_found = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_device_not_found")
{
}
probe qemu.user.aarch64.usb_dwc2_handle_packet = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_handle_packet")
{
  chan = $arg1;
  dev = $arg2;
  pkt = $arg3;
  ep = $arg4;
  type = $arg5;
  dir = $arg6;
  mps = $arg7;
  len = $arg8;
  pcnt = $arg9;
}
probe qemu.user.aarch64.usb_dwc2_memory_read = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_memory_read")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.usb_dwc2_packet_status = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_packet_status")
{
  status = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.usb_dwc2_packet_error = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_packet_error")
{
  status = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_async_packet = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_async_packet")
{
  pkt = $arg1;
  chan = $arg2;
  dev = $arg3;
  ep = $arg4;
  dir = $arg5;
  len = $arg6;
}
probe qemu.user.aarch64.usb_dwc2_memory_write = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_memory_write")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.usb_dwc2_packet_done = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_packet_done")
{
  status = $arg1;
  actual = $arg2;
  len = $arg3;
  pcnt = $arg4;
}
probe qemu.user.aarch64.usb_dwc2_packet_next = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_packet_next")
{
  status = $arg1;
  len = $arg2;
  pcnt = $arg3;
}
probe qemu.user.aarch64.usb_dwc2_attach = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_attach")
{
  port = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_attach_speed = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_attach_speed")
{
  speed = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_detach = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_detach")
{
  port = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_child_detach = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_child_detach")
{
  port = $arg1;
  child = $arg2;
}
probe qemu.user.aarch64.usb_dwc2_wakeup = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_wakeup")
{
  port = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_async_packet_complete = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_async_packet_complete")
{
  port = $arg1;
  pkt = $arg2;
  chan = $arg3;
  dev = $arg4;
  ep = $arg5;
  dir = $arg6;
  len = $arg7;
}
probe qemu.user.aarch64.usb_dwc2_work_bh = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_work_bh")
{
}
probe qemu.user.aarch64.usb_dwc2_work_bh_service = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_work_bh_service")
{
  first = $arg1;
  current = $arg2;
  dev = $arg3;
  ep = $arg4;
}
probe qemu.user.aarch64.usb_dwc2_work_bh_next = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_work_bh_next")
{
  chan = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_enable_chan = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_enable_chan")
{
  chan = $arg1;
  dev = $arg2;
  pkt = $arg3;
  ep = $arg4;
}
probe qemu.user.aarch64.usb_dwc2_glbreg_read = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_glbreg_read")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_dwc2_glbreg_write = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_glbreg_write")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
  old = $arg4;
  result = $arg5;
}
probe qemu.user.aarch64.usb_dwc2_fszreg_read = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_fszreg_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.usb_dwc2_fszreg_write = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_fszreg_write")
{
  addr = $arg1;
  val = $arg2;
  old = $arg3;
  result = $arg4;
}
probe qemu.user.aarch64.usb_dwc2_hreg0_read = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_hreg0_read")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_dwc2_hreg0_write = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_hreg0_write")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
  old = $arg4;
  result = $arg5;
}
probe qemu.user.aarch64.usb_dwc2_hreg1_read = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_hreg1_read")
{
  addr = $arg1;
  reg = $arg2;
  chan = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.usb_dwc2_hreg1_write = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_hreg1_write")
{
  addr = $arg1;
  reg = $arg2;
  chan = $arg3;
  val = $arg4;
  old = $arg5;
  result = $arg6;
}
probe qemu.user.aarch64.usb_dwc2_pcgreg_read = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_pcgreg_read")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_dwc2_pcgreg_write = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_pcgreg_write")
{
  addr = $arg1;
  reg = $arg2;
  val = $arg3;
  old = $arg4;
  result = $arg5;
}
probe qemu.user.aarch64.usb_dwc2_hreg2_read = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_hreg2_read")
{
  addr = $arg1;
  fifo = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.usb_dwc2_hreg2_write = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_hreg2_write")
{
  addr = $arg1;
  fifo = $arg2;
  val = $arg3;
  old = $arg4;
  result = $arg5;
}
probe qemu.user.aarch64.usb_dwc2_hreg0_action = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_hreg0_action")
{
  s = $arg1;
}
probe qemu.user.aarch64.usb_dwc2_wakeup_endpoint = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_wakeup_endpoint")
{
  ep = $arg1;
  stream = $arg2;
}
probe qemu.user.aarch64.usb_dwc2_work_timer = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_work_timer")
{
}
probe qemu.user.aarch64.usb_dwc2_reset_enter = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_reset_enter")
{
}
probe qemu.user.aarch64.usb_dwc2_reset_hold = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_reset_hold")
{
}
probe qemu.user.aarch64.usb_dwc2_reset_exit = process("/usr/bin/qemu-aarch64").mark("usb_dwc2_reset_exit")
{
}
probe qemu.user.aarch64.usb_desc_device = process("/usr/bin/qemu-aarch64").mark("usb_desc_device")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.usb_desc_device_qualifier = process("/usr/bin/qemu-aarch64").mark("usb_desc_device_qualifier")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.usb_desc_config = process("/usr/bin/qemu-aarch64").mark("usb_desc_config")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.usb_desc_other_speed_config = process("/usr/bin/qemu-aarch64").mark("usb_desc_other_speed_config")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.usb_desc_string = process("/usr/bin/qemu-aarch64").mark("usb_desc_string")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.usb_desc_bos = process("/usr/bin/qemu-aarch64").mark("usb_desc_bos")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.usb_desc_msos = process("/usr/bin/qemu-aarch64").mark("usb_desc_msos")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.usb_set_addr = process("/usr/bin/qemu-aarch64").mark("usb_set_addr")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_set_config = process("/usr/bin/qemu-aarch64").mark("usb_set_config")
{
  addr = $arg1;
  config = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.usb_set_interface = process("/usr/bin/qemu-aarch64").mark("usb_set_interface")
{
  addr = $arg1;
  iface = $arg2;
  alt = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.usb_clear_device_feature = process("/usr/bin/qemu-aarch64").mark("usb_clear_device_feature")
{
  addr = $arg1;
  feature = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.usb_set_device_feature = process("/usr/bin/qemu-aarch64").mark("usb_set_device_feature")
{
  addr = $arg1;
  feature = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.usb_hub_reset = process("/usr/bin/qemu-aarch64").mark("usb_hub_reset")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_hub_control = process("/usr/bin/qemu-aarch64").mark("usb_hub_control")
{
  addr = $arg1;
  request = $arg2;
  value = $arg3;
  index = $arg4;
  length = $arg5;
}
probe qemu.user.aarch64.usb_hub_get_port_status = process("/usr/bin/qemu-aarch64").mark("usb_hub_get_port_status")
{
  addr = $arg1;
  nr = $arg2;
  status = $arg3;
  changed = $arg4;
}
probe qemu.user.aarch64.usb_hub_set_port_feature = process("/usr/bin/qemu-aarch64").mark("usb_hub_set_port_feature")
{
  addr = $arg1;
  nr = $arg2;
  f = $arg3;
}
probe qemu.user.aarch64.usb_hub_clear_port_feature = process("/usr/bin/qemu-aarch64").mark("usb_hub_clear_port_feature")
{
  addr = $arg1;
  nr = $arg2;
  f = $arg3;
}
probe qemu.user.aarch64.usb_hub_attach = process("/usr/bin/qemu-aarch64").mark("usb_hub_attach")
{
  addr = $arg1;
  nr = $arg2;
}
probe qemu.user.aarch64.usb_hub_detach = process("/usr/bin/qemu-aarch64").mark("usb_hub_detach")
{
  addr = $arg1;
  nr = $arg2;
}
probe qemu.user.aarch64.usb_hub_status_report = process("/usr/bin/qemu-aarch64").mark("usb_hub_status_report")
{
  addr = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.usb_msd_reset = process("/usr/bin/qemu-aarch64").mark("usb_msd_reset")
{
}
probe qemu.user.aarch64.usb_msd_maxlun = process("/usr/bin/qemu-aarch64").mark("usb_msd_maxlun")
{
  maxlun = $arg1;
}
probe qemu.user.aarch64.usb_msd_send_status = process("/usr/bin/qemu-aarch64").mark("usb_msd_send_status")
{
  status = $arg1;
  tag = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.usb_msd_data_in = process("/usr/bin/qemu-aarch64").mark("usb_msd_data_in")
{
  packet = $arg1;
  remaining = $arg2;
  total = $arg3;
}
probe qemu.user.aarch64.usb_msd_data_out = process("/usr/bin/qemu-aarch64").mark("usb_msd_data_out")
{
  packet = $arg1;
  remaining = $arg2;
}
probe qemu.user.aarch64.usb_msd_packet_async = process("/usr/bin/qemu-aarch64").mark("usb_msd_packet_async")
{
}
probe qemu.user.aarch64.usb_msd_packet_complete = process("/usr/bin/qemu-aarch64").mark("usb_msd_packet_complete")
{
}
probe qemu.user.aarch64.usb_msd_cmd_submit = process("/usr/bin/qemu-aarch64").mark("usb_msd_cmd_submit")
{
  lun = $arg1;
  tag = $arg2;
  flags = $arg3;
  len = $arg4;
  data_len = $arg5;
}
probe qemu.user.aarch64.usb_msd_cmd_complete = process("/usr/bin/qemu-aarch64").mark("usb_msd_cmd_complete")
{
  status = $arg1;
  tag = $arg2;
}
probe qemu.user.aarch64.usb_msd_cmd_cancel = process("/usr/bin/qemu-aarch64").mark("usb_msd_cmd_cancel")
{
  tag = $arg1;
}
probe qemu.user.aarch64.usb_msd_fatal_error = process("/usr/bin/qemu-aarch64").mark("usb_msd_fatal_error")
{
}
probe qemu.user.aarch64.usb_uas_reset = process("/usr/bin/qemu-aarch64").mark("usb_uas_reset")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_uas_command = process("/usr/bin/qemu-aarch64").mark("usb_uas_command")
{
  addr = $arg1;
  tag = $arg2;
  lun = $arg3;
  lun64_1 = $arg4;
  lun64_2 = $arg5;
}
probe qemu.user.aarch64.usb_uas_response = process("/usr/bin/qemu-aarch64").mark("usb_uas_response")
{
  addr = $arg1;
  tag = $arg2;
  code = $arg3;
}
probe qemu.user.aarch64.usb_uas_sense = process("/usr/bin/qemu-aarch64").mark("usb_uas_sense")
{
  addr = $arg1;
  tag = $arg2;
  status = $arg3;
}
probe qemu.user.aarch64.usb_uas_read_ready = process("/usr/bin/qemu-aarch64").mark("usb_uas_read_ready")
{
  addr = $arg1;
  tag = $arg2;
}
probe qemu.user.aarch64.usb_uas_write_ready = process("/usr/bin/qemu-aarch64").mark("usb_uas_write_ready")
{
  addr = $arg1;
  tag = $arg2;
}
probe qemu.user.aarch64.usb_uas_xfer_data = process("/usr/bin/qemu-aarch64").mark("usb_uas_xfer_data")
{
  addr = $arg1;
  tag = $arg2;
  copy = $arg3;
  uoff = $arg4;
  usize = $arg5;
  soff = $arg6;
  ssize = $arg7;
}
probe qemu.user.aarch64.usb_uas_scsi_data = process("/usr/bin/qemu-aarch64").mark("usb_uas_scsi_data")
{
  addr = $arg1;
  tag = $arg2;
  bytes = $arg3;
}
probe qemu.user.aarch64.usb_uas_scsi_complete = process("/usr/bin/qemu-aarch64").mark("usb_uas_scsi_complete")
{
  addr = $arg1;
  tag = $arg2;
  status = $arg3;
  resid = $arg4;
}
probe qemu.user.aarch64.usb_uas_tmf_abort_task = process("/usr/bin/qemu-aarch64").mark("usb_uas_tmf_abort_task")
{
  addr = $arg1;
  tag = $arg2;
  task_tag = $arg3;
}
probe qemu.user.aarch64.usb_uas_tmf_logical_unit_reset = process("/usr/bin/qemu-aarch64").mark("usb_uas_tmf_logical_unit_reset")
{
  addr = $arg1;
  tag = $arg2;
  lun = $arg3;
}
probe qemu.user.aarch64.usb_uas_tmf_unsupported = process("/usr/bin/qemu-aarch64").mark("usb_uas_tmf_unsupported")
{
  addr = $arg1;
  tag = $arg2;
  function_ = $arg3;
}
probe qemu.user.aarch64.usb_mtp_reset = process("/usr/bin/qemu-aarch64").mark("usb_mtp_reset")
{
  addr = $arg1;
}
probe qemu.user.aarch64.usb_mtp_command = process("/usr/bin/qemu-aarch64").mark("usb_mtp_command")
{
  dev = $arg1;
  code = $arg2;
  trans = $arg3;
  arg0 = $arg4;
  arg1 = $arg5;
  arg2 = $arg6;
  arg3 = $arg7;
  arg4 = $arg8;
}
probe qemu.user.aarch64.usb_mtp_success = process("/usr/bin/qemu-aarch64").mark("usb_mtp_success")
{
  dev = $arg1;
  trans = $arg2;
  arg0 = $arg3;
  arg1 = $arg4;
}
probe qemu.user.aarch64.usb_mtp_error = process("/usr/bin/qemu-aarch64").mark("usb_mtp_error")
{
  dev = $arg1;
  code = $arg2;
  trans = $arg3;
  arg0 = $arg4;
  arg1 = $arg5;
}
probe qemu.user.aarch64.usb_mtp_data_in = process("/usr/bin/qemu-aarch64").mark("usb_mtp_data_in")
{
  dev = $arg1;
  trans = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.usb_mtp_xfer = process("/usr/bin/qemu-aarch64").mark("usb_mtp_xfer")
{
  dev = $arg1;
  ep = $arg2;
  dlen = $arg3;
  plen = $arg4;
}
probe qemu.user.aarch64.usb_mtp_nak = process("/usr/bin/qemu-aarch64").mark("usb_mtp_nak")
{
  dev = $arg1;
  ep = $arg2;
}
probe qemu.user.aarch64.usb_mtp_stall = process("/usr/bin/qemu-aarch64").mark("usb_mtp_stall")
{
  dev = $arg1;
  reason = $arg2;
}
probe qemu.user.aarch64.usb_mtp_op_get_device_info = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_device_info")
{
  dev = $arg1;
}
probe qemu.user.aarch64.usb_mtp_op_open_session = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_open_session")
{
  dev = $arg1;
}
probe qemu.user.aarch64.usb_mtp_op_close_session = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_close_session")
{
  dev = $arg1;
}
probe qemu.user.aarch64.usb_mtp_op_get_storage_ids = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_storage_ids")
{
  dev = $arg1;
}
probe qemu.user.aarch64.usb_mtp_op_get_storage_info = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_storage_info")
{
  dev = $arg1;
}
probe qemu.user.aarch64.usb_mtp_op_get_num_objects = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_num_objects")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.usb_mtp_op_get_object_handles = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_object_handles")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.usb_mtp_op_get_object_info = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_object_info")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.usb_mtp_op_get_object = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_object")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.usb_mtp_op_get_partial_object = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_get_partial_object")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
  offset = $arg4;
  length = $arg5;
}
probe qemu.user.aarch64.usb_mtp_op_unknown = process("/usr/bin/qemu-aarch64").mark("usb_mtp_op_unknown")
{
  dev = $arg1;
  code = $arg2;
}
probe qemu.user.aarch64.usb_mtp_object_alloc = process("/usr/bin/qemu-aarch64").mark("usb_mtp_object_alloc")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.usb_mtp_object_free = process("/usr/bin/qemu-aarch64").mark("usb_mtp_object_free")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.usb_mtp_add_child = process("/usr/bin/qemu-aarch64").mark("usb_mtp_add_child")
{
  dev = $arg1;
  handle = $arg2;
  path = $arg3;
}
probe qemu.user.aarch64.usb_mtp_file_monitor_event = process("/usr/bin/qemu-aarch64").mark("usb_mtp_file_monitor_event")
{
  dev = $arg1;
  path = $arg2;
  s = $arg3;
}
probe qemu.user.aarch64.usb_host_open_started = process("/usr/bin/qemu-aarch64").mark("usb_host_open_started")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_host_open_hostfd = process("/usr/bin/qemu-aarch64").mark("usb_host_open_hostfd")
{
  hostfd = $arg1;
}
probe qemu.user.aarch64.usb_host_open_success = process("/usr/bin/qemu-aarch64").mark("usb_host_open_success")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_host_open_failure = process("/usr/bin/qemu-aarch64").mark("usb_host_open_failure")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_host_close = process("/usr/bin/qemu-aarch64").mark("usb_host_close")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_host_attach_kernel = process("/usr/bin/qemu-aarch64").mark("usb_host_attach_kernel")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
}
probe qemu.user.aarch64.usb_host_detach_kernel = process("/usr/bin/qemu-aarch64").mark("usb_host_detach_kernel")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
}
probe qemu.user.aarch64.usb_host_set_address = process("/usr/bin/qemu-aarch64").mark("usb_host_set_address")
{
  bus = $arg1;
  addr = $arg2;
  config = $arg3;
}
probe qemu.user.aarch64.usb_host_set_config = process("/usr/bin/qemu-aarch64").mark("usb_host_set_config")
{
  bus = $arg1;
  addr = $arg2;
  config = $arg3;
}
probe qemu.user.aarch64.usb_host_set_interface = process("/usr/bin/qemu-aarch64").mark("usb_host_set_interface")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
  alt = $arg4;
}
probe qemu.user.aarch64.usb_host_claim_interface = process("/usr/bin/qemu-aarch64").mark("usb_host_claim_interface")
{
  bus = $arg1;
  addr = $arg2;
  config = $arg3;
  interface = $arg4;
}
probe qemu.user.aarch64.usb_host_release_interface = process("/usr/bin/qemu-aarch64").mark("usb_host_release_interface")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
}
probe qemu.user.aarch64.usb_host_req_control = process("/usr/bin/qemu-aarch64").mark("usb_host_req_control")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  req = $arg4;
  value = $arg5;
  index = $arg6;
}
probe qemu.user.aarch64.usb_host_req_data = process("/usr/bin/qemu-aarch64").mark("usb_host_req_data")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  in_ = $arg4;
  ep = $arg5;
  size = $arg6;
}
probe qemu.user.aarch64.usb_host_req_complete = process("/usr/bin/qemu-aarch64").mark("usb_host_req_complete")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  status = $arg4;
  length = $arg5;
}
probe qemu.user.aarch64.usb_host_req_emulated = process("/usr/bin/qemu-aarch64").mark("usb_host_req_emulated")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  status = $arg4;
}
probe qemu.user.aarch64.usb_host_req_canceled = process("/usr/bin/qemu-aarch64").mark("usb_host_req_canceled")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
}
probe qemu.user.aarch64.usb_host_iso_start = process("/usr/bin/qemu-aarch64").mark("usb_host_iso_start")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
}
probe qemu.user.aarch64.usb_host_iso_stop = process("/usr/bin/qemu-aarch64").mark("usb_host_iso_stop")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
}
probe qemu.user.aarch64.usb_host_iso_out_of_bufs = process("/usr/bin/qemu-aarch64").mark("usb_host_iso_out_of_bufs")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
}
probe qemu.user.aarch64.usb_host_reset = process("/usr/bin/qemu-aarch64").mark("usb_host_reset")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_host_auto_scan_enabled = process("/usr/bin/qemu-aarch64").mark("usb_host_auto_scan_enabled")
{
}
probe qemu.user.aarch64.usb_host_auto_scan_disabled = process("/usr/bin/qemu-aarch64").mark("usb_host_auto_scan_disabled")
{
}
probe qemu.user.aarch64.usb_host_parse_config = process("/usr/bin/qemu-aarch64").mark("usb_host_parse_config")
{
  bus = $arg1;
  addr = $arg2;
  value = $arg3;
  active = $arg4;
}
probe qemu.user.aarch64.usb_host_parse_interface = process("/usr/bin/qemu-aarch64").mark("usb_host_parse_interface")
{
  bus = $arg1;
  addr = $arg2;
  num = $arg3;
  alt = $arg4;
  active = $arg5;
}
probe qemu.user.aarch64.usb_host_parse_endpoint = process("/usr/bin/qemu-aarch64").mark("usb_host_parse_endpoint")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
  dir = $arg4;
  type = $arg5;
  active = $arg6;
}
probe qemu.user.aarch64.usb_host_parse_error = process("/usr/bin/qemu-aarch64").mark("usb_host_parse_error")
{
  bus = $arg1;
  addr = $arg2;
  errmsg = $arg3;
}
probe qemu.user.aarch64.usb_host_remote_wakeup_removed = process("/usr/bin/qemu-aarch64").mark("usb_host_remote_wakeup_removed")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_serial_reset = process("/usr/bin/qemu-aarch64").mark("usb_serial_reset")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_serial_handle_control = process("/usr/bin/qemu-aarch64").mark("usb_serial_handle_control")
{
  bus = $arg1;
  addr = $arg2;
  request = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.usb_serial_unsupported_parity = process("/usr/bin/qemu-aarch64").mark("usb_serial_unsupported_parity")
{
  bus = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.usb_serial_unsupported_stopbits = process("/usr/bin/qemu-aarch64").mark("usb_serial_unsupported_stopbits")
{
  bus = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.usb_serial_unsupported_control = process("/usr/bin/qemu-aarch64").mark("usb_serial_unsupported_control")
{
  bus = $arg1;
  addr = $arg2;
  request = $arg3;
  value = $arg4;
}
probe qemu.user.aarch64.usb_serial_unsupported_data_bits = process("/usr/bin/qemu-aarch64").mark("usb_serial_unsupported_data_bits")
{
  bus = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.usb_serial_bad_token = process("/usr/bin/qemu-aarch64").mark("usb_serial_bad_token")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.usb_serial_set_baud = process("/usr/bin/qemu-aarch64").mark("usb_serial_set_baud")
{
  bus = $arg1;
  addr = $arg2;
  baud = $arg3;
}
probe qemu.user.aarch64.usb_serial_set_data = process("/usr/bin/qemu-aarch64").mark("usb_serial_set_data")
{
  bus = $arg1;
  addr = $arg2;
  parity = $arg3;
  data = $arg4;
  stop = $arg5;
}
probe qemu.user.aarch64.usb_serial_set_flow_control = process("/usr/bin/qemu-aarch64").mark("usb_serial_set_flow_control")
{
  bus = $arg1;
  addr = $arg2;
  index = $arg3;
}
probe qemu.user.aarch64.usb_serial_set_xonxoff = process("/usr/bin/qemu-aarch64").mark("usb_serial_set_xonxoff")
{
  bus = $arg1;
  addr = $arg2;
  xon = $arg3;
  xoff = $arg4;
}
probe qemu.user.aarch64.canokey_emu_stall_ep = process("/usr/bin/qemu-aarch64").mark("canokey_emu_stall_ep")
{
  ep = $arg1;
}
probe qemu.user.aarch64.canokey_emu_set_address = process("/usr/bin/qemu-aarch64").mark("canokey_emu_set_address")
{
  addr = $arg1;
}
probe qemu.user.aarch64.canokey_emu_prepare_receive = process("/usr/bin/qemu-aarch64").mark("canokey_emu_prepare_receive")
{
  ep = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.canokey_emu_transmit = process("/usr/bin/qemu-aarch64").mark("canokey_emu_transmit")
{
  ep = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.canokey_thread_start = process("/usr/bin/qemu-aarch64").mark("canokey_thread_start")
{
}
probe qemu.user.aarch64.canokey_thread_stop = process("/usr/bin/qemu-aarch64").mark("canokey_thread_stop")
{
}
probe qemu.user.aarch64.canokey_handle_reset = process("/usr/bin/qemu-aarch64").mark("canokey_handle_reset")
{
}
probe qemu.user.aarch64.canokey_handle_control_setup = process("/usr/bin/qemu-aarch64").mark("canokey_handle_control_setup")
{
  request = $arg1;
  value = $arg2;
  index = $arg3;
  length = $arg4;
}
probe qemu.user.aarch64.canokey_handle_control_out = process("/usr/bin/qemu-aarch64").mark("canokey_handle_control_out")
{
}
probe qemu.user.aarch64.canokey_handle_control_in = process("/usr/bin/qemu-aarch64").mark("canokey_handle_control_in")
{
  actual_len = $arg1;
}
probe qemu.user.aarch64.canokey_handle_data_out = process("/usr/bin/qemu-aarch64").mark("canokey_handle_data_out")
{
  ep_out = $arg1;
  out_len = $arg2;
}
probe qemu.user.aarch64.canokey_handle_data_in = process("/usr/bin/qemu-aarch64").mark("canokey_handle_data_in")
{
  ep_in = $arg1;
  in_len = $arg2;
}
probe qemu.user.aarch64.canokey_realize = process("/usr/bin/qemu-aarch64").mark("canokey_realize")
{
}
probe qemu.user.aarch64.canokey_unrealize = process("/usr/bin/qemu-aarch64").mark("canokey_unrealize")
{
}
probe qemu.user.aarch64.vfio_intx_interrupt = process("/usr/bin/qemu-aarch64").mark("vfio_intx_interrupt")
{
  name = $arg1;
  line = $arg2;
}
probe qemu.user.aarch64.vfio_intx_eoi = process("/usr/bin/qemu-aarch64").mark("vfio_intx_eoi")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_intx_enable_kvm = process("/usr/bin/qemu-aarch64").mark("vfio_intx_enable_kvm")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_intx_disable_kvm = process("/usr/bin/qemu-aarch64").mark("vfio_intx_disable_kvm")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_intx_update = process("/usr/bin/qemu-aarch64").mark("vfio_intx_update")
{
  name = $arg1;
  new_irq = $arg2;
  target_irq = $arg3;
}
probe qemu.user.aarch64.vfio_intx_enable = process("/usr/bin/qemu-aarch64").mark("vfio_intx_enable")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_intx_disable = process("/usr/bin/qemu-aarch64").mark("vfio_intx_disable")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_msi_interrupt = process("/usr/bin/qemu-aarch64").mark("vfio_msi_interrupt")
{
  name = $arg1;
  index = $arg2;
  addr = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.vfio_msix_vector_do_use = process("/usr/bin/qemu-aarch64").mark("vfio_msix_vector_do_use")
{
  name = $arg1;
  index = $arg2;
}
probe qemu.user.aarch64.vfio_msix_vector_release = process("/usr/bin/qemu-aarch64").mark("vfio_msix_vector_release")
{
  name = $arg1;
  index = $arg2;
}
probe qemu.user.aarch64.vfio_msix_enable = process("/usr/bin/qemu-aarch64").mark("vfio_msix_enable")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_msix_pba_disable = process("/usr/bin/qemu-aarch64").mark("vfio_msix_pba_disable")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_msix_pba_enable = process("/usr/bin/qemu-aarch64").mark("vfio_msix_pba_enable")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_msix_disable = process("/usr/bin/qemu-aarch64").mark("vfio_msix_disable")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_msix_fixup = process("/usr/bin/qemu-aarch64").mark("vfio_msix_fixup")
{
  name = $arg1;
  bar = $arg2;
  start = $arg3;
  end = $arg4;
}
probe qemu.user.aarch64.vfio_msix_relo = process("/usr/bin/qemu-aarch64").mark("vfio_msix_relo")
{
  name = $arg1;
  bar = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.vfio_msi_enable = process("/usr/bin/qemu-aarch64").mark("vfio_msi_enable")
{
  name = $arg1;
  nr_vectors = $arg2;
}
probe qemu.user.aarch64.vfio_msi_disable = process("/usr/bin/qemu-aarch64").mark("vfio_msi_disable")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_load_rom = process("/usr/bin/qemu-aarch64").mark("vfio_pci_load_rom")
{
  name = $arg1;
  size = $arg2;
  offset = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.vfio_rom_read = process("/usr/bin/qemu-aarch64").mark("vfio_rom_read")
{
  name = $arg1;
  addr = $arg2;
  size = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.vfio_pci_size_rom = process("/usr/bin/qemu-aarch64").mark("vfio_pci_size_rom")
{
  name = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vfio_vga_write = process("/usr/bin/qemu-aarch64").mark("vfio_vga_write")
{
  addr = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.vfio_vga_read = process("/usr/bin/qemu-aarch64").mark("vfio_vga_read")
{
  addr = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.vfio_pci_read_config = process("/usr/bin/qemu-aarch64").mark("vfio_pci_read_config")
{
  name = $arg1;
  addr = $arg2;
  len = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.vfio_pci_write_config = process("/usr/bin/qemu-aarch64").mark("vfio_pci_write_config")
{
  name = $arg1;
  addr = $arg2;
  val = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.vfio_msi_setup = process("/usr/bin/qemu-aarch64").mark("vfio_msi_setup")
{
  name = $arg1;
  pos = $arg2;
}
probe qemu.user.aarch64.vfio_msix_early_setup = process("/usr/bin/qemu-aarch64").mark("vfio_msix_early_setup")
{
  name = $arg1;
  pos = $arg2;
  table_bar = $arg3;
  offset = $arg4;
  entries = $arg5;
}
probe qemu.user.aarch64.vfio_check_pcie_flr = process("/usr/bin/qemu-aarch64").mark("vfio_check_pcie_flr")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_check_pm_reset = process("/usr/bin/qemu-aarch64").mark("vfio_check_pm_reset")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_check_af_flr = process("/usr/bin/qemu-aarch64").mark("vfio_check_af_flr")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_hot_reset = process("/usr/bin/qemu-aarch64").mark("vfio_pci_hot_reset")
{
  name = $arg1;
  type = $arg2;
}
probe qemu.user.aarch64.vfio_pci_hot_reset_has_dep_devices = process("/usr/bin/qemu-aarch64").mark("vfio_pci_hot_reset_has_dep_devices")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_hot_reset_dep_devices = process("/usr/bin/qemu-aarch64").mark("vfio_pci_hot_reset_dep_devices")
{
  domain = $arg1;
  bus = $arg2;
  slot = $arg3;
  function_ = $arg4;
  group_id = $arg5;
}
probe qemu.user.aarch64.vfio_pci_hot_reset_result = process("/usr/bin/qemu-aarch64").mark("vfio_pci_hot_reset_result")
{
  name = $arg1;
  result = $arg2;
}
probe qemu.user.aarch64.vfio_populate_device_config = process("/usr/bin/qemu-aarch64").mark("vfio_populate_device_config")
{
  name = $arg1;
  size = $arg2;
  offset = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.vfio_populate_device_get_irq_info_failure = process("/usr/bin/qemu-aarch64").mark("vfio_populate_device_get_irq_info_failure")
{
  errstr = $arg1;
}
probe qemu.user.aarch64.vfio_realize = process("/usr/bin/qemu-aarch64").mark("vfio_realize")
{
  name = $arg1;
  group_id = $arg2;
}
probe qemu.user.aarch64.vfio_mdev = process("/usr/bin/qemu-aarch64").mark("vfio_mdev")
{
  name = $arg1;
  is_mdev = $arg2;
}
probe qemu.user.aarch64.vfio_add_ext_cap_dropped = process("/usr/bin/qemu-aarch64").mark("vfio_add_ext_cap_dropped")
{
  name = $arg1;
  cap = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.vfio_pci_reset = process("/usr/bin/qemu-aarch64").mark("vfio_pci_reset")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_reset_flr = process("/usr/bin/qemu-aarch64").mark("vfio_pci_reset_flr")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_reset_pm = process("/usr/bin/qemu-aarch64").mark("vfio_pci_reset_pm")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_emulated_vendor_id = process("/usr/bin/qemu-aarch64").mark("vfio_pci_emulated_vendor_id")
{
  name = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfio_pci_emulated_device_id = process("/usr/bin/qemu-aarch64").mark("vfio_pci_emulated_device_id")
{
  name = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfio_pci_emulated_sub_vendor_id = process("/usr/bin/qemu-aarch64").mark("vfio_pci_emulated_sub_vendor_id")
{
  name = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfio_pci_emulated_sub_device_id = process("/usr/bin/qemu-aarch64").mark("vfio_pci_emulated_sub_device_id")
{
  name = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfio_quirk_rom_in_denylist = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_rom_in_denylist")
{
  name = $arg1;
  vid = $arg2;
  did = $arg3;
}
probe qemu.user.aarch64.vfio_quirk_generic_window_address_write = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_generic_window_address_write")
{
  name = $arg1;
  region_name = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.vfio_quirk_generic_window_data_read = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_generic_window_data_read")
{
  name = $arg1;
  region_name = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.vfio_quirk_generic_window_data_write = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_generic_window_data_write")
{
  name = $arg1;
  region_name = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.vfio_quirk_generic_mirror_read = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_generic_mirror_read")
{
  name = $arg1;
  region_name = $arg2;
  addr = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.vfio_quirk_generic_mirror_write = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_generic_mirror_write")
{
  name = $arg1;
  region_name = $arg2;
  addr = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.vfio_quirk_ati_3c3_read = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_3c3_read")
{
  name = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.vfio_quirk_ati_3c3_probe = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_3c3_probe")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_ati_bar4_probe = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_bar4_probe")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_ati_bar2_probe = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_bar2_probe")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_3d0_state = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_3d0_state")
{
  name = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_3d0_read = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_3d0_read")
{
  name = $arg1;
  offset = $arg2;
  size = $arg3;
  val = $arg4;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_3d0_write = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_3d0_write")
{
  name = $arg1;
  offset = $arg2;
  data = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_3d0_probe = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_3d0_probe")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_bar5_state = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_bar5_state")
{
  name = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_bar5_probe = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_bar5_probe")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_bar0_msi_ack = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_bar0_msi_ack")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_nvidia_bar0_probe = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_nvidia_bar0_probe")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_rtl8168_fake_latch = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_rtl8168_fake_latch")
{
  name = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfio_quirk_rtl8168_msix_write = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_rtl8168_msix_write")
{
  name = $arg1;
  offset = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.vfio_quirk_rtl8168_msix_read = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_rtl8168_msix_read")
{
  name = $arg1;
  offset = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.vfio_quirk_rtl8168_probe = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_rtl8168_probe")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_ati_bonaire_reset_skipped = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_bonaire_reset_skipped")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_ati_bonaire_reset_no_smc = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_bonaire_reset_no_smc")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_ati_bonaire_reset_timeout = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_bonaire_reset_timeout")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_ati_bonaire_reset_done = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_bonaire_reset_done")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_quirk_ati_bonaire_reset = process("/usr/bin/qemu-aarch64").mark("vfio_quirk_ati_bonaire_reset")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_ioeventfd_exit = process("/usr/bin/qemu-aarch64").mark("vfio_ioeventfd_exit")
{
  name = $arg1;
  addr = $arg2;
  size = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.vfio_ioeventfd_handler = process("/usr/bin/qemu-aarch64").mark("vfio_ioeventfd_handler")
{
  name = $arg1;
  addr = $arg2;
  size = $arg3;
  data = $arg4;
}
probe qemu.user.aarch64.vfio_ioeventfd_init = process("/usr/bin/qemu-aarch64").mark("vfio_ioeventfd_init")
{
  name = $arg1;
  addr = $arg2;
  size = $arg3;
  data = $arg4;
  vfio = $arg5;
}
probe qemu.user.aarch64.vfio_pci_igd_opregion_enabled = process("/usr/bin/qemu-aarch64").mark("vfio_pci_igd_opregion_enabled")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_nvidia_gpu_setup_quirk = process("/usr/bin/qemu-aarch64").mark("vfio_pci_nvidia_gpu_setup_quirk")
{
  name = $arg1;
  tgt = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.vfio_pci_nvlink2_setup_quirk_ssatgt = process("/usr/bin/qemu-aarch64").mark("vfio_pci_nvlink2_setup_quirk_ssatgt")
{
  name = $arg1;
  tgt = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.vfio_pci_nvlink2_setup_quirk_lnkspd = process("/usr/bin/qemu-aarch64").mark("vfio_pci_nvlink2_setup_quirk_lnkspd")
{
  name = $arg1;
  link_speed = $arg2;
}
probe qemu.user.aarch64.vfio_pci_igd_bar4_write = process("/usr/bin/qemu-aarch64").mark("vfio_pci_igd_bar4_write")
{
  name = $arg1;
  index = $arg2;
  data = $arg3;
  base = $arg4;
}
probe qemu.user.aarch64.vfio_pci_igd_bdsm_enabled = process("/usr/bin/qemu-aarch64").mark("vfio_pci_igd_bdsm_enabled")
{
  name = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vfio_pci_igd_host_bridge_enabled = process("/usr/bin/qemu-aarch64").mark("vfio_pci_igd_host_bridge_enabled")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_pci_igd_lpc_bridge_enabled = process("/usr/bin/qemu-aarch64").mark("vfio_pci_igd_lpc_bridge_enabled")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_region_write = process("/usr/bin/qemu-aarch64").mark("vfio_region_write")
{
  name = $arg1;
  index = $arg2;
  addr = $arg3;
  data = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.vfio_region_read = process("/usr/bin/qemu-aarch64").mark("vfio_region_read")
{
  name = $arg1;
  index = $arg2;
  addr = $arg3;
  size = $arg4;
  data = $arg5;
}
probe qemu.user.aarch64.vfio_iommu_map_notify = process("/usr/bin/qemu-aarch64").mark("vfio_iommu_map_notify")
{
  op = $arg1;
  iova_start = $arg2;
  iova_end = $arg3;
}
probe qemu.user.aarch64.vfio_listener_region_add_skip = process("/usr/bin/qemu-aarch64").mark("vfio_listener_region_add_skip")
{
  start = $arg1;
  end = $arg2;
}
probe qemu.user.aarch64.vfio_spapr_group_attach = process("/usr/bin/qemu-aarch64").mark("vfio_spapr_group_attach")
{
  groupfd = $arg1;
  tablefd = $arg2;
}
probe qemu.user.aarch64.vfio_listener_region_add_iommu = process("/usr/bin/qemu-aarch64").mark("vfio_listener_region_add_iommu")
{
  start = $arg1;
  end = $arg2;
}
probe qemu.user.aarch64.vfio_listener_region_add_ram = process("/usr/bin/qemu-aarch64").mark("vfio_listener_region_add_ram")
{
  iova_start = $arg1;
  iova_end = $arg2;
  vaddr = $arg3;
}
probe qemu.user.aarch64.vfio_known_safe_misalignment = process("/usr/bin/qemu-aarch64").mark("vfio_known_safe_misalignment")
{
  name = $arg1;
  iova = $arg2;
  offset_within_region = $arg3;
  page_size = $arg4;
}
probe qemu.user.aarch64.vfio_listener_region_add_no_dma_map = process("/usr/bin/qemu-aarch64").mark("vfio_listener_region_add_no_dma_map")
{
  name = $arg1;
  iova = $arg2;
  size = $arg3;
  page_size = $arg4;
}
probe qemu.user.aarch64.vfio_listener_region_del_skip = process("/usr/bin/qemu-aarch64").mark("vfio_listener_region_del_skip")
{
  start = $arg1;
  end = $arg2;
}
probe qemu.user.aarch64.vfio_listener_region_del = process("/usr/bin/qemu-aarch64").mark("vfio_listener_region_del")
{
  start = $arg1;
  end = $arg2;
}
probe qemu.user.aarch64.vfio_disconnect_container = process("/usr/bin/qemu-aarch64").mark("vfio_disconnect_container")
{
  fd = $arg1;
}
probe qemu.user.aarch64.vfio_put_group = process("/usr/bin/qemu-aarch64").mark("vfio_put_group")
{
  fd = $arg1;
}
probe qemu.user.aarch64.vfio_get_device = process("/usr/bin/qemu-aarch64").mark("vfio_get_device")
{
  name = $arg1;
  flags = $arg2;
  num_regions = $arg3;
  num_irqs = $arg4;
}
probe qemu.user.aarch64.vfio_put_base_device = process("/usr/bin/qemu-aarch64").mark("vfio_put_base_device")
{
  fd = $arg1;
}
probe qemu.user.aarch64.vfio_region_setup = process("/usr/bin/qemu-aarch64").mark("vfio_region_setup")
{
  dev = $arg1;
  index = $arg2;
  name = $arg3;
  flags = $arg4;
  offset = $arg5;
  size = $arg6;
}
probe qemu.user.aarch64.vfio_region_mmap_fault = process("/usr/bin/qemu-aarch64").mark("vfio_region_mmap_fault")
{
  name = $arg1;
  index = $arg2;
  offset = $arg3;
  size = $arg4;
  fault = $arg5;
}
probe qemu.user.aarch64.vfio_region_mmap = process("/usr/bin/qemu-aarch64").mark("vfio_region_mmap")
{
  name = $arg1;
  offset = $arg2;
  end = $arg3;
}
probe qemu.user.aarch64.vfio_region_exit = process("/usr/bin/qemu-aarch64").mark("vfio_region_exit")
{
  name = $arg1;
  index = $arg2;
}
probe qemu.user.aarch64.vfio_region_finalize = process("/usr/bin/qemu-aarch64").mark("vfio_region_finalize")
{
  name = $arg1;
  index = $arg2;
}
probe qemu.user.aarch64.vfio_region_mmaps_set_enabled = process("/usr/bin/qemu-aarch64").mark("vfio_region_mmaps_set_enabled")
{
  name = $arg1;
  enabled = $arg2;
}
probe qemu.user.aarch64.vfio_region_unmap = process("/usr/bin/qemu-aarch64").mark("vfio_region_unmap")
{
  name = $arg1;
  offset = $arg2;
  end = $arg3;
}
probe qemu.user.aarch64.vfio_region_sparse_mmap_header = process("/usr/bin/qemu-aarch64").mark("vfio_region_sparse_mmap_header")
{
  name = $arg1;
  index = $arg2;
  nr_areas = $arg3;
}
probe qemu.user.aarch64.vfio_region_sparse_mmap_entry = process("/usr/bin/qemu-aarch64").mark("vfio_region_sparse_mmap_entry")
{
  i = $arg1;
  start = $arg2;
  end = $arg3;
}
probe qemu.user.aarch64.vfio_get_dev_region = process("/usr/bin/qemu-aarch64").mark("vfio_get_dev_region")
{
  name = $arg1;
  index = $arg2;
  type = $arg3;
  subtype = $arg4;
}
probe qemu.user.aarch64.vfio_dma_unmap_overflow_workaround = process("/usr/bin/qemu-aarch64").mark("vfio_dma_unmap_overflow_workaround")
{
}
probe qemu.user.aarch64.vfio_platform_base_device_init = process("/usr/bin/qemu-aarch64").mark("vfio_platform_base_device_init")
{
  name = $arg1;
  groupid = $arg2;
}
probe qemu.user.aarch64.vfio_platform_realize = process("/usr/bin/qemu-aarch64").mark("vfio_platform_realize")
{
  name = $arg1;
  compat = $arg2;
}
probe qemu.user.aarch64.vfio_platform_eoi = process("/usr/bin/qemu-aarch64").mark("vfio_platform_eoi")
{
  pin = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.vfio_platform_intp_mmap_enable = process("/usr/bin/qemu-aarch64").mark("vfio_platform_intp_mmap_enable")
{
  pin = $arg1;
}
probe qemu.user.aarch64.vfio_platform_intp_interrupt = process("/usr/bin/qemu-aarch64").mark("vfio_platform_intp_interrupt")
{
  pin = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.vfio_platform_intp_inject_pending_lockheld = process("/usr/bin/qemu-aarch64").mark("vfio_platform_intp_inject_pending_lockheld")
{
  pin = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.vfio_platform_populate_interrupts = process("/usr/bin/qemu-aarch64").mark("vfio_platform_populate_interrupts")
{
  pin = $arg1;
  count = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.vfio_intp_interrupt_set_pending = process("/usr/bin/qemu-aarch64").mark("vfio_intp_interrupt_set_pending")
{
  index = $arg1;
}
probe qemu.user.aarch64.vfio_platform_start_level_irqfd_injection = process("/usr/bin/qemu-aarch64").mark("vfio_platform_start_level_irqfd_injection")
{
  index = $arg1;
  fd = $arg2;
  resamplefd = $arg3;
}
probe qemu.user.aarch64.vfio_platform_start_edge_irqfd_injection = process("/usr/bin/qemu-aarch64").mark("vfio_platform_start_edge_irqfd_injection")
{
  index = $arg1;
  fd = $arg2;
}
probe qemu.user.aarch64.vfio_prereg_listener_region_add_skip = process("/usr/bin/qemu-aarch64").mark("vfio_prereg_listener_region_add_skip")
{
  start = $arg1;
  end = $arg2;
}
probe qemu.user.aarch64.vfio_prereg_listener_region_del_skip = process("/usr/bin/qemu-aarch64").mark("vfio_prereg_listener_region_del_skip")
{
  start = $arg1;
  end = $arg2;
}
probe qemu.user.aarch64.vfio_prereg_register = process("/usr/bin/qemu-aarch64").mark("vfio_prereg_register")
{
  va = $arg1;
  size = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.vfio_prereg_unregister = process("/usr/bin/qemu-aarch64").mark("vfio_prereg_unregister")
{
  va = $arg1;
  size = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.vfio_spapr_create_window = process("/usr/bin/qemu-aarch64").mark("vfio_spapr_create_window")
{
  ps = $arg1;
  levels = $arg2;
  ws = $arg3;
  off = $arg4;
}
probe qemu.user.aarch64.vfio_spapr_remove_window = process("/usr/bin/qemu-aarch64").mark("vfio_spapr_remove_window")
{
  off = $arg1;
}
probe qemu.user.aarch64.vfio_display_edid_available = process("/usr/bin/qemu-aarch64").mark("vfio_display_edid_available")
{
}
probe qemu.user.aarch64.vfio_display_edid_link_up = process("/usr/bin/qemu-aarch64").mark("vfio_display_edid_link_up")
{
}
probe qemu.user.aarch64.vfio_display_edid_link_down = process("/usr/bin/qemu-aarch64").mark("vfio_display_edid_link_down")
{
}
probe qemu.user.aarch64.vfio_display_edid_update = process("/usr/bin/qemu-aarch64").mark("vfio_display_edid_update")
{
  prefx = $arg1;
  prefy = $arg2;
}
probe qemu.user.aarch64.vfio_display_edid_write_error = process("/usr/bin/qemu-aarch64").mark("vfio_display_edid_write_error")
{
}
probe qemu.user.aarch64.vfio_migration_probe = process("/usr/bin/qemu-aarch64").mark("vfio_migration_probe")
{
  name = $arg1;
  index = $arg2;
}
probe qemu.user.aarch64.vfio_migration_set_state = process("/usr/bin/qemu-aarch64").mark("vfio_migration_set_state")
{
  name = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.vfio_vmstate_change = process("/usr/bin/qemu-aarch64").mark("vfio_vmstate_change")
{
  name = $arg1;
  running = $arg2;
  reason = $arg3;
  dev_state = $arg4;
}
probe qemu.user.aarch64.vfio_migration_state_notifier = process("/usr/bin/qemu-aarch64").mark("vfio_migration_state_notifier")
{
  name = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.vfio_save_setup = process("/usr/bin/qemu-aarch64").mark("vfio_save_setup")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_save_cleanup = process("/usr/bin/qemu-aarch64").mark("vfio_save_cleanup")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_save_buffer = process("/usr/bin/qemu-aarch64").mark("vfio_save_buffer")
{
  name = $arg1;
  data_offset = $arg2;
  data_size = $arg3;
  pending = $arg4;
}
probe qemu.user.aarch64.vfio_update_pending = process("/usr/bin/qemu-aarch64").mark("vfio_update_pending")
{
  name = $arg1;
  pending = $arg2;
}
probe qemu.user.aarch64.vfio_save_device_config_state = process("/usr/bin/qemu-aarch64").mark("vfio_save_device_config_state")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_save_pending = process("/usr/bin/qemu-aarch64").mark("vfio_save_pending")
{
  name = $arg1;
  precopy = $arg2;
  postcopy = $arg3;
  compatible = $arg4;
}
probe qemu.user.aarch64.vfio_save_iterate = process("/usr/bin/qemu-aarch64").mark("vfio_save_iterate")
{
  name = $arg1;
  data_size = $arg2;
}
probe qemu.user.aarch64.vfio_save_complete_precopy = process("/usr/bin/qemu-aarch64").mark("vfio_save_complete_precopy")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_load_device_config_state = process("/usr/bin/qemu-aarch64").mark("vfio_load_device_config_state")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_load_state = process("/usr/bin/qemu-aarch64").mark("vfio_load_state")
{
  name = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.vfio_load_state_device_data = process("/usr/bin/qemu-aarch64").mark("vfio_load_state_device_data")
{
  name = $arg1;
  data_offset = $arg2;
  data_size = $arg3;
}
probe qemu.user.aarch64.vfio_load_cleanup = process("/usr/bin/qemu-aarch64").mark("vfio_load_cleanup")
{
  name = $arg1;
}
probe qemu.user.aarch64.vfio_get_dirty_bitmap = process("/usr/bin/qemu-aarch64").mark("vfio_get_dirty_bitmap")
{
  fd = $arg1;
  iova = $arg2;
  size = $arg3;
  bitmap_size = $arg4;
  start = $arg5;
}
probe qemu.user.aarch64.vfio_iommu_map_dirty_notify = process("/usr/bin/qemu-aarch64").mark("vfio_iommu_map_dirty_notify")
{
  iova_start = $arg1;
  iova_end = $arg2;
}
probe qemu.user.aarch64.vhost_commit = process("/usr/bin/qemu-aarch64").mark("vhost_commit")
{
  started = $arg1;
  changed = $arg2;
}
probe qemu.user.aarch64.vhost_region_add_section = process("/usr/bin/qemu-aarch64").mark("vhost_region_add_section")
{
  name = $arg1;
  gpa = $arg2;
  size = $arg3;
  host = $arg4;
}
probe qemu.user.aarch64.vhost_region_add_section_merge = process("/usr/bin/qemu-aarch64").mark("vhost_region_add_section_merge")
{
  name = $arg1;
  new_size = $arg2;
  gpa = $arg3;
  owr = $arg4;
}
probe qemu.user.aarch64.vhost_region_add_section_aligned = process("/usr/bin/qemu-aarch64").mark("vhost_region_add_section_aligned")
{
  name = $arg1;
  gpa = $arg2;
  size = $arg3;
  host = $arg4;
}
probe qemu.user.aarch64.vhost_section = process("/usr/bin/qemu-aarch64").mark("vhost_section")
{
  name = $arg1;
}
probe qemu.user.aarch64.vhost_reject_section = process("/usr/bin/qemu-aarch64").mark("vhost_reject_section")
{
  name = $arg1;
  d = $arg2;
}
probe qemu.user.aarch64.vhost_iotlb_miss = process("/usr/bin/qemu-aarch64").mark("vhost_iotlb_miss")
{
  dev = $arg1;
  step = $arg2;
}
probe qemu.user.aarch64.vhost_dev_cleanup = process("/usr/bin/qemu-aarch64").mark("vhost_dev_cleanup")
{
  dev = $arg1;
}
probe qemu.user.aarch64.vhost_dev_start = process("/usr/bin/qemu-aarch64").mark("vhost_dev_start")
{
  dev = $arg1;
  name = $arg2;
  vrings = $arg3;
}
probe qemu.user.aarch64.vhost_dev_stop = process("/usr/bin/qemu-aarch64").mark("vhost_dev_stop")
{
  dev = $arg1;
  name = $arg2;
  vrings = $arg3;
}
probe qemu.user.aarch64.vhost_user_postcopy_end_entry = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_end_entry")
{
}
probe qemu.user.aarch64.vhost_user_postcopy_end_exit = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_end_exit")
{
}
probe qemu.user.aarch64.vhost_user_postcopy_fault_handler = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_fault_handler")
{
  name = $arg1;
  fault_address = $arg2;
  nregions = $arg3;
}
probe qemu.user.aarch64.vhost_user_postcopy_fault_handler_loop = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_fault_handler_loop")
{
  i = $arg1;
  client_base = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.vhost_user_postcopy_fault_handler_found = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_fault_handler_found")
{
  i = $arg1;
  region_offset = $arg2;
  rb_offset = $arg3;
}
probe qemu.user.aarch64.vhost_user_postcopy_listen = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_listen")
{
}
probe qemu.user.aarch64.vhost_user_set_mem_table_postcopy = process("/usr/bin/qemu-aarch64").mark("vhost_user_set_mem_table_postcopy")
{
  client_addr = $arg1;
  qhva = $arg2;
  reply_i = $arg3;
  region_i = $arg4;
}
probe qemu.user.aarch64.vhost_user_set_mem_table_withfd = process("/usr/bin/qemu-aarch64").mark("vhost_user_set_mem_table_withfd")
{
  index = $arg1;
  name = $arg2;
  memory_size = $arg3;
  guest_phys_addr = $arg4;
  userspace_addr = $arg5;
  offset = $arg6;
}
probe qemu.user.aarch64.vhost_user_postcopy_waker = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_waker")
{
  rb = $arg1;
  rb_offset = $arg2;
}
probe qemu.user.aarch64.vhost_user_postcopy_waker_found = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_waker_found")
{
  client_addr = $arg1;
}
probe qemu.user.aarch64.vhost_user_postcopy_waker_nomatch = process("/usr/bin/qemu-aarch64").mark("vhost_user_postcopy_waker_nomatch")
{
  rb = $arg1;
  rb_offset = $arg2;
}
probe qemu.user.aarch64.vhost_user_read = process("/usr/bin/qemu-aarch64").mark("vhost_user_read")
{
  req = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.vhost_user_write = process("/usr/bin/qemu-aarch64").mark("vhost_user_write")
{
  req = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.vhost_user_create_notifier = process("/usr/bin/qemu-aarch64").mark("vhost_user_create_notifier")
{
  idx = $arg1;
  n = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_dma_map = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_dma_map")
{
  vdpa = $arg1;
  fd = $arg2;
  msg_type = $arg3;
  iova = $arg4;
  size = $arg5;
  uaddr = $arg6;
  perm = $arg7;
  type = $arg8;
}
probe qemu.user.aarch64.vhost_vdpa_dma_unmap = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_dma_unmap")
{
  vdpa = $arg1;
  fd = $arg2;
  msg_type = $arg3;
  iova = $arg4;
  size = $arg5;
  type = $arg6;
}
probe qemu.user.aarch64.vhost_vdpa_listener_begin_batch = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_listener_begin_batch")
{
  v = $arg1;
  fd = $arg2;
  msg_type = $arg3;
  type = $arg4;
}
probe qemu.user.aarch64.vhost_vdpa_listener_commit = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_listener_commit")
{
  v = $arg1;
  fd = $arg2;
  msg_type = $arg3;
  type = $arg4;
}
probe qemu.user.aarch64.vhost_vdpa_listener_region_add = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_listener_region_add")
{
  vdpa = $arg1;
  iova = $arg2;
  llend = $arg3;
  vaddr = $arg4;
  readonly = $arg5;
}
probe qemu.user.aarch64.vhost_vdpa_listener_region_del = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_listener_region_del")
{
  vdpa = $arg1;
  iova = $arg2;
  llend = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_add_status = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_add_status")
{
  dev = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_init = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_init")
{
  dev = $arg1;
  vdpa = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_cleanup = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_cleanup")
{
  dev = $arg1;
  vdpa = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_memslots_limit = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_memslots_limit")
{
  dev = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_set_mem_table = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_mem_table")
{
  dev = $arg1;
  nregions = $arg2;
  padding = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_dump_regions = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_dump_regions")
{
  dev = $arg1;
  i = $arg2;
  guest_phys_addr = $arg3;
  memory_size = $arg4;
  userspace_addr = $arg5;
  flags_padding = $arg6;
}
probe qemu.user.aarch64.vhost_vdpa_set_features = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_features")
{
  dev = $arg1;
  features = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_get_device_id = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_get_device_id")
{
  dev = $arg1;
  device_id = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_reset_device = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_reset_device")
{
  dev = $arg1;
  status = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_get_vq_index = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_get_vq_index")
{
  dev = $arg1;
  idx = $arg2;
  vq_idx = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_set_vring_ready = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_vring_ready")
{
  dev = $arg1;
}
probe qemu.user.aarch64.vhost_vdpa_dump_config = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_dump_config")
{
  dev = $arg1;
  line = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_set_config = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_config")
{
  dev = $arg1;
  offset = $arg2;
  size = $arg3;
  flags = $arg4;
}
probe qemu.user.aarch64.vhost_vdpa_get_config = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_get_config")
{
  dev = $arg1;
  config = $arg2;
  config_len = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_dev_start = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_dev_start")
{
  dev = $arg1;
  started = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_set_log_base = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_log_base")
{
  dev = $arg1;
  base = $arg2;
  size = $arg3;
  refcnt = $arg4;
  fd = $arg5;
  log = $arg6;
}
probe qemu.user.aarch64.vhost_vdpa_set_vring_addr = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_vring_addr")
{
  dev = $arg1;
  index = $arg2;
  flags = $arg3;
  desc_user_addr = $arg4;
  used_user_addr = $arg5;
  avail_user_addr = $arg6;
  log_guest_addr = $arg7;
}
probe qemu.user.aarch64.vhost_vdpa_set_vring_num = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_vring_num")
{
  dev = $arg1;
  index = $arg2;
  num = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_set_vring_base = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_vring_base")
{
  dev = $arg1;
  index = $arg2;
  num = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_get_vring_base = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_get_vring_base")
{
  dev = $arg1;
  index = $arg2;
  num = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_set_vring_kick = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_vring_kick")
{
  dev = $arg1;
  index = $arg2;
  fd = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_set_vring_call = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_vring_call")
{
  dev = $arg1;
  index = $arg2;
  fd = $arg3;
}
probe qemu.user.aarch64.vhost_vdpa_get_features = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_get_features")
{
  dev = $arg1;
  features = $arg2;
}
probe qemu.user.aarch64.vhost_vdpa_set_owner = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_set_owner")
{
  dev = $arg1;
}
probe qemu.user.aarch64.vhost_vdpa_vq_get_addr = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_vq_get_addr")
{
  dev = $arg1;
  vq = $arg2;
  desc_user_addr = $arg3;
  avail_user_addr = $arg4;
  used_user_addr = $arg5;
}
probe qemu.user.aarch64.vhost_vdpa_get_iova_range = process("/usr/bin/qemu-aarch64").mark("vhost_vdpa_get_iova_range")
{
  dev = $arg1;
  first = $arg2;
  last = $arg3;
}
probe qemu.user.aarch64.virtqueue_alloc_element = process("/usr/bin/qemu-aarch64").mark("virtqueue_alloc_element")
{
  elem = $arg1;
  sz = $arg2;
  in_num = $arg3;
  out_num = $arg4;
}
probe qemu.user.aarch64.virtqueue_fill = process("/usr/bin/qemu-aarch64").mark("virtqueue_fill")
{
  vq = $arg1;
  elem = $arg2;
  len = $arg3;
  idx = $arg4;
}
probe qemu.user.aarch64.virtqueue_flush = process("/usr/bin/qemu-aarch64").mark("virtqueue_flush")
{
  vq = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.virtqueue_pop = process("/usr/bin/qemu-aarch64").mark("virtqueue_pop")
{
  vq = $arg1;
  elem = $arg2;
  in_num = $arg3;
  out_num = $arg4;
}
probe qemu.user.aarch64.virtio_queue_notify = process("/usr/bin/qemu-aarch64").mark("virtio_queue_notify")
{
  vdev = $arg1;
  n = $arg2;
  vq = $arg3;
}
probe qemu.user.aarch64.virtio_notify_irqfd = process("/usr/bin/qemu-aarch64").mark("virtio_notify_irqfd")
{
  vdev = $arg1;
  vq = $arg2;
}
probe qemu.user.aarch64.virtio_notify = process("/usr/bin/qemu-aarch64").mark("virtio_notify")
{
  vdev = $arg1;
  vq = $arg2;
}
probe qemu.user.aarch64.virtio_set_status = process("/usr/bin/qemu-aarch64").mark("virtio_set_status")
{
  vdev = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.virtio_rng_guest_not_ready = process("/usr/bin/qemu-aarch64").mark("virtio_rng_guest_not_ready")
{
  rng = $arg1;
}
probe qemu.user.aarch64.virtio_rng_cpu_is_stopped = process("/usr/bin/qemu-aarch64").mark("virtio_rng_cpu_is_stopped")
{
  rng = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.virtio_rng_popped = process("/usr/bin/qemu-aarch64").mark("virtio_rng_popped")
{
  rng = $arg1;
}
probe qemu.user.aarch64.virtio_rng_pushed = process("/usr/bin/qemu-aarch64").mark("virtio_rng_pushed")
{
  rng = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.virtio_rng_request = process("/usr/bin/qemu-aarch64").mark("virtio_rng_request")
{
  rng = $arg1;
  size = $arg2;
  quota = $arg3;
}
probe qemu.user.aarch64.virtio_rng_vm_state_change = process("/usr/bin/qemu-aarch64").mark("virtio_rng_vm_state_change")
{
  rng = $arg1;
  running = $arg2;
  state = $arg3;
}
probe qemu.user.aarch64.virtio_balloon_bad_addr = process("/usr/bin/qemu-aarch64").mark("virtio_balloon_bad_addr")
{
  gpa = $arg1;
}
probe qemu.user.aarch64.virtio_balloon_handle_output = process("/usr/bin/qemu-aarch64").mark("virtio_balloon_handle_output")
{
  name = $arg1;
  gpa = $arg2;
}
probe qemu.user.aarch64.virtio_balloon_get_config = process("/usr/bin/qemu-aarch64").mark("virtio_balloon_get_config")
{
  num_pages = $arg1;
  actual = $arg2;
}
probe qemu.user.aarch64.virtio_balloon_set_config = process("/usr/bin/qemu-aarch64").mark("virtio_balloon_set_config")
{
  actual = $arg1;
  oldactual = $arg2;
}
probe qemu.user.aarch64.virtio_balloon_to_target = process("/usr/bin/qemu-aarch64").mark("virtio_balloon_to_target")
{
  target = $arg1;
  num_pages = $arg2;
}
probe qemu.user.aarch64.virtio_mmio_read = process("/usr/bin/qemu-aarch64").mark("virtio_mmio_read")
{
  offset = $arg1;
}
probe qemu.user.aarch64.virtio_mmio_write_offset = process("/usr/bin/qemu-aarch64").mark("virtio_mmio_write_offset")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.virtio_mmio_guest_page = process("/usr/bin/qemu-aarch64").mark("virtio_mmio_guest_page")
{
  size = $arg1;
  shift = $arg2;
}
probe qemu.user.aarch64.virtio_mmio_queue_write = process("/usr/bin/qemu-aarch64").mark("virtio_mmio_queue_write")
{
  value = $arg1;
  max_size = $arg2;
}
probe qemu.user.aarch64.virtio_mmio_setting_irq = process("/usr/bin/qemu-aarch64").mark("virtio_mmio_setting_irq")
{
  level = $arg1;
}
probe qemu.user.aarch64.virtio_pci_notify = process("/usr/bin/qemu-aarch64").mark("virtio_pci_notify")
{
  vector = $arg1;
}
probe qemu.user.aarch64.virtio_pci_notify_write = process("/usr/bin/qemu-aarch64").mark("virtio_pci_notify_write")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.virtio_pci_notify_write_pio = process("/usr/bin/qemu-aarch64").mark("virtio_pci_notify_write_pio")
{
  addr = $arg1;
  val = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.virtio_iommu_device_reset = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_device_reset")
{
}
probe qemu.user.aarch64.virtio_iommu_system_reset = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_system_reset")
{
}
probe qemu.user.aarch64.virtio_iommu_get_features = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_get_features")
{
  features = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_device_status = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_device_status")
{
  status = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_get_config = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_get_config")
{
  page_size_mask = $arg1;
  start = $arg2;
  end = $arg3;
  domain_start = $arg4;
  domain_end = $arg5;
  probe_size = $arg6;
  bypass = $arg7;
}
probe qemu.user.aarch64.virtio_iommu_set_config = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_set_config")
{
  bypass = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_attach = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_attach")
{
  domain_id = $arg1;
  ep_id = $arg2;
}
probe qemu.user.aarch64.virtio_iommu_detach = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_detach")
{
  domain_id = $arg1;
  ep_id = $arg2;
}
probe qemu.user.aarch64.virtio_iommu_map = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_map")
{
  domain_id = $arg1;
  virt_start = $arg2;
  virt_end = $arg3;
  phys_start = $arg4;
  flags = $arg5;
}
probe qemu.user.aarch64.virtio_iommu_unmap = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_unmap")
{
  domain_id = $arg1;
  virt_start = $arg2;
  virt_end = $arg3;
}
probe qemu.user.aarch64.virtio_iommu_unmap_done = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_unmap_done")
{
  domain_id = $arg1;
  virt_start = $arg2;
  virt_end = $arg3;
}
probe qemu.user.aarch64.virtio_iommu_translate = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_translate")
{
  name = $arg1;
  rid = $arg2;
  iova = $arg3;
  flag = $arg4;
}
probe qemu.user.aarch64.virtio_iommu_init_iommu_mr = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_init_iommu_mr")
{
  iommu_mr = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_get_endpoint = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_get_endpoint")
{
  ep_id = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_put_endpoint = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_put_endpoint")
{
  ep_id = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_get_domain = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_get_domain")
{
  domain_id = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_put_domain = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_put_domain")
{
  domain_id = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_translate_out = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_translate_out")
{
  virt_addr = $arg1;
  phys_addr = $arg2;
  sid = $arg3;
}
probe qemu.user.aarch64.virtio_iommu_report_fault = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_report_fault")
{
  reason = $arg1;
  flags = $arg2;
  endpoint = $arg3;
  addr = $arg4;
}
probe qemu.user.aarch64.virtio_iommu_fill_resv_property = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_fill_resv_property")
{
  devid = $arg1;
  subtype = $arg2;
  start = $arg3;
  end = $arg4;
}
probe qemu.user.aarch64.virtio_iommu_notify_map = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_notify_map")
{
  name = $arg1;
  virt_start = $arg2;
  virt_end = $arg3;
  phys_start = $arg4;
  flags = $arg5;
}
probe qemu.user.aarch64.virtio_iommu_notify_unmap = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_notify_unmap")
{
  name = $arg1;
  virt_start = $arg2;
  virt_end = $arg3;
}
probe qemu.user.aarch64.virtio_iommu_remap = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_remap")
{
  name = $arg1;
  virt_start = $arg2;
  virt_end = $arg3;
  phys_start = $arg4;
}
probe qemu.user.aarch64.virtio_iommu_set_page_size_mask = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_set_page_size_mask")
{
  name = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.virtio_iommu_notify_flag_add = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_notify_flag_add")
{
  name = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_notify_flag_del = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_notify_flag_del")
{
  name = $arg1;
}
probe qemu.user.aarch64.virtio_iommu_switch_address_space = process("/usr/bin/qemu-aarch64").mark("virtio_iommu_switch_address_space")
{
  bus = $arg1;
  slot = $arg2;
  fn = $arg3;
  on = $arg4;
}
probe qemu.user.aarch64.virtio_mem_send_response = process("/usr/bin/qemu-aarch64").mark("virtio_mem_send_response")
{
  type = $arg1;
}
probe qemu.user.aarch64.virtio_mem_plug_request = process("/usr/bin/qemu-aarch64").mark("virtio_mem_plug_request")
{
  addr = $arg1;
  nb_blocks = $arg2;
}
probe qemu.user.aarch64.virtio_mem_unplug_request = process("/usr/bin/qemu-aarch64").mark("virtio_mem_unplug_request")
{
  addr = $arg1;
  nb_blocks = $arg2;
}
probe qemu.user.aarch64.virtio_mem_unplugged_all = process("/usr/bin/qemu-aarch64").mark("virtio_mem_unplugged_all")
{
}
probe qemu.user.aarch64.virtio_mem_unplug_all_request = process("/usr/bin/qemu-aarch64").mark("virtio_mem_unplug_all_request")
{
}
probe qemu.user.aarch64.virtio_mem_resized_usable_region = process("/usr/bin/qemu-aarch64").mark("virtio_mem_resized_usable_region")
{
  old_size = $arg1;
  new_size = $arg2;
}
probe qemu.user.aarch64.virtio_mem_state_request = process("/usr/bin/qemu-aarch64").mark("virtio_mem_state_request")
{
  addr = $arg1;
  nb_blocks = $arg2;
}
probe qemu.user.aarch64.virtio_mem_state_response = process("/usr/bin/qemu-aarch64").mark("virtio_mem_state_response")
{
  state = $arg1;
}
probe qemu.user.aarch64.virtio_pmem_flush_request = process("/usr/bin/qemu-aarch64").mark("virtio_pmem_flush_request")
{
}
probe qemu.user.aarch64.virtio_pmem_response = process("/usr/bin/qemu-aarch64").mark("virtio_pmem_response")
{
}
probe qemu.user.aarch64.virtio_pmem_flush_done = process("/usr/bin/qemu-aarch64").mark("virtio_pmem_flush_done")
{
  type = $arg1;
}
probe qemu.user.aarch64.virtio_gpio_start = process("/usr/bin/qemu-aarch64").mark("virtio_gpio_start")
{
}
probe qemu.user.aarch64.virtio_gpio_stop = process("/usr/bin/qemu-aarch64").mark("virtio_gpio_stop")
{
}
probe qemu.user.aarch64.virtio_gpio_set_status = process("/usr/bin/qemu-aarch64").mark("virtio_gpio_set_status")
{
  status = $arg1;
}
probe qemu.user.aarch64.cmsdk_apb_watchdog_read = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_watchdog_read")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_watchdog_write = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_watchdog_write")
{
  offset = $arg1;
  data = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.cmsdk_apb_watchdog_reset = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_watchdog_reset")
{
}
probe qemu.user.aarch64.cmsdk_apb_watchdog_lock = process("/usr/bin/qemu-aarch64").mark("cmsdk_apb_watchdog_lock")
{
  lock = $arg1;
}
probe qemu.user.aarch64.aspeed_wdt_read = process("/usr/bin/qemu-aarch64").mark("aspeed_wdt_read")
{
  addr = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.aspeed_wdt_write = process("/usr/bin/qemu-aarch64").mark("aspeed_wdt_write")
{
  addr = $arg1;
  size = $arg2;
  data = $arg3;
}
probe qemu.user.aarch64.spapr_watchdog_start = process("/usr/bin/qemu-aarch64").mark("spapr_watchdog_start")
{
  flags = $arg1;
  num = $arg2;
  timeout = $arg3;
}
probe qemu.user.aarch64.spapr_watchdog_stop = process("/usr/bin/qemu-aarch64").mark("spapr_watchdog_stop")
{
  num = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.spapr_watchdog_query = process("/usr/bin/qemu-aarch64").mark("spapr_watchdog_query")
{
  caps = $arg1;
}
probe qemu.user.aarch64.spapr_watchdog_query_lpm = process("/usr/bin/qemu-aarch64").mark("spapr_watchdog_query_lpm")
{
  caps = $arg1;
}
probe qemu.user.aarch64.spapr_watchdog_expired = process("/usr/bin/qemu-aarch64").mark("spapr_watchdog_expired")
{
  num = $arg1;
  action = $arg2;
}
probe qemu.user.aarch64.xen_default_ioreq_server = process("/usr/bin/qemu-aarch64").mark("xen_default_ioreq_server")
{
}
probe qemu.user.aarch64.xen_ioreq_server_create = process("/usr/bin/qemu-aarch64").mark("xen_ioreq_server_create")
{
  id = $arg1;
}
probe qemu.user.aarch64.xen_ioreq_server_destroy = process("/usr/bin/qemu-aarch64").mark("xen_ioreq_server_destroy")
{
  id = $arg1;
}
probe qemu.user.aarch64.xen_ioreq_server_state = process("/usr/bin/qemu-aarch64").mark("xen_ioreq_server_state")
{
  id = $arg1;
  enable = $arg2;
}
probe qemu.user.aarch64.xen_map_mmio_range = process("/usr/bin/qemu-aarch64").mark("xen_map_mmio_range")
{
  id = $arg1;
  start_addr = $arg2;
  end_addr = $arg3;
}
probe qemu.user.aarch64.xen_unmap_mmio_range = process("/usr/bin/qemu-aarch64").mark("xen_unmap_mmio_range")
{
  id = $arg1;
  start_addr = $arg2;
  end_addr = $arg3;
}
probe qemu.user.aarch64.xen_map_portio_range = process("/usr/bin/qemu-aarch64").mark("xen_map_portio_range")
{
  id = $arg1;
  start_addr = $arg2;
  end_addr = $arg3;
}
probe qemu.user.aarch64.xen_unmap_portio_range = process("/usr/bin/qemu-aarch64").mark("xen_unmap_portio_range")
{
  id = $arg1;
  start_addr = $arg2;
  end_addr = $arg3;
}
probe qemu.user.aarch64.xen_map_pcidev = process("/usr/bin/qemu-aarch64").mark("xen_map_pcidev")
{
  id = $arg1;
  bus = $arg2;
  dev = $arg3;
  func = $arg4;
}
probe qemu.user.aarch64.xen_unmap_pcidev = process("/usr/bin/qemu-aarch64").mark("xen_unmap_pcidev")
{
  id = $arg1;
  bus = $arg2;
  dev = $arg3;
  func = $arg4;
}
probe qemu.user.aarch64.xen_domid_restrict = process("/usr/bin/qemu-aarch64").mark("xen_domid_restrict")
{
  err = $arg1;
}
probe qemu.user.aarch64.xen_bus_realize = process("/usr/bin/qemu-aarch64").mark("xen_bus_realize")
{
}
probe qemu.user.aarch64.xen_bus_unrealize = process("/usr/bin/qemu-aarch64").mark("xen_bus_unrealize")
{
}
probe qemu.user.aarch64.xen_bus_enumerate = process("/usr/bin/qemu-aarch64").mark("xen_bus_enumerate")
{
}
probe qemu.user.aarch64.xen_bus_cleanup = process("/usr/bin/qemu-aarch64").mark("xen_bus_cleanup")
{
}
probe qemu.user.aarch64.xen_bus_type_enumerate = process("/usr/bin/qemu-aarch64").mark("xen_bus_type_enumerate")
{
  type = $arg1;
}
probe qemu.user.aarch64.xen_bus_backend_create = process("/usr/bin/qemu-aarch64").mark("xen_bus_backend_create")
{
  type = $arg1;
  path = $arg2;
}
probe qemu.user.aarch64.xen_bus_device_cleanup = process("/usr/bin/qemu-aarch64").mark("xen_bus_device_cleanup")
{
  type = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.xen_bus_add_watch = process("/usr/bin/qemu-aarch64").mark("xen_bus_add_watch")
{
  node = $arg1;
  key = $arg2;
}
probe qemu.user.aarch64.xen_bus_remove_watch = process("/usr/bin/qemu-aarch64").mark("xen_bus_remove_watch")
{
  node = $arg1;
  key = $arg2;
}
probe qemu.user.aarch64.xen_device_realize = process("/usr/bin/qemu-aarch64").mark("xen_device_realize")
{
  type = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.xen_device_unrealize = process("/usr/bin/qemu-aarch64").mark("xen_device_unrealize")
{
  type = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.xen_device_backend_state = process("/usr/bin/qemu-aarch64").mark("xen_device_backend_state")
{
  type = $arg1;
  name = $arg2;
  state = $arg3;
}
probe qemu.user.aarch64.xen_device_backend_online = process("/usr/bin/qemu-aarch64").mark("xen_device_backend_online")
{
  type = $arg1;
  name = $arg2;
  online = $arg3;
}
probe qemu.user.aarch64.xen_device_backend_changed = process("/usr/bin/qemu-aarch64").mark("xen_device_backend_changed")
{
  type = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.xen_device_frontend_state = process("/usr/bin/qemu-aarch64").mark("xen_device_frontend_state")
{
  type = $arg1;
  name = $arg2;
  state = $arg3;
}
probe qemu.user.aarch64.xen_device_frontend_changed = process("/usr/bin/qemu-aarch64").mark("xen_device_frontend_changed")
{
  type = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.xen_device_unplug = process("/usr/bin/qemu-aarch64").mark("xen_device_unplug")
{
  type = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.xen_device_add_watch = process("/usr/bin/qemu-aarch64").mark("xen_device_add_watch")
{
  type = $arg1;
  name = $arg2;
  node = $arg3;
  key = $arg4;
}
probe qemu.user.aarch64.xen_device_remove_watch = process("/usr/bin/qemu-aarch64").mark("xen_device_remove_watch")
{
  type = $arg1;
  name = $arg2;
  node = $arg3;
  key = $arg4;
}
probe qemu.user.aarch64.xs_node_create = process("/usr/bin/qemu-aarch64").mark("xs_node_create")
{
  node = $arg1;
}
probe qemu.user.aarch64.xs_node_destroy = process("/usr/bin/qemu-aarch64").mark("xs_node_destroy")
{
  node = $arg1;
}
probe qemu.user.aarch64.xs_node_vprintf = process("/usr/bin/qemu-aarch64").mark("xs_node_vprintf")
{
  path = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.xs_node_vscanf = process("/usr/bin/qemu-aarch64").mark("xs_node_vscanf")
{
  path = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.xs_node_watch = process("/usr/bin/qemu-aarch64").mark("xs_node_watch")
{
  path = $arg1;
}
probe qemu.user.aarch64.xs_node_unwatch = process("/usr/bin/qemu-aarch64").mark("xs_node_unwatch")
{
  path = $arg1;
}
probe qemu.user.aarch64.npcm7xx_gpio_read = process("/usr/bin/qemu-aarch64").mark("npcm7xx_gpio_read")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_gpio_write = process("/usr/bin/qemu-aarch64").mark("npcm7xx_gpio_write")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.npcm7xx_gpio_set_input = process("/usr/bin/qemu-aarch64").mark("npcm7xx_gpio_set_input")
{
  id = $arg1;
  line = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.npcm7xx_gpio_set_output = process("/usr/bin/qemu-aarch64").mark("npcm7xx_gpio_set_output")
{
  id = $arg1;
  line = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.npcm7xx_gpio_update_events = process("/usr/bin/qemu-aarch64").mark("npcm7xx_gpio_update_events")
{
  id = $arg1;
  evst = $arg2;
  even = $arg3;
}
probe qemu.user.aarch64.nrf51_gpio_read = process("/usr/bin/qemu-aarch64").mark("nrf51_gpio_read")
{
  offset = $arg1;
  r = $arg2;
}
probe qemu.user.aarch64.nrf51_gpio_write = process("/usr/bin/qemu-aarch64").mark("nrf51_gpio_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.nrf51_gpio_set = process("/usr/bin/qemu-aarch64").mark("nrf51_gpio_set")
{
  line = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.nrf51_gpio_update_output_irq = process("/usr/bin/qemu-aarch64").mark("nrf51_gpio_update_output_irq")
{
  line = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.pl061_update = process("/usr/bin/qemu-aarch64").mark("pl061_update")
{
  id = $arg1;
  dir = $arg2;
  data = $arg3;
  pullups = $arg4;
  floating = $arg5;
}
probe qemu.user.aarch64.pl061_set_output = process("/usr/bin/qemu-aarch64").mark("pl061_set_output")
{
  id = $arg1;
  gpio = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.pl061_input_change = process("/usr/bin/qemu-aarch64").mark("pl061_input_change")
{
  id = $arg1;
  gpio = $arg2;
  level = $arg3;
}
probe qemu.user.aarch64.pl061_update_istate = process("/usr/bin/qemu-aarch64").mark("pl061_update_istate")
{
  id = $arg1;
  istate = $arg2;
  im = $arg3;
  level = $arg4;
}
probe qemu.user.aarch64.pl061_read = process("/usr/bin/qemu-aarch64").mark("pl061_read")
{
  id = $arg1;
  offset = $arg2;
  r = $arg3;
}
probe qemu.user.aarch64.pl061_write = process("/usr/bin/qemu-aarch64").mark("pl061_write")
{
  id = $arg1;
  offset = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.pl061_reset = process("/usr/bin/qemu-aarch64").mark("pl061_reset")
{
  id = $arg1;
}
probe qemu.user.aarch64.sifive_gpio_read = process("/usr/bin/qemu-aarch64").mark("sifive_gpio_read")
{
  offset = $arg1;
  r = $arg2;
}
probe qemu.user.aarch64.sifive_gpio_write = process("/usr/bin/qemu-aarch64").mark("sifive_gpio_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sifive_gpio_set = process("/usr/bin/qemu-aarch64").mark("sifive_gpio_set")
{
  line = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.sifive_gpio_update_output_irq = process("/usr/bin/qemu-aarch64").mark("sifive_gpio_update_output_irq")
{
  line = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.aspeed_gpio_read = process("/usr/bin/qemu-aarch64").mark("aspeed_gpio_read")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.aspeed_gpio_write = process("/usr/bin/qemu-aarch64").mark("aspeed_gpio_write")
{
  offset = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.qemu_loadvm_state_section = process("/usr/bin/qemu-aarch64").mark("qemu_loadvm_state_section")
{
  section_type = $arg1;
}
probe qemu.user.aarch64.qemu_loadvm_state_section_command = process("/usr/bin/qemu-aarch64").mark("qemu_loadvm_state_section_command")
{
  ret = $arg1;
}
probe qemu.user.aarch64.qemu_loadvm_state_section_partend = process("/usr/bin/qemu-aarch64").mark("qemu_loadvm_state_section_partend")
{
  section_id = $arg1;
}
probe qemu.user.aarch64.qemu_loadvm_state_post_main = process("/usr/bin/qemu-aarch64").mark("qemu_loadvm_state_post_main")
{
  ret = $arg1;
}
probe qemu.user.aarch64.qemu_loadvm_state_section_startfull = process("/usr/bin/qemu-aarch64").mark("qemu_loadvm_state_section_startfull")
{
  section_id = $arg1;
  idstr = $arg2;
  instance_id = $arg3;
  version_id = $arg4;
}
probe qemu.user.aarch64.qemu_savevm_send_packaged = process("/usr/bin/qemu-aarch64").mark("qemu_savevm_send_packaged")
{
}
probe qemu.user.aarch64.loadvm_state_setup = process("/usr/bin/qemu-aarch64").mark("loadvm_state_setup")
{
}
probe qemu.user.aarch64.loadvm_state_cleanup = process("/usr/bin/qemu-aarch64").mark("loadvm_state_cleanup")
{
}
probe qemu.user.aarch64.loadvm_handle_cmd_packaged = process("/usr/bin/qemu-aarch64").mark("loadvm_handle_cmd_packaged")
{
  length = $arg1;
}
probe qemu.user.aarch64.loadvm_handle_cmd_packaged_main = process("/usr/bin/qemu-aarch64").mark("loadvm_handle_cmd_packaged_main")
{
  ret = $arg1;
}
probe qemu.user.aarch64.loadvm_handle_cmd_packaged_received = process("/usr/bin/qemu-aarch64").mark("loadvm_handle_cmd_packaged_received")
{
  ret = $arg1;
}
probe qemu.user.aarch64.loadvm_handle_recv_bitmap = process("/usr/bin/qemu-aarch64").mark("loadvm_handle_recv_bitmap")
{
  s = $arg1;
}
probe qemu.user.aarch64.loadvm_postcopy_handle_advise = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_handle_advise")
{
}
probe qemu.user.aarch64.loadvm_postcopy_handle_listen = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_handle_listen")
{
  str = $arg1;
}
probe qemu.user.aarch64.loadvm_postcopy_handle_run = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_handle_run")
{
}
probe qemu.user.aarch64.loadvm_postcopy_handle_run_bh = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_handle_run_bh")
{
  str = $arg1;
}
probe qemu.user.aarch64.loadvm_postcopy_handle_resume = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_handle_resume")
{
}
probe qemu.user.aarch64.loadvm_postcopy_ram_handle_discard = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_ram_handle_discard")
{
}
probe qemu.user.aarch64.loadvm_postcopy_ram_handle_discard_end = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_ram_handle_discard_end")
{
}
probe qemu.user.aarch64.loadvm_postcopy_ram_handle_discard_header = process("/usr/bin/qemu-aarch64").mark("loadvm_postcopy_ram_handle_discard_header")
{
  ramid = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.loadvm_process_command = process("/usr/bin/qemu-aarch64").mark("loadvm_process_command")
{
  s = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.loadvm_process_command_ping = process("/usr/bin/qemu-aarch64").mark("loadvm_process_command_ping")
{
  val = $arg1;
}
probe qemu.user.aarch64.postcopy_ram_listen_thread_exit = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_listen_thread_exit")
{
}
probe qemu.user.aarch64.postcopy_ram_listen_thread_start = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_listen_thread_start")
{
}
probe qemu.user.aarch64.qemu_savevm_send_postcopy_advise = process("/usr/bin/qemu-aarch64").mark("qemu_savevm_send_postcopy_advise")
{
}
probe qemu.user.aarch64.qemu_savevm_send_postcopy_ram_discard = process("/usr/bin/qemu-aarch64").mark("qemu_savevm_send_postcopy_ram_discard")
{
  id = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.savevm_command_send = process("/usr/bin/qemu-aarch64").mark("savevm_command_send")
{
  command = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.savevm_section_start = process("/usr/bin/qemu-aarch64").mark("savevm_section_start")
{
  id = $arg1;
  section_id = $arg2;
}
probe qemu.user.aarch64.savevm_section_end = process("/usr/bin/qemu-aarch64").mark("savevm_section_end")
{
  id = $arg1;
  section_id = $arg2;
  ret = $arg3;
}
probe qemu.user.aarch64.savevm_section_skip = process("/usr/bin/qemu-aarch64").mark("savevm_section_skip")
{
  id = $arg1;
  section_id = $arg2;
}
probe qemu.user.aarch64.savevm_send_open_return_path = process("/usr/bin/qemu-aarch64").mark("savevm_send_open_return_path")
{
}
probe qemu.user.aarch64.savevm_send_ping = process("/usr/bin/qemu-aarch64").mark("savevm_send_ping")
{
  val = $arg1;
}
probe qemu.user.aarch64.savevm_send_postcopy_listen = process("/usr/bin/qemu-aarch64").mark("savevm_send_postcopy_listen")
{
}
probe qemu.user.aarch64.savevm_send_postcopy_run = process("/usr/bin/qemu-aarch64").mark("savevm_send_postcopy_run")
{
}
probe qemu.user.aarch64.savevm_send_postcopy_resume = process("/usr/bin/qemu-aarch64").mark("savevm_send_postcopy_resume")
{
}
probe qemu.user.aarch64.savevm_send_colo_enable = process("/usr/bin/qemu-aarch64").mark("savevm_send_colo_enable")
{
}
probe qemu.user.aarch64.savevm_send_recv_bitmap = process("/usr/bin/qemu-aarch64").mark("savevm_send_recv_bitmap")
{
  name = $arg1;
}
probe qemu.user.aarch64.savevm_state_setup = process("/usr/bin/qemu-aarch64").mark("savevm_state_setup")
{
}
probe qemu.user.aarch64.savevm_state_resume_prepare = process("/usr/bin/qemu-aarch64").mark("savevm_state_resume_prepare")
{
}
probe qemu.user.aarch64.savevm_state_header = process("/usr/bin/qemu-aarch64").mark("savevm_state_header")
{
}
probe qemu.user.aarch64.savevm_state_iterate = process("/usr/bin/qemu-aarch64").mark("savevm_state_iterate")
{
}
probe qemu.user.aarch64.savevm_state_cleanup = process("/usr/bin/qemu-aarch64").mark("savevm_state_cleanup")
{
}
probe qemu.user.aarch64.savevm_state_complete_precopy = process("/usr/bin/qemu-aarch64").mark("savevm_state_complete_precopy")
{
}
probe qemu.user.aarch64.vmstate_save = process("/usr/bin/qemu-aarch64").mark("vmstate_save")
{
  idstr = $arg1;
  vmsd_name = $arg2;
}
probe qemu.user.aarch64.vmstate_load = process("/usr/bin/qemu-aarch64").mark("vmstate_load")
{
  idstr = $arg1;
  vmsd_name = $arg2;
}
probe qemu.user.aarch64.postcopy_pause_incoming = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_incoming")
{
}
probe qemu.user.aarch64.postcopy_pause_incoming_continued = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_incoming_continued")
{
}
probe qemu.user.aarch64.postcopy_page_req_sync = process("/usr/bin/qemu-aarch64").mark("postcopy_page_req_sync")
{
  host_addr = $arg1;
}
probe qemu.user.aarch64.vmstate_load_field_error = process("/usr/bin/qemu-aarch64").mark("vmstate_load_field_error")
{
  field = $arg1;
  ret = $arg2;
}
probe qemu.user.aarch64.vmstate_load_state = process("/usr/bin/qemu-aarch64").mark("vmstate_load_state")
{
  name = $arg1;
  version_id = $arg2;
}
probe qemu.user.aarch64.vmstate_load_state_end = process("/usr/bin/qemu-aarch64").mark("vmstate_load_state_end")
{
  name = $arg1;
  reason = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.vmstate_load_state_field = process("/usr/bin/qemu-aarch64").mark("vmstate_load_state_field")
{
  name = $arg1;
  field = $arg2;
}
probe qemu.user.aarch64.vmstate_n_elems = process("/usr/bin/qemu-aarch64").mark("vmstate_n_elems")
{
  name = $arg1;
  n_elems = $arg2;
}
probe qemu.user.aarch64.vmstate_subsection_load = process("/usr/bin/qemu-aarch64").mark("vmstate_subsection_load")
{
  parent = $arg1;
}
probe qemu.user.aarch64.vmstate_subsection_load_bad = process("/usr/bin/qemu-aarch64").mark("vmstate_subsection_load_bad")
{
  parent = $arg1;
  sub = $arg2;
  sub2 = $arg3;
}
probe qemu.user.aarch64.vmstate_subsection_load_good = process("/usr/bin/qemu-aarch64").mark("vmstate_subsection_load_good")
{
  parent = $arg1;
}
probe qemu.user.aarch64.vmstate_save_state_pre_save_res = process("/usr/bin/qemu-aarch64").mark("vmstate_save_state_pre_save_res")
{
  name = $arg1;
  res = $arg2;
}
probe qemu.user.aarch64.vmstate_save_state_loop = process("/usr/bin/qemu-aarch64").mark("vmstate_save_state_loop")
{
  name = $arg1;
  field = $arg2;
  n_elems = $arg3;
}
probe qemu.user.aarch64.vmstate_save_state_top = process("/usr/bin/qemu-aarch64").mark("vmstate_save_state_top")
{
  idstr = $arg1;
}
probe qemu.user.aarch64.vmstate_subsection_save_loop = process("/usr/bin/qemu-aarch64").mark("vmstate_subsection_save_loop")
{
  name = $arg1;
  sub = $arg2;
}
probe qemu.user.aarch64.vmstate_subsection_save_top = process("/usr/bin/qemu-aarch64").mark("vmstate_subsection_save_top")
{
  idstr = $arg1;
}
probe qemu.user.aarch64.get_qtailq = process("/usr/bin/qemu-aarch64").mark("get_qtailq")
{
  name = $arg1;
  version_id = $arg2;
}
probe qemu.user.aarch64.get_qtailq_end = process("/usr/bin/qemu-aarch64").mark("get_qtailq_end")
{
  name = $arg1;
  reason = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.put_qtailq = process("/usr/bin/qemu-aarch64").mark("put_qtailq")
{
  name = $arg1;
  version_id = $arg2;
}
probe qemu.user.aarch64.put_qtailq_end = process("/usr/bin/qemu-aarch64").mark("put_qtailq_end")
{
  name = $arg1;
  reason = $arg2;
}
probe qemu.user.aarch64.get_gtree = process("/usr/bin/qemu-aarch64").mark("get_gtree")
{
  field_name = $arg1;
  key_vmsd_name = $arg2;
  val_vmsd_name = $arg3;
  nnodes = $arg4;
}
probe qemu.user.aarch64.get_gtree_end = process("/usr/bin/qemu-aarch64").mark("get_gtree_end")
{
  field_name = $arg1;
  key_vmsd_name = $arg2;
  val_vmsd_name = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.put_gtree = process("/usr/bin/qemu-aarch64").mark("put_gtree")
{
  field_name = $arg1;
  key_vmsd_name = $arg2;
  val_vmsd_name = $arg3;
  nnodes = $arg4;
}
probe qemu.user.aarch64.put_gtree_end = process("/usr/bin/qemu-aarch64").mark("put_gtree_end")
{
  field_name = $arg1;
  key_vmsd_name = $arg2;
  val_vmsd_name = $arg3;
  ret = $arg4;
}
probe qemu.user.aarch64.get_qlist = process("/usr/bin/qemu-aarch64").mark("get_qlist")
{
  field_name = $arg1;
  vmsd_name = $arg2;
  version_id = $arg3;
}
probe qemu.user.aarch64.get_qlist_end = process("/usr/bin/qemu-aarch64").mark("get_qlist_end")
{
  field_name = $arg1;
  vmsd_name = $arg2;
}
probe qemu.user.aarch64.put_qlist = process("/usr/bin/qemu-aarch64").mark("put_qlist")
{
  field_name = $arg1;
  vmsd_name = $arg2;
  version_id = $arg3;
}
probe qemu.user.aarch64.put_qlist_end = process("/usr/bin/qemu-aarch64").mark("put_qlist_end")
{
  field_name = $arg1;
  vmsd_name = $arg2;
}
probe qemu.user.aarch64.qemu_file_fclose = process("/usr/bin/qemu-aarch64").mark("qemu_file_fclose")
{
}
probe qemu.user.aarch64.get_queued_page = process("/usr/bin/qemu-aarch64").mark("get_queued_page")
{
  block_name = $arg1;
  tmp_offset = $arg2;
  page_abs = $arg3;
}
probe qemu.user.aarch64.get_queued_page_not_dirty = process("/usr/bin/qemu-aarch64").mark("get_queued_page_not_dirty")
{
  block_name = $arg1;
  tmp_offset = $arg2;
  page_abs = $arg3;
}
probe qemu.user.aarch64.migration_bitmap_sync_start = process("/usr/bin/qemu-aarch64").mark("migration_bitmap_sync_start")
{
}
probe qemu.user.aarch64.migration_bitmap_sync_end = process("/usr/bin/qemu-aarch64").mark("migration_bitmap_sync_end")
{
  dirty_pages = $arg1;
}
probe qemu.user.aarch64.migration_bitmap_clear_dirty = process("/usr/bin/qemu-aarch64").mark("migration_bitmap_clear_dirty")
{
  str = $arg1;
  start = $arg2;
  size = $arg3;
  page = $arg4;
}
probe qemu.user.aarch64.migration_throttle = process("/usr/bin/qemu-aarch64").mark("migration_throttle")
{
}
probe qemu.user.aarch64.ram_discard_range = process("/usr/bin/qemu-aarch64").mark("ram_discard_range")
{
  rbname = $arg1;
  start = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.ram_load_loop = process("/usr/bin/qemu-aarch64").mark("ram_load_loop")
{
  rbname = $arg1;
  addr = $arg2;
  flags = $arg3;
  host = $arg4;
}
probe qemu.user.aarch64.ram_load_postcopy_loop = process("/usr/bin/qemu-aarch64").mark("ram_load_postcopy_loop")
{
  channel = $arg1;
  addr = $arg2;
  flags = $arg3;
}
probe qemu.user.aarch64.ram_postcopy_send_discard_bitmap = process("/usr/bin/qemu-aarch64").mark("ram_postcopy_send_discard_bitmap")
{
}
probe qemu.user.aarch64.ram_save_page = process("/usr/bin/qemu-aarch64").mark("ram_save_page")
{
  rbname = $arg1;
  offset = $arg2;
  host = $arg3;
}
probe qemu.user.aarch64.ram_save_queue_pages = process("/usr/bin/qemu-aarch64").mark("ram_save_queue_pages")
{
  rbname = $arg1;
  start = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.ram_dirty_bitmap_request = process("/usr/bin/qemu-aarch64").mark("ram_dirty_bitmap_request")
{
  str = $arg1;
}
probe qemu.user.aarch64.ram_dirty_bitmap_reload_begin = process("/usr/bin/qemu-aarch64").mark("ram_dirty_bitmap_reload_begin")
{
  str = $arg1;
}
probe qemu.user.aarch64.ram_dirty_bitmap_reload_complete = process("/usr/bin/qemu-aarch64").mark("ram_dirty_bitmap_reload_complete")
{
  str = $arg1;
}
probe qemu.user.aarch64.ram_dirty_bitmap_sync_start = process("/usr/bin/qemu-aarch64").mark("ram_dirty_bitmap_sync_start")
{
}
probe qemu.user.aarch64.ram_dirty_bitmap_sync_wait = process("/usr/bin/qemu-aarch64").mark("ram_dirty_bitmap_sync_wait")
{
}
probe qemu.user.aarch64.ram_dirty_bitmap_sync_complete = process("/usr/bin/qemu-aarch64").mark("ram_dirty_bitmap_sync_complete")
{
}
probe qemu.user.aarch64.ram_state_resume_prepare = process("/usr/bin/qemu-aarch64").mark("ram_state_resume_prepare")
{
  v = $arg1;
}
probe qemu.user.aarch64.colo_flush_ram_cache_begin = process("/usr/bin/qemu-aarch64").mark("colo_flush_ram_cache_begin")
{
  dirty_pages = $arg1;
}
probe qemu.user.aarch64.colo_flush_ram_cache_end = process("/usr/bin/qemu-aarch64").mark("colo_flush_ram_cache_end")
{
}
probe qemu.user.aarch64.save_xbzrle_page_skipping = process("/usr/bin/qemu-aarch64").mark("save_xbzrle_page_skipping")
{
}
probe qemu.user.aarch64.save_xbzrle_page_overflow = process("/usr/bin/qemu-aarch64").mark("save_xbzrle_page_overflow")
{
}
probe qemu.user.aarch64.ram_save_iterate_big_wait = process("/usr/bin/qemu-aarch64").mark("ram_save_iterate_big_wait")
{
  milliconds = $arg1;
  iterations = $arg2;
}
probe qemu.user.aarch64.ram_load_complete = process("/usr/bin/qemu-aarch64").mark("ram_load_complete")
{
  ret = $arg1;
  seq_iter = $arg2;
}
probe qemu.user.aarch64.ram_write_tracking_ramblock_start = process("/usr/bin/qemu-aarch64").mark("ram_write_tracking_ramblock_start")
{
  block_id = $arg1;
  page_size = $arg2;
  addr = $arg3;
  length = $arg4;
}
probe qemu.user.aarch64.ram_write_tracking_ramblock_stop = process("/usr/bin/qemu-aarch64").mark("ram_write_tracking_ramblock_stop")
{
  block_id = $arg1;
  page_size = $arg2;
  addr = $arg3;
  length = $arg4;
}
probe qemu.user.aarch64.postcopy_preempt_triggered = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_triggered")
{
  str = $arg1;
  page = $arg2;
}
probe qemu.user.aarch64.postcopy_preempt_restored = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_restored")
{
  str = $arg1;
  page = $arg2;
}
probe qemu.user.aarch64.postcopy_preempt_hit = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_hit")
{
  str = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.postcopy_preempt_send_host_page = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_send_host_page")
{
  str = $arg1;
  offset = $arg2;
}
probe qemu.user.aarch64.postcopy_preempt_switch_channel = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_switch_channel")
{
  channel = $arg1;
}
probe qemu.user.aarch64.postcopy_preempt_reset_channel = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_reset_channel")
{
}
probe qemu.user.aarch64.multifd_new_send_channel_async = process("/usr/bin/qemu-aarch64").mark("multifd_new_send_channel_async")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_recv = process("/usr/bin/qemu-aarch64").mark("multifd_recv")
{
  id = $arg1;
  packet_num = $arg2;
  used = $arg3;
  flags = $arg4;
  next_packet_size = $arg5;
}
probe qemu.user.aarch64.multifd_recv_new_channel = process("/usr/bin/qemu-aarch64").mark("multifd_recv_new_channel")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_recv_sync_main = process("/usr/bin/qemu-aarch64").mark("multifd_recv_sync_main")
{
  packet_num = $arg1;
}
probe qemu.user.aarch64.multifd_recv_sync_main_signal = process("/usr/bin/qemu-aarch64").mark("multifd_recv_sync_main_signal")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_recv_sync_main_wait = process("/usr/bin/qemu-aarch64").mark("multifd_recv_sync_main_wait")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_recv_terminate_threads = process("/usr/bin/qemu-aarch64").mark("multifd_recv_terminate_threads")
{
  error = $arg1;
}
probe qemu.user.aarch64.multifd_recv_thread_end = process("/usr/bin/qemu-aarch64").mark("multifd_recv_thread_end")
{
  id = $arg1;
  packets = $arg2;
  pages = $arg3;
}
probe qemu.user.aarch64.multifd_recv_thread_start = process("/usr/bin/qemu-aarch64").mark("multifd_recv_thread_start")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_send = process("/usr/bin/qemu-aarch64").mark("multifd_send")
{
  id = $arg1;
  packet_num = $arg2;
  normal = $arg3;
  flags = $arg4;
  next_packet_size = $arg5;
}
probe qemu.user.aarch64.multifd_send_error = process("/usr/bin/qemu-aarch64").mark("multifd_send_error")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_send_sync_main = process("/usr/bin/qemu-aarch64").mark("multifd_send_sync_main")
{
  packet_num = $arg1;
}
probe qemu.user.aarch64.multifd_send_sync_main_signal = process("/usr/bin/qemu-aarch64").mark("multifd_send_sync_main_signal")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_send_sync_main_wait = process("/usr/bin/qemu-aarch64").mark("multifd_send_sync_main_wait")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_send_terminate_threads = process("/usr/bin/qemu-aarch64").mark("multifd_send_terminate_threads")
{
  error = $arg1;
}
probe qemu.user.aarch64.multifd_send_thread_end = process("/usr/bin/qemu-aarch64").mark("multifd_send_thread_end")
{
  id = $arg1;
  packets = $arg2;
  normal_pages = $arg3;
}
probe qemu.user.aarch64.multifd_send_thread_start = process("/usr/bin/qemu-aarch64").mark("multifd_send_thread_start")
{
  id = $arg1;
}
probe qemu.user.aarch64.multifd_tls_outgoing_handshake_start = process("/usr/bin/qemu-aarch64").mark("multifd_tls_outgoing_handshake_start")
{
  ioc = $arg1;
  tioc = $arg2;
  hostname = $arg3;
}
probe qemu.user.aarch64.multifd_tls_outgoing_handshake_error = process("/usr/bin/qemu-aarch64").mark("multifd_tls_outgoing_handshake_error")
{
  ioc = $arg1;
  err = $arg2;
}
probe qemu.user.aarch64.multifd_tls_outgoing_handshake_complete = process("/usr/bin/qemu-aarch64").mark("multifd_tls_outgoing_handshake_complete")
{
  ioc = $arg1;
}
probe qemu.user.aarch64.multifd_set_outgoing_channel = process("/usr/bin/qemu-aarch64").mark("multifd_set_outgoing_channel")
{
  ioc = $arg1;
  ioctype = $arg2;
  hostname = $arg3;
  err = $arg4;
}
probe qemu.user.aarch64.await_return_path_close_on_source_close = process("/usr/bin/qemu-aarch64").mark("await_return_path_close_on_source_close")
{
}
probe qemu.user.aarch64.await_return_path_close_on_source_joining = process("/usr/bin/qemu-aarch64").mark("await_return_path_close_on_source_joining")
{
}
probe qemu.user.aarch64.migrate_set_state = process("/usr/bin/qemu-aarch64").mark("migrate_set_state")
{
  new_state = $arg1;
}
probe qemu.user.aarch64.migrate_fd_cleanup = process("/usr/bin/qemu-aarch64").mark("migrate_fd_cleanup")
{
}
probe qemu.user.aarch64.migrate_fd_error = process("/usr/bin/qemu-aarch64").mark("migrate_fd_error")
{
  error_desc = $arg1;
}
probe qemu.user.aarch64.migrate_fd_cancel = process("/usr/bin/qemu-aarch64").mark("migrate_fd_cancel")
{
}
probe qemu.user.aarch64.migrate_handle_rp_req_pages = process("/usr/bin/qemu-aarch64").mark("migrate_handle_rp_req_pages")
{
  rbname = $arg1;
  start = $arg2;
  len = $arg3;
}
probe qemu.user.aarch64.migrate_pending = process("/usr/bin/qemu-aarch64").mark("migrate_pending")
{
  size = $arg1;
  max = $arg2;
  pre = $arg3;
  compat = $arg4;
  post = $arg5;
}
probe qemu.user.aarch64.migrate_send_rp_message = process("/usr/bin/qemu-aarch64").mark("migrate_send_rp_message")
{
  msg_type = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.migrate_send_rp_recv_bitmap = process("/usr/bin/qemu-aarch64").mark("migrate_send_rp_recv_bitmap")
{
  name = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.migration_completion_file_err = process("/usr/bin/qemu-aarch64").mark("migration_completion_file_err")
{
}
probe qemu.user.aarch64.migration_completion_vm_stop = process("/usr/bin/qemu-aarch64").mark("migration_completion_vm_stop")
{
  ret = $arg1;
}
probe qemu.user.aarch64.migration_completion_postcopy_end = process("/usr/bin/qemu-aarch64").mark("migration_completion_postcopy_end")
{
}
probe qemu.user.aarch64.migration_completion_postcopy_end_after_complete = process("/usr/bin/qemu-aarch64").mark("migration_completion_postcopy_end_after_complete")
{
}
probe qemu.user.aarch64.migration_rate_limit_pre = process("/usr/bin/qemu-aarch64").mark("migration_rate_limit_pre")
{
  ms = $arg1;
}
probe qemu.user.aarch64.migration_rate_limit_post = process("/usr/bin/qemu-aarch64").mark("migration_rate_limit_post")
{
  urgent = $arg1;
}
probe qemu.user.aarch64.migration_return_path_end_before = process("/usr/bin/qemu-aarch64").mark("migration_return_path_end_before")
{
}
probe qemu.user.aarch64.migration_return_path_end_after = process("/usr/bin/qemu-aarch64").mark("migration_return_path_end_after")
{
  rp_error = $arg1;
}
probe qemu.user.aarch64.migration_thread_after_loop = process("/usr/bin/qemu-aarch64").mark("migration_thread_after_loop")
{
}
probe qemu.user.aarch64.migration_thread_file_err = process("/usr/bin/qemu-aarch64").mark("migration_thread_file_err")
{
}
probe qemu.user.aarch64.migration_thread_setup_complete = process("/usr/bin/qemu-aarch64").mark("migration_thread_setup_complete")
{
}
probe qemu.user.aarch64.open_return_path_on_source = process("/usr/bin/qemu-aarch64").mark("open_return_path_on_source")
{
}
probe qemu.user.aarch64.open_return_path_on_source_continue = process("/usr/bin/qemu-aarch64").mark("open_return_path_on_source_continue")
{
}
probe qemu.user.aarch64.postcopy_start = process("/usr/bin/qemu-aarch64").mark("postcopy_start")
{
}
probe qemu.user.aarch64.postcopy_pause_return_path = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_return_path")
{
}
probe qemu.user.aarch64.postcopy_pause_return_path_continued = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_return_path_continued")
{
}
probe qemu.user.aarch64.postcopy_pause_continued = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_continued")
{
}
probe qemu.user.aarch64.postcopy_start_set_run = process("/usr/bin/qemu-aarch64").mark("postcopy_start_set_run")
{
}
probe qemu.user.aarch64.postcopy_page_req_add = process("/usr/bin/qemu-aarch64").mark("postcopy_page_req_add")
{
  addr = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.source_return_path_thread_bad_end = process("/usr/bin/qemu-aarch64").mark("source_return_path_thread_bad_end")
{
}
probe qemu.user.aarch64.source_return_path_thread_end = process("/usr/bin/qemu-aarch64").mark("source_return_path_thread_end")
{
}
probe qemu.user.aarch64.source_return_path_thread_entry = process("/usr/bin/qemu-aarch64").mark("source_return_path_thread_entry")
{
}
probe qemu.user.aarch64.source_return_path_thread_loop_top = process("/usr/bin/qemu-aarch64").mark("source_return_path_thread_loop_top")
{
}
probe qemu.user.aarch64.source_return_path_thread_pong = process("/usr/bin/qemu-aarch64").mark("source_return_path_thread_pong")
{
  val = $arg1;
}
probe qemu.user.aarch64.source_return_path_thread_shut = process("/usr/bin/qemu-aarch64").mark("source_return_path_thread_shut")
{
  val = $arg1;
}
probe qemu.user.aarch64.source_return_path_thread_resume_ack = process("/usr/bin/qemu-aarch64").mark("source_return_path_thread_resume_ack")
{
  v = $arg1;
}
probe qemu.user.aarch64.migration_thread_low_pending = process("/usr/bin/qemu-aarch64").mark("migration_thread_low_pending")
{
  pending = $arg1;
}
probe qemu.user.aarch64.migrate_transferred = process("/usr/bin/qemu-aarch64").mark("migrate_transferred")
{
  tranferred = $arg1;
  time_spent = $arg2;
  bandwidth = $arg3;
  size = $arg4;
}
probe qemu.user.aarch64.process_incoming_migration_co_end = process("/usr/bin/qemu-aarch64").mark("process_incoming_migration_co_end")
{
  ret = $arg1;
  ps = $arg2;
}
probe qemu.user.aarch64.process_incoming_migration_co_postcopy_end_main = process("/usr/bin/qemu-aarch64").mark("process_incoming_migration_co_postcopy_end_main")
{
}
probe qemu.user.aarch64.postcopy_preempt_enabled = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_enabled")
{
  value = $arg1;
}
probe qemu.user.aarch64.migration_set_incoming_channel = process("/usr/bin/qemu-aarch64").mark("migration_set_incoming_channel")
{
  ioc = $arg1;
  ioctype = $arg2;
}
probe qemu.user.aarch64.migration_set_outgoing_channel = process("/usr/bin/qemu-aarch64").mark("migration_set_outgoing_channel")
{
  ioc = $arg1;
  ioctype = $arg2;
  hostname = $arg3;
  err = $arg4;
}
probe qemu.user.aarch64.migrate_state_too_big = process("/usr/bin/qemu-aarch64").mark("migrate_state_too_big")
{
}
probe qemu.user.aarch64.migrate_global_state_post_load = process("/usr/bin/qemu-aarch64").mark("migrate_global_state_post_load")
{
  state = $arg1;
}
probe qemu.user.aarch64.migrate_global_state_pre_save = process("/usr/bin/qemu-aarch64").mark("migrate_global_state_pre_save")
{
  state = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_accept_incoming_migration = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_accept_incoming_migration")
{
}
probe qemu.user.aarch64.qemu_rdma_accept_incoming_migration_accepted = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_accept_incoming_migration_accepted")
{
}
probe qemu.user.aarch64.qemu_rdma_accept_pin_state = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_accept_pin_state")
{
  pin = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_accept_pin_verbsc = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_accept_pin_verbsc")
{
  verbs = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_block_for_wrid_miss = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_block_for_wrid_miss")
{
  wcompstr = $arg1;
  wcomp = $arg2;
  gcompstr = $arg3;
  req = $arg4;
}
probe qemu.user.aarch64.qemu_rdma_cleanup_disconnect = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_cleanup_disconnect")
{
}
probe qemu.user.aarch64.qemu_rdma_close = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_close")
{
}
probe qemu.user.aarch64.qemu_rdma_connect_pin_all_requested = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_connect_pin_all_requested")
{
}
probe qemu.user.aarch64.qemu_rdma_connect_pin_all_outcome = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_connect_pin_all_outcome")
{
  pin = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_dest_init_trying = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_dest_init_trying")
{
  host = $arg1;
  ip = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_dump_gid = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_dump_gid")
{
  who = $arg1;
  src = $arg2;
  dst = $arg3;
}
probe qemu.user.aarch64.qemu_rdma_exchange_get_response_start = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_exchange_get_response_start")
{
  desc = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_exchange_get_response_none = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_exchange_get_response_none")
{
  desc = $arg1;
  type = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_exchange_send_issue_callback = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_exchange_send_issue_callback")
{
}
probe qemu.user.aarch64.qemu_rdma_exchange_send_waiting = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_exchange_send_waiting")
{
  desc = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_exchange_send_received = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_exchange_send_received")
{
  desc = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_fill = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_fill")
{
  control_len = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_init_ram_blocks = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_init_ram_blocks")
{
  blocks = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_poll_recv = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_poll_recv")
{
  compstr = $arg1;
  comp = $arg2;
  id = $arg3;
  sent = $arg4;
}
probe qemu.user.aarch64.qemu_rdma_poll_write = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_poll_write")
{
  compstr = $arg1;
  comp = $arg2;
  left = $arg3;
  block = $arg4;
  chunk = $arg5;
  local = $arg6;
  remote = $arg7;
}
probe qemu.user.aarch64.qemu_rdma_poll_other = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_poll_other")
{
  compstr = $arg1;
  comp = $arg2;
  left = $arg3;
}
probe qemu.user.aarch64.qemu_rdma_post_send_control = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_post_send_control")
{
  desc = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_register_and_get_keys = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_register_and_get_keys")
{
  len = $arg1;
  start = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_register_odp_mr = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_register_odp_mr")
{
  name = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_advise_mr = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_advise_mr")
{
  name = $arg1;
  len = $arg2;
  addr = $arg3;
  res = $arg4;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_compress = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_compress")
{
  length = $arg1;
  index = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_finished = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_finished")
{
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_ram_blocks = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_ram_blocks")
{
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_ram_blocks_loop = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_ram_blocks_loop")
{
  name = $arg1;
  offset = $arg2;
  length = $arg3;
  local_host_addr = $arg4;
  src_index = $arg5;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_register = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_register")
{
  requests = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_register_loop = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_register_loop")
{
  req = $arg1;
  index = $arg2;
  addr = $arg3;
  chunks = $arg4;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_register_rkey = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_register_rkey")
{
  rkey = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_unregister = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_unregister")
{
  requests = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_unregister_loop = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_unregister_loop")
{
  count = $arg1;
  index = $arg2;
  chunk = $arg3;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_unregister_success = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_unregister_success")
{
  chunk = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_registration_handle_wait = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_handle_wait")
{
}
probe qemu.user.aarch64.qemu_rdma_registration_start = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_start")
{
  flags = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_registration_stop = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_stop")
{
  flags = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_registration_stop_ram = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_registration_stop_ram")
{
}
probe qemu.user.aarch64.qemu_rdma_resolve_host_trying = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_resolve_host_trying")
{
  host = $arg1;
  ip = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_signal_unregister_append = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_signal_unregister_append")
{
  chunk = $arg1;
  pos = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_signal_unregister_already = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_signal_unregister_already")
{
  chunk = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_unregister_waiting_inflight = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_unregister_waiting_inflight")
{
  chunk = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_unregister_waiting_proc = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_unregister_waiting_proc")
{
  chunk = $arg1;
  pos = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_unregister_waiting_send = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_unregister_waiting_send")
{
  chunk = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_unregister_waiting_complete = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_unregister_waiting_complete")
{
  chunk = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_write_flush = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_flush")
{
  sent = $arg1;
}
probe qemu.user.aarch64.qemu_rdma_write_one_block = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_one_block")
{
  count = $arg1;
  block = $arg2;
  chunk = $arg3;
  current = $arg4;
  len = $arg5;
  nb_sent = $arg6;
  nb_chunks = $arg7;
}
probe qemu.user.aarch64.qemu_rdma_write_one_post = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_one_post")
{
  chunk = $arg1;
  addr = $arg2;
  remote = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.qemu_rdma_write_one_queue_full = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_one_queue_full")
{
}
probe qemu.user.aarch64.qemu_rdma_write_one_recvregres = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_one_recvregres")
{
  mykey = $arg1;
  theirkey = $arg2;
  chunk = $arg3;
}
probe qemu.user.aarch64.qemu_rdma_write_one_sendreg = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_one_sendreg")
{
  chunk = $arg1;
  len = $arg2;
  index = $arg3;
  offset = $arg4;
}
probe qemu.user.aarch64.qemu_rdma_write_one_top = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_one_top")
{
  chunks = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.qemu_rdma_write_one_zero = process("/usr/bin/qemu-aarch64").mark("qemu_rdma_write_one_zero")
{
  chunk = $arg1;
  len = $arg2;
  index = $arg3;
  offset = $arg4;
}
probe qemu.user.aarch64.rdma_add_block = process("/usr/bin/qemu-aarch64").mark("rdma_add_block")
{
  block_name = $arg1;
  block = $arg2;
  addr = $arg3;
  offset = $arg4;
  len = $arg5;
  end = $arg6;
  bits = $arg7;
  chunks = $arg8;
}
probe qemu.user.aarch64.rdma_block_notification_handle = process("/usr/bin/qemu-aarch64").mark("rdma_block_notification_handle")
{
  name = $arg1;
  index = $arg2;
}
probe qemu.user.aarch64.rdma_delete_block = process("/usr/bin/qemu-aarch64").mark("rdma_delete_block")
{
  block = $arg1;
  addr = $arg2;
  offset = $arg3;
  len = $arg4;
  end = $arg5;
  bits = $arg6;
  chunks = $arg7;
}
probe qemu.user.aarch64.rdma_start_incoming_migration = process("/usr/bin/qemu-aarch64").mark("rdma_start_incoming_migration")
{
}
probe qemu.user.aarch64.rdma_start_incoming_migration_after_dest_init = process("/usr/bin/qemu-aarch64").mark("rdma_start_incoming_migration_after_dest_init")
{
}
probe qemu.user.aarch64.rdma_start_incoming_migration_after_rdma_listen = process("/usr/bin/qemu-aarch64").mark("rdma_start_incoming_migration_after_rdma_listen")
{
}
probe qemu.user.aarch64.rdma_start_outgoing_migration_after_rdma_connect = process("/usr/bin/qemu-aarch64").mark("rdma_start_outgoing_migration_after_rdma_connect")
{
}
probe qemu.user.aarch64.rdma_start_outgoing_migration_after_rdma_source_init = process("/usr/bin/qemu-aarch64").mark("rdma_start_outgoing_migration_after_rdma_source_init")
{
}
probe qemu.user.aarch64.postcopy_discard_send_finish = process("/usr/bin/qemu-aarch64").mark("postcopy_discard_send_finish")
{
  ramblock = $arg1;
  nwords = $arg2;
  ncmds = $arg3;
}
probe qemu.user.aarch64.postcopy_discard_send_range = process("/usr/bin/qemu-aarch64").mark("postcopy_discard_send_range")
{
  ramblock = $arg1;
  start = $arg2;
  length = $arg3;
}
probe qemu.user.aarch64.postcopy_cleanup_range = process("/usr/bin/qemu-aarch64").mark("postcopy_cleanup_range")
{
  ramblock = $arg1;
  host_addr = $arg2;
  offset = $arg3;
  length = $arg4;
}
probe qemu.user.aarch64.postcopy_init_range = process("/usr/bin/qemu-aarch64").mark("postcopy_init_range")
{
  ramblock = $arg1;
  host_addr = $arg2;
  offset = $arg3;
  length = $arg4;
}
probe qemu.user.aarch64.postcopy_nhp_range = process("/usr/bin/qemu-aarch64").mark("postcopy_nhp_range")
{
  ramblock = $arg1;
  host_addr = $arg2;
  offset = $arg3;
  length = $arg4;
}
probe qemu.user.aarch64.postcopy_place_page = process("/usr/bin/qemu-aarch64").mark("postcopy_place_page")
{
  host_addr = $arg1;
}
probe qemu.user.aarch64.postcopy_place_page_zero = process("/usr/bin/qemu-aarch64").mark("postcopy_place_page_zero")
{
  host_addr = $arg1;
}
probe qemu.user.aarch64.postcopy_ram_enable_notify = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_enable_notify")
{
}
probe qemu.user.aarch64.mark_postcopy_blocktime_begin = process("/usr/bin/qemu-aarch64").mark("mark_postcopy_blocktime_begin")
{
  addr = $arg1;
  dd = $arg2;
  time = $arg3;
  cpu = $arg4;
  received = $arg5;
}
probe qemu.user.aarch64.mark_postcopy_blocktime_end = process("/usr/bin/qemu-aarch64").mark("mark_postcopy_blocktime_end")
{
  addr = $arg1;
  dd = $arg2;
  time = $arg3;
  affected_cpu = $arg4;
}
probe qemu.user.aarch64.postcopy_pause_fault_thread = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_fault_thread")
{
}
probe qemu.user.aarch64.postcopy_pause_fault_thread_continued = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_fault_thread_continued")
{
}
probe qemu.user.aarch64.postcopy_pause_fast_load = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_fast_load")
{
}
probe qemu.user.aarch64.postcopy_pause_fast_load_continued = process("/usr/bin/qemu-aarch64").mark("postcopy_pause_fast_load_continued")
{
}
probe qemu.user.aarch64.postcopy_ram_fault_thread_entry = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_fault_thread_entry")
{
}
probe qemu.user.aarch64.postcopy_ram_fault_thread_exit = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_fault_thread_exit")
{
}
probe qemu.user.aarch64.postcopy_ram_fault_thread_fds_core = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_fault_thread_fds_core")
{
  baseufd = $arg1;
  quitfd = $arg2;
}
probe qemu.user.aarch64.postcopy_ram_fault_thread_fds_extra = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_fault_thread_fds_extra")
{
  index = $arg1;
  name = $arg2;
  fd = $arg3;
}
probe qemu.user.aarch64.postcopy_ram_fault_thread_quit = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_fault_thread_quit")
{
}
probe qemu.user.aarch64.postcopy_ram_fault_thread_request = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_fault_thread_request")
{
  hostaddr = $arg1;
  ramblock = $arg2;
  offset = $arg3;
  pid = $arg4;
}
probe qemu.user.aarch64.postcopy_ram_incoming_cleanup_closeuf = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_incoming_cleanup_closeuf")
{
}
probe qemu.user.aarch64.postcopy_ram_incoming_cleanup_entry = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_incoming_cleanup_entry")
{
}
probe qemu.user.aarch64.postcopy_ram_incoming_cleanup_exit = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_incoming_cleanup_exit")
{
}
probe qemu.user.aarch64.postcopy_ram_incoming_cleanup_join = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_incoming_cleanup_join")
{
}
probe qemu.user.aarch64.postcopy_ram_incoming_cleanup_blocktime = process("/usr/bin/qemu-aarch64").mark("postcopy_ram_incoming_cleanup_blocktime")
{
  total = $arg1;
}
probe qemu.user.aarch64.postcopy_request_shared_page = process("/usr/bin/qemu-aarch64").mark("postcopy_request_shared_page")
{
  sharer = $arg1;
  rb = $arg2;
  rb_offset = $arg3;
}
probe qemu.user.aarch64.postcopy_request_shared_page_present = process("/usr/bin/qemu-aarch64").mark("postcopy_request_shared_page_present")
{
  sharer = $arg1;
  rb = $arg2;
  rb_offset = $arg3;
}
probe qemu.user.aarch64.postcopy_wake_shared = process("/usr/bin/qemu-aarch64").mark("postcopy_wake_shared")
{
  client_addr = $arg1;
  rb = $arg2;
}
probe qemu.user.aarch64.postcopy_page_req_del = process("/usr/bin/qemu-aarch64").mark("postcopy_page_req_del")
{
  addr = $arg1;
  count = $arg2;
}
probe qemu.user.aarch64.postcopy_preempt_tls_handshake = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_tls_handshake")
{
}
probe qemu.user.aarch64.postcopy_preempt_new_channel = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_new_channel")
{
}
probe qemu.user.aarch64.postcopy_preempt_thread_entry = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_thread_entry")
{
}
probe qemu.user.aarch64.postcopy_preempt_thread_exit = process("/usr/bin/qemu-aarch64").mark("postcopy_preempt_thread_exit")
{
}
probe qemu.user.aarch64.get_mem_fault_cpu_index = process("/usr/bin/qemu-aarch64").mark("get_mem_fault_cpu_index")
{
  cpu = $arg1;
  pid = $arg2;
}
probe qemu.user.aarch64.migration_exec_outgoing = process("/usr/bin/qemu-aarch64").mark("migration_exec_outgoing")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.migration_exec_incoming = process("/usr/bin/qemu-aarch64").mark("migration_exec_incoming")
{
  cmd = $arg1;
}
probe qemu.user.aarch64.migration_fd_outgoing = process("/usr/bin/qemu-aarch64").mark("migration_fd_outgoing")
{
  fd = $arg1;
}
probe qemu.user.aarch64.migration_fd_incoming = process("/usr/bin/qemu-aarch64").mark("migration_fd_incoming")
{
  fd = $arg1;
}
probe qemu.user.aarch64.migration_socket_incoming_accepted = process("/usr/bin/qemu-aarch64").mark("migration_socket_incoming_accepted")
{
}
probe qemu.user.aarch64.migration_socket_outgoing_connected = process("/usr/bin/qemu-aarch64").mark("migration_socket_outgoing_connected")
{
  hostname = $arg1;
}
probe qemu.user.aarch64.migration_socket_outgoing_error = process("/usr/bin/qemu-aarch64").mark("migration_socket_outgoing_error")
{
  err = $arg1;
}
probe qemu.user.aarch64.migration_tls_outgoing_handshake_start = process("/usr/bin/qemu-aarch64").mark("migration_tls_outgoing_handshake_start")
{
  hostname = $arg1;
}
probe qemu.user.aarch64.migration_tls_outgoing_handshake_error = process("/usr/bin/qemu-aarch64").mark("migration_tls_outgoing_handshake_error")
{
  err = $arg1;
}
probe qemu.user.aarch64.migration_tls_outgoing_handshake_complete = process("/usr/bin/qemu-aarch64").mark("migration_tls_outgoing_handshake_complete")
{
}
probe qemu.user.aarch64.migration_tls_incoming_handshake_start = process("/usr/bin/qemu-aarch64").mark("migration_tls_incoming_handshake_start")
{
}
probe qemu.user.aarch64.migration_tls_incoming_handshake_error = process("/usr/bin/qemu-aarch64").mark("migration_tls_incoming_handshake_error")
{
  err = $arg1;
}
probe qemu.user.aarch64.migration_tls_incoming_handshake_complete = process("/usr/bin/qemu-aarch64").mark("migration_tls_incoming_handshake_complete")
{
}
probe qemu.user.aarch64.colo_vm_state_change = process("/usr/bin/qemu-aarch64").mark("colo_vm_state_change")
{
  old = $arg1;
  new = $arg2;
}
probe qemu.user.aarch64.colo_send_message = process("/usr/bin/qemu-aarch64").mark("colo_send_message")
{
  msg = $arg1;
}
probe qemu.user.aarch64.colo_receive_message = process("/usr/bin/qemu-aarch64").mark("colo_receive_message")
{
  msg = $arg1;
}
probe qemu.user.aarch64.colo_failover_set_state = process("/usr/bin/qemu-aarch64").mark("colo_failover_set_state")
{
  new_state = $arg1;
}
probe qemu.user.aarch64.send_bitmap_header_enter = process("/usr/bin/qemu-aarch64").mark("send_bitmap_header_enter")
{
}
probe qemu.user.aarch64.send_bitmap_bits = process("/usr/bin/qemu-aarch64").mark("send_bitmap_bits")
{
  flags = $arg1;
  start_sector = $arg2;
  nr_sectors = $arg3;
  data_size = $arg4;
}
probe qemu.user.aarch64.dirty_bitmap_save_iterate = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_save_iterate")
{
  in_postcopy = $arg1;
}
probe qemu.user.aarch64.dirty_bitmap_save_complete_enter = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_save_complete_enter")
{
}
probe qemu.user.aarch64.dirty_bitmap_save_complete_finish = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_save_complete_finish")
{
}
probe qemu.user.aarch64.dirty_bitmap_save_pending = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_save_pending")
{
  pending = $arg1;
  max_size = $arg2;
}
probe qemu.user.aarch64.dirty_bitmap_load_complete = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_load_complete")
{
}
probe qemu.user.aarch64.dirty_bitmap_load_bits_enter = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_load_bits_enter")
{
  first_sector = $arg1;
  nr_sectors = $arg2;
}
probe qemu.user.aarch64.dirty_bitmap_load_bits_zeroes = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_load_bits_zeroes")
{
}
probe qemu.user.aarch64.dirty_bitmap_load_header = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_load_header")
{
  flags = $arg1;
}
probe qemu.user.aarch64.dirty_bitmap_load_enter = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_load_enter")
{
}
probe qemu.user.aarch64.dirty_bitmap_load_success = process("/usr/bin/qemu-aarch64").mark("dirty_bitmap_load_success")
{
}
probe qemu.user.aarch64.dirtyrate_set_state = process("/usr/bin/qemu-aarch64").mark("dirtyrate_set_state")
{
  new_state = $arg1;
}
probe qemu.user.aarch64.query_dirty_rate_info = process("/usr/bin/qemu-aarch64").mark("query_dirty_rate_info")
{
  new_state = $arg1;
}
probe qemu.user.aarch64.get_ramblock_vfn_hash = process("/usr/bin/qemu-aarch64").mark("get_ramblock_vfn_hash")
{
  idstr = $arg1;
  vfn = $arg2;
  crc = $arg3;
}
probe qemu.user.aarch64.calc_page_dirty_rate = process("/usr/bin/qemu-aarch64").mark("calc_page_dirty_rate")
{
  idstr = $arg1;
  new_crc = $arg2;
  old_crc = $arg3;
}
probe qemu.user.aarch64.skip_sample_ramblock = process("/usr/bin/qemu-aarch64").mark("skip_sample_ramblock")
{
  idstr = $arg1;
  ramblock_size = $arg2;
}
probe qemu.user.aarch64.find_page_matched = process("/usr/bin/qemu-aarch64").mark("find_page_matched")
{
  idstr = $arg1;
}
probe qemu.user.aarch64.dirtyrate_calculate = process("/usr/bin/qemu-aarch64").mark("dirtyrate_calculate")
{
  dirtyrate = $arg1;
}
probe qemu.user.aarch64.dirtyrate_do_calculate_vcpu = process("/usr/bin/qemu-aarch64").mark("dirtyrate_do_calculate_vcpu")
{
  idx = $arg1;
  rate = $arg2;
}
probe qemu.user.aarch64.migration_block_init_shared = process("/usr/bin/qemu-aarch64").mark("migration_block_init_shared")
{
  blk_device_name = $arg1;
}
probe qemu.user.aarch64.migration_block_init_full = process("/usr/bin/qemu-aarch64").mark("migration_block_init_full")
{
  blk_device_name = $arg1;
}
probe qemu.user.aarch64.migration_block_save_device_dirty = process("/usr/bin/qemu-aarch64").mark("migration_block_save_device_dirty")
{
  sector = $arg1;
}
probe qemu.user.aarch64.migration_block_flush_blks = process("/usr/bin/qemu-aarch64").mark("migration_block_flush_blks")
{
  action = $arg1;
  submitted = $arg2;
  read_done = $arg3;
  transferred = $arg4;
}
probe qemu.user.aarch64.migration_block_save = process("/usr/bin/qemu-aarch64").mark("migration_block_save")
{
  mig_stage = $arg1;
  submitted = $arg2;
  transferred = $arg3;
}
probe qemu.user.aarch64.migration_block_save_complete = process("/usr/bin/qemu-aarch64").mark("migration_block_save_complete")
{
}
probe qemu.user.aarch64.migration_block_save_pending = process("/usr/bin/qemu-aarch64").mark("migration_block_save_pending")
{
  pending = $arg1;
}
probe qemu.user.aarch64.migration_pagecache_init = process("/usr/bin/qemu-aarch64").mark("migration_pagecache_init")
{
  max_num_items = $arg1;
}
probe qemu.user.aarch64.migration_pagecache_insert = process("/usr/bin/qemu-aarch64").mark("migration_pagecache_insert")
{
}
probe qemu.user.aarch64.qemu_announce_self_iter = process("/usr/bin/qemu-aarch64").mark("qemu_announce_self_iter")
{
  id = $arg1;
  name = $arg2;
  mac = $arg3;
  skip = $arg4;
}
probe qemu.user.aarch64.qemu_announce_timer_del = process("/usr/bin/qemu-aarch64").mark("qemu_announce_timer_del")
{
  free_named = $arg1;
  free_timer = $arg2;
  id = $arg3;
}
probe qemu.user.aarch64.vhost_user_event = process("/usr/bin/qemu-aarch64").mark("vhost_user_event")
{
  chr = $arg1;
  event = $arg2;
}
probe qemu.user.aarch64.colo_proxy_main = process("/usr/bin/qemu-aarch64").mark("colo_proxy_main")
{
  chr = $arg1;
}
probe qemu.user.aarch64.colo_proxy_main_vnet_info = process("/usr/bin/qemu-aarch64").mark("colo_proxy_main_vnet_info")
{
  sta = $arg1;
  vnet_hdr = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.colo_compare_main = process("/usr/bin/qemu-aarch64").mark("colo_compare_main")
{
  chr = $arg1;
}
probe qemu.user.aarch64.colo_compare_drop_packet = process("/usr/bin/qemu-aarch64").mark("colo_compare_drop_packet")
{
  queue = $arg1;
  chr = $arg2;
}
probe qemu.user.aarch64.colo_compare_udp_miscompare = process("/usr/bin/qemu-aarch64").mark("colo_compare_udp_miscompare")
{
  sta = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.colo_compare_icmp_miscompare = process("/usr/bin/qemu-aarch64").mark("colo_compare_icmp_miscompare")
{
  sta = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.colo_compare_ip_info = process("/usr/bin/qemu-aarch64").mark("colo_compare_ip_info")
{
  psize = $arg1;
  sta = $arg2;
  stb = $arg3;
  ssize = $arg4;
  stc = $arg5;
  std = $arg6;
}
probe qemu.user.aarch64.colo_old_packet_check_found = process("/usr/bin/qemu-aarch64").mark("colo_old_packet_check_found")
{
  old_time = $arg1;
}
probe qemu.user.aarch64.colo_compare_tcp_info = process("/usr/bin/qemu-aarch64").mark("colo_compare_tcp_info")
{
  pkt = $arg1;
  seq = $arg2;
  ack = $arg3;
  hdlen = $arg4;
  pdlen = $arg5;
  offset = $arg6;
  flags = $arg7;
}
probe qemu.user.aarch64.colo_filter_rewriter_pkt_info = process("/usr/bin/qemu-aarch64").mark("colo_filter_rewriter_pkt_info")
{
  func = $arg1;
  src = $arg2;
  dst = $arg3;
  seq = $arg4;
  ack = $arg5;
  flag = $arg6;
}
probe qemu.user.aarch64.colo_filter_rewriter_conn_offset = process("/usr/bin/qemu-aarch64").mark("colo_filter_rewriter_conn_offset")
{
  offset = $arg1;
}
probe qemu.user.aarch64.balloon_event = process("/usr/bin/qemu-aarch64").mark("balloon_event")
{
  opaque = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.cpu_in = process("/usr/bin/qemu-aarch64").mark("cpu_in")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.cpu_out = process("/usr/bin/qemu-aarch64").mark("cpu_out")
{
  addr = $arg1;
  size = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.memory_region_ops_read = process("/usr/bin/qemu-aarch64").mark("memory_region_ops_read")
{
  cpu_index = $arg1;
  mr = $arg2;
  addr = $arg3;
  value = $arg4;
  size = $arg5;
  name = $arg6;
}
probe qemu.user.aarch64.memory_region_ops_write = process("/usr/bin/qemu-aarch64").mark("memory_region_ops_write")
{
  cpu_index = $arg1;
  mr = $arg2;
  addr = $arg3;
  value = $arg4;
  size = $arg5;
  name = $arg6;
}
probe qemu.user.aarch64.memory_region_subpage_read = process("/usr/bin/qemu-aarch64").mark("memory_region_subpage_read")
{
  cpu_index = $arg1;
  mr = $arg2;
  offset = $arg3;
  value = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.memory_region_subpage_write = process("/usr/bin/qemu-aarch64").mark("memory_region_subpage_write")
{
  cpu_index = $arg1;
  mr = $arg2;
  offset = $arg3;
  value = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.memory_region_ram_device_read = process("/usr/bin/qemu-aarch64").mark("memory_region_ram_device_read")
{
  cpu_index = $arg1;
  mr = $arg2;
  addr = $arg3;
  value = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.memory_region_ram_device_write = process("/usr/bin/qemu-aarch64").mark("memory_region_ram_device_write")
{
  cpu_index = $arg1;
  mr = $arg2;
  addr = $arg3;
  value = $arg4;
  size = $arg5;
}
probe qemu.user.aarch64.memory_region_sync_dirty = process("/usr/bin/qemu-aarch64").mark("memory_region_sync_dirty")
{
  mr = $arg1;
  listener = $arg2;
  global_ = $arg3;
}
probe qemu.user.aarch64.flatview_new = process("/usr/bin/qemu-aarch64").mark("flatview_new")
{
  view = $arg1;
  root = $arg2;
}
probe qemu.user.aarch64.flatview_destroy = process("/usr/bin/qemu-aarch64").mark("flatview_destroy")
{
  view = $arg1;
  root = $arg2;
}
probe qemu.user.aarch64.flatview_destroy_rcu = process("/usr/bin/qemu-aarch64").mark("flatview_destroy_rcu")
{
  view = $arg1;
  root = $arg2;
}
probe qemu.user.aarch64.global_dirty_changed = process("/usr/bin/qemu-aarch64").mark("global_dirty_changed")
{
  bitmask = $arg1;
}
probe qemu.user.aarch64.vm_stop_flush_all = process("/usr/bin/qemu-aarch64").mark("vm_stop_flush_all")
{
  ret = $arg1;
}
probe qemu.user.aarch64.vm_state_notify = process("/usr/bin/qemu-aarch64").mark("vm_state_notify")
{
  running = $arg1;
  reason = $arg2;
  reason_str = $arg3;
}
probe qemu.user.aarch64.load_file = process("/usr/bin/qemu-aarch64").mark("load_file")
{
  name = $arg1;
  path = $arg2;
}
probe qemu.user.aarch64.runstate_set = process("/usr/bin/qemu-aarch64").mark("runstate_set")
{
  current_state = $arg1;
  current_state_str = $arg2;
  new_state = $arg3;
  new_state_str = $arg4;
}
probe qemu.user.aarch64.system_wakeup_request = process("/usr/bin/qemu-aarch64").mark("system_wakeup_request")
{
  reason = $arg1;
}
probe qemu.user.aarch64.qemu_system_shutdown_request = process("/usr/bin/qemu-aarch64").mark("qemu_system_shutdown_request")
{
  reason = $arg1;
}
probe qemu.user.aarch64.qemu_system_powerdown_request = process("/usr/bin/qemu-aarch64").mark("qemu_system_powerdown_request")
{
}
probe qemu.user.aarch64.dirtylimit_state_initialize = process("/usr/bin/qemu-aarch64").mark("dirtylimit_state_initialize")
{
  max_cpus = $arg1;
}
probe qemu.user.aarch64.dirtylimit_state_finalize = process("/usr/bin/qemu-aarch64").mark("dirtylimit_state_finalize")
{
}
probe qemu.user.aarch64.dirtylimit_throttle_pct = process("/usr/bin/qemu-aarch64").mark("dirtylimit_throttle_pct")
{
  cpu_index = $arg1;
  pct = $arg2;
  time_us = $arg3;
}
probe qemu.user.aarch64.dirtylimit_set_vcpu = process("/usr/bin/qemu-aarch64").mark("dirtylimit_set_vcpu")
{
  cpu_index = $arg1;
  quota = $arg2;
}
probe qemu.user.aarch64.dirtylimit_vcpu_execute = process("/usr/bin/qemu-aarch64").mark("dirtylimit_vcpu_execute")
{
  cpu_index = $arg1;
  sleep_time_us = $arg2;
}
probe qemu.user.aarch64.console_gfx_new = process("/usr/bin/qemu-aarch64").mark("console_gfx_new")
{
}
probe qemu.user.aarch64.console_gfx_reuse = process("/usr/bin/qemu-aarch64").mark("console_gfx_reuse")
{
  index = $arg1;
}
probe qemu.user.aarch64.console_gfx_close = process("/usr/bin/qemu-aarch64").mark("console_gfx_close")
{
  index = $arg1;
}
probe qemu.user.aarch64.console_putchar_csi = process("/usr/bin/qemu-aarch64").mark("console_putchar_csi")
{
  esc_param0 = $arg1;
  esc_param1 = $arg2;
  ch = $arg3;
  nb_esc_params = $arg4;
}
probe qemu.user.aarch64.console_putchar_unhandled = process("/usr/bin/qemu-aarch64").mark("console_putchar_unhandled")
{
  ch = $arg1;
}
probe qemu.user.aarch64.console_txt_new = process("/usr/bin/qemu-aarch64").mark("console_txt_new")
{
  w = $arg1;
  h = $arg2;
}
probe qemu.user.aarch64.console_select = process("/usr/bin/qemu-aarch64").mark("console_select")
{
  nr = $arg1;
}
probe qemu.user.aarch64.console_refresh = process("/usr/bin/qemu-aarch64").mark("console_refresh")
{
  interval = $arg1;
}
probe qemu.user.aarch64.displaysurface_create = process("/usr/bin/qemu-aarch64").mark("displaysurface_create")
{
  display_surface = $arg1;
  w = $arg2;
  h = $arg3;
}
probe qemu.user.aarch64.displaysurface_create_from = process("/usr/bin/qemu-aarch64").mark("displaysurface_create_from")
{
  display_surface = $arg1;
  w = $arg2;
  h = $arg3;
  format = $arg4;
}
probe qemu.user.aarch64.displaysurface_create_pixman = process("/usr/bin/qemu-aarch64").mark("displaysurface_create_pixman")
{
  display_surface = $arg1;
}
probe qemu.user.aarch64.displaysurface_free = process("/usr/bin/qemu-aarch64").mark("displaysurface_free")
{
  display_surface = $arg1;
}
probe qemu.user.aarch64.displaychangelistener_register = process("/usr/bin/qemu-aarch64").mark("displaychangelistener_register")
{
  dcl = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.displaychangelistener_unregister = process("/usr/bin/qemu-aarch64").mark("displaychangelistener_unregister")
{
  dcl = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.ppm_save = process("/usr/bin/qemu-aarch64").mark("ppm_save")
{
  fd = $arg1;
  image = $arg2;
}
probe qemu.user.aarch64.gd_switch = process("/usr/bin/qemu-aarch64").mark("gd_switch")
{
  tab = $arg1;
  width = $arg2;
  height = $arg3;
}
probe qemu.user.aarch64.gd_update = process("/usr/bin/qemu-aarch64").mark("gd_update")
{
  tab = $arg1;
  x = $arg2;
  y = $arg3;
  w = $arg4;
  h = $arg5;
}
probe qemu.user.aarch64.gd_key_event = process("/usr/bin/qemu-aarch64").mark("gd_key_event")
{
  tab = $arg1;
  gdk_keycode = $arg2;
  qkeycode = $arg3;
  action = $arg4;
}
probe qemu.user.aarch64.gd_grab = process("/usr/bin/qemu-aarch64").mark("gd_grab")
{
  tab = $arg1;
  device = $arg2;
  reason = $arg3;
}
probe qemu.user.aarch64.gd_ungrab = process("/usr/bin/qemu-aarch64").mark("gd_ungrab")
{
  tab = $arg1;
  device = $arg2;
}
probe qemu.user.aarch64.gd_keymap_windowing = process("/usr/bin/qemu-aarch64").mark("gd_keymap_windowing")
{
  name = $arg1;
}
probe qemu.user.aarch64.gd_gl_area_create_context = process("/usr/bin/qemu-aarch64").mark("gd_gl_area_create_context")
{
  ctx = $arg1;
  major = $arg2;
  minor = $arg3;
}
probe qemu.user.aarch64.gd_gl_area_destroy_context = process("/usr/bin/qemu-aarch64").mark("gd_gl_area_destroy_context")
{
  ctx = $arg1;
  current_ctx = $arg2;
}
probe qemu.user.aarch64.vnc_key_guest_leds = process("/usr/bin/qemu-aarch64").mark("vnc_key_guest_leds")
{
  caps = $arg1;
  num = $arg2;
  scroll = $arg3;
}
probe qemu.user.aarch64.vnc_key_map_init = process("/usr/bin/qemu-aarch64").mark("vnc_key_map_init")
{
  layout = $arg1;
}
probe qemu.user.aarch64.vnc_key_event_ext = process("/usr/bin/qemu-aarch64").mark("vnc_key_event_ext")
{
  down = $arg1;
  sym = $arg2;
  keycode = $arg3;
  name = $arg4;
}
probe qemu.user.aarch64.vnc_key_event_map = process("/usr/bin/qemu-aarch64").mark("vnc_key_event_map")
{
  down = $arg1;
  sym = $arg2;
  keycode = $arg3;
  name = $arg4;
}
probe qemu.user.aarch64.vnc_key_sync_numlock = process("/usr/bin/qemu-aarch64").mark("vnc_key_sync_numlock")
{
  on = $arg1;
}
probe qemu.user.aarch64.vnc_key_sync_capslock = process("/usr/bin/qemu-aarch64").mark("vnc_key_sync_capslock")
{
  on = $arg1;
}
probe qemu.user.aarch64.vnc_msg_server_audio_begin = process("/usr/bin/qemu-aarch64").mark("vnc_msg_server_audio_begin")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_msg_server_audio_end = process("/usr/bin/qemu-aarch64").mark("vnc_msg_server_audio_end")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_msg_server_audio_data = process("/usr/bin/qemu-aarch64").mark("vnc_msg_server_audio_data")
{
  state = $arg1;
  ioc = $arg2;
  buf = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.vnc_msg_server_desktop_resize = process("/usr/bin/qemu-aarch64").mark("vnc_msg_server_desktop_resize")
{
  state = $arg1;
  ioc = $arg2;
  width = $arg3;
  height = $arg4;
}
probe qemu.user.aarch64.vnc_msg_server_ext_desktop_resize = process("/usr/bin/qemu-aarch64").mark("vnc_msg_server_ext_desktop_resize")
{
  state = $arg1;
  ioc = $arg2;
  width = $arg3;
  height = $arg4;
  reason = $arg5;
}
probe qemu.user.aarch64.vnc_msg_client_audio_enable = process("/usr/bin/qemu-aarch64").mark("vnc_msg_client_audio_enable")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_msg_client_audio_disable = process("/usr/bin/qemu-aarch64").mark("vnc_msg_client_audio_disable")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_msg_client_audio_format = process("/usr/bin/qemu-aarch64").mark("vnc_msg_client_audio_format")
{
  state = $arg1;
  ioc = $arg2;
  fmt = $arg3;
  channels = $arg4;
  freq = $arg5;
}
probe qemu.user.aarch64.vnc_msg_client_set_desktop_size = process("/usr/bin/qemu-aarch64").mark("vnc_msg_client_set_desktop_size")
{
  state = $arg1;
  ioc = $arg2;
  width = $arg3;
  height = $arg4;
  screens = $arg5;
}
probe qemu.user.aarch64.vnc_client_eof = process("/usr/bin/qemu-aarch64").mark("vnc_client_eof")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_client_io_error = process("/usr/bin/qemu-aarch64").mark("vnc_client_io_error")
{
  state = $arg1;
  ioc = $arg2;
  msg = $arg3;
}
probe qemu.user.aarch64.vnc_client_connect = process("/usr/bin/qemu-aarch64").mark("vnc_client_connect")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_client_disconnect_start = process("/usr/bin/qemu-aarch64").mark("vnc_client_disconnect_start")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_client_disconnect_finish = process("/usr/bin/qemu-aarch64").mark("vnc_client_disconnect_finish")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_client_io_wrap = process("/usr/bin/qemu-aarch64").mark("vnc_client_io_wrap")
{
  state = $arg1;
  ioc = $arg2;
  type = $arg3;
}
probe qemu.user.aarch64.vnc_client_throttle_threshold = process("/usr/bin/qemu-aarch64").mark("vnc_client_throttle_threshold")
{
  state = $arg1;
  ioc = $arg2;
  oldoffset = $arg3;
  offset = $arg4;
  client_width = $arg5;
  client_height = $arg6;
  bytes_per_pixel = $arg7;
  audio_cap = $arg8;
}
probe qemu.user.aarch64.vnc_client_throttle_incremental = process("/usr/bin/qemu-aarch64").mark("vnc_client_throttle_incremental")
{
  state = $arg1;
  ioc = $arg2;
  job_update = $arg3;
  offset = $arg4;
}
probe qemu.user.aarch64.vnc_client_throttle_forced = process("/usr/bin/qemu-aarch64").mark("vnc_client_throttle_forced")
{
  state = $arg1;
  ioc = $arg2;
  job_update = $arg3;
  offset = $arg4;
}
probe qemu.user.aarch64.vnc_client_throttle_audio = process("/usr/bin/qemu-aarch64").mark("vnc_client_throttle_audio")
{
  state = $arg1;
  ioc = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.vnc_client_unthrottle_forced = process("/usr/bin/qemu-aarch64").mark("vnc_client_unthrottle_forced")
{
  state = $arg1;
  ioc = $arg2;
}
probe qemu.user.aarch64.vnc_client_unthrottle_incremental = process("/usr/bin/qemu-aarch64").mark("vnc_client_unthrottle_incremental")
{
  state = $arg1;
  ioc = $arg2;
  offset = $arg3;
}
probe qemu.user.aarch64.vnc_client_output_limit = process("/usr/bin/qemu-aarch64").mark("vnc_client_output_limit")
{
  state = $arg1;
  ioc = $arg2;
  offset = $arg3;
  threshold = $arg4;
}
probe qemu.user.aarch64.vnc_server_dpy_pageflip = process("/usr/bin/qemu-aarch64").mark("vnc_server_dpy_pageflip")
{
  dpy = $arg1;
  w = $arg2;
  h = $arg3;
  fmt = $arg4;
}
probe qemu.user.aarch64.vnc_server_dpy_recreate = process("/usr/bin/qemu-aarch64").mark("vnc_server_dpy_recreate")
{
  dpy = $arg1;
  w = $arg2;
  h = $arg3;
  fmt = $arg4;
}
probe qemu.user.aarch64.vnc_job_add_rect = process("/usr/bin/qemu-aarch64").mark("vnc_job_add_rect")
{
  state = $arg1;
  job = $arg2;
  x = $arg3;
  y = $arg4;
  w = $arg5;
  h = $arg6;
}
probe qemu.user.aarch64.vnc_job_discard_rect = process("/usr/bin/qemu-aarch64").mark("vnc_job_discard_rect")
{
  state = $arg1;
  job = $arg2;
  x = $arg3;
  y = $arg4;
  w = $arg5;
  h = $arg6;
}
probe qemu.user.aarch64.vnc_job_clamp_rect = process("/usr/bin/qemu-aarch64").mark("vnc_job_clamp_rect")
{
  state = $arg1;
  job = $arg2;
  x = $arg3;
  y = $arg4;
  w = $arg5;
  h = $arg6;
}
probe qemu.user.aarch64.vnc_job_clamped_rect = process("/usr/bin/qemu-aarch64").mark("vnc_job_clamped_rect")
{
  state = $arg1;
  job = $arg2;
  x = $arg3;
  y = $arg4;
  w = $arg5;
  h = $arg6;
}
probe qemu.user.aarch64.vnc_job_nrects = process("/usr/bin/qemu-aarch64").mark("vnc_job_nrects")
{
  state = $arg1;
  job = $arg2;
  nrects = $arg3;
}
probe qemu.user.aarch64.vnc_auth_init = process("/usr/bin/qemu-aarch64").mark("vnc_auth_init")
{
  display = $arg1;
  websock = $arg2;
  auth = $arg3;
  subauth = $arg4;
}
probe qemu.user.aarch64.vnc_auth_start = process("/usr/bin/qemu-aarch64").mark("vnc_auth_start")
{
  state = $arg1;
  method = $arg2;
}
probe qemu.user.aarch64.vnc_auth_pass = process("/usr/bin/qemu-aarch64").mark("vnc_auth_pass")
{
  state = $arg1;
  method = $arg2;
}
probe qemu.user.aarch64.vnc_auth_fail = process("/usr/bin/qemu-aarch64").mark("vnc_auth_fail")
{
  state = $arg1;
  method = $arg2;
  message = $arg3;
  reason = $arg4;
}
probe qemu.user.aarch64.vnc_auth_reject = process("/usr/bin/qemu-aarch64").mark("vnc_auth_reject")
{
  state = $arg1;
  expect = $arg2;
  got = $arg3;
}
probe qemu.user.aarch64.vnc_auth_vencrypt_version = process("/usr/bin/qemu-aarch64").mark("vnc_auth_vencrypt_version")
{
  state = $arg1;
  major = $arg2;
  minor = $arg3;
}
probe qemu.user.aarch64.vnc_auth_vencrypt_subauth = process("/usr/bin/qemu-aarch64").mark("vnc_auth_vencrypt_subauth")
{
  state = $arg1;
  auth = $arg2;
}
probe qemu.user.aarch64.vnc_auth_sasl_mech_list = process("/usr/bin/qemu-aarch64").mark("vnc_auth_sasl_mech_list")
{
  state = $arg1;
  mechs = $arg2;
}
probe qemu.user.aarch64.vnc_auth_sasl_mech_choose = process("/usr/bin/qemu-aarch64").mark("vnc_auth_sasl_mech_choose")
{
  state = $arg1;
  mech = $arg2;
}
probe qemu.user.aarch64.vnc_auth_sasl_start = process("/usr/bin/qemu-aarch64").mark("vnc_auth_sasl_start")
{
  state = $arg1;
  clientdata = $arg2;
  clientlen = $arg3;
  serverdata = $arg4;
  severlen = $arg5;
  ret = $arg6;
}
probe qemu.user.aarch64.vnc_auth_sasl_step = process("/usr/bin/qemu-aarch64").mark("vnc_auth_sasl_step")
{
  state = $arg1;
  clientdata = $arg2;
  clientlen = $arg3;
  serverdata = $arg4;
  severlen = $arg5;
  ret = $arg6;
}
probe qemu.user.aarch64.vnc_auth_sasl_ssf = process("/usr/bin/qemu-aarch64").mark("vnc_auth_sasl_ssf")
{
  state = $arg1;
  ssf = $arg2;
}
probe qemu.user.aarch64.vnc_auth_sasl_username = process("/usr/bin/qemu-aarch64").mark("vnc_auth_sasl_username")
{
  state = $arg1;
  name = $arg2;
}
probe qemu.user.aarch64.vnc_auth_sasl_acl = process("/usr/bin/qemu-aarch64").mark("vnc_auth_sasl_acl")
{
  state = $arg1;
  allow = $arg2;
}
probe qemu.user.aarch64.input_event_key_number = process("/usr/bin/qemu-aarch64").mark("input_event_key_number")
{
  conidx = $arg1;
  number = $arg2;
  qcode = $arg3;
  down = $arg4;
}
probe qemu.user.aarch64.input_event_key_qcode = process("/usr/bin/qemu-aarch64").mark("input_event_key_qcode")
{
  conidx = $arg1;
  qcode = $arg2;
  down = $arg3;
}
probe qemu.user.aarch64.input_event_btn = process("/usr/bin/qemu-aarch64").mark("input_event_btn")
{
  conidx = $arg1;
  btn = $arg2;
  down = $arg3;
}
probe qemu.user.aarch64.input_event_rel = process("/usr/bin/qemu-aarch64").mark("input_event_rel")
{
  conidx = $arg1;
  axis = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.input_event_abs = process("/usr/bin/qemu-aarch64").mark("input_event_abs")
{
  conidx = $arg1;
  axis = $arg2;
  value = $arg3;
}
probe qemu.user.aarch64.input_event_sync = process("/usr/bin/qemu-aarch64").mark("input_event_sync")
{
}
probe qemu.user.aarch64.input_mouse_mode = process("/usr/bin/qemu-aarch64").mark("input_mouse_mode")
{
  absolute = $arg1;
}
probe qemu.user.aarch64.sdl2_process_key = process("/usr/bin/qemu-aarch64").mark("sdl2_process_key")
{
  sdl_scancode = $arg1;
  qcode = $arg2;
  action = $arg3;
}
probe qemu.user.aarch64.qemu_spice_add_memslot = process("/usr/bin/qemu-aarch64").mark("qemu_spice_add_memslot")
{
  qid = $arg1;
  slot_id = $arg2;
  virt_start = $arg3;
  virt_end = $arg4;
  async = $arg5;
}
probe qemu.user.aarch64.qemu_spice_del_memslot = process("/usr/bin/qemu-aarch64").mark("qemu_spice_del_memslot")
{
  qid = $arg1;
  gid = $arg2;
  slot_id = $arg3;
}
probe qemu.user.aarch64.qemu_spice_create_primary_surface = process("/usr/bin/qemu-aarch64").mark("qemu_spice_create_primary_surface")
{
  qid = $arg1;
  sid = $arg2;
  surface = $arg3;
  async = $arg4;
}
probe qemu.user.aarch64.qemu_spice_destroy_primary_surface = process("/usr/bin/qemu-aarch64").mark("qemu_spice_destroy_primary_surface")
{
  qid = $arg1;
  sid = $arg2;
  async = $arg3;
}
probe qemu.user.aarch64.qemu_spice_wakeup = process("/usr/bin/qemu-aarch64").mark("qemu_spice_wakeup")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qemu_spice_create_update = process("/usr/bin/qemu-aarch64").mark("qemu_spice_create_update")
{
  left = $arg1;
  right = $arg2;
  top = $arg3;
  bottom = $arg4;
}
probe qemu.user.aarch64.qemu_spice_display_update = process("/usr/bin/qemu-aarch64").mark("qemu_spice_display_update")
{
  qid = $arg1;
  x = $arg2;
  y = $arg3;
  w = $arg4;
  h = $arg5;
}
probe qemu.user.aarch64.qemu_spice_display_surface = process("/usr/bin/qemu-aarch64").mark("qemu_spice_display_surface")
{
  qid = $arg1;
  w = $arg2;
  h = $arg3;
  fast = $arg4;
}
probe qemu.user.aarch64.qemu_spice_display_refresh = process("/usr/bin/qemu-aarch64").mark("qemu_spice_display_refresh")
{
  qid = $arg1;
  notify = $arg2;
}
probe qemu.user.aarch64.qemu_spice_ui_info = process("/usr/bin/qemu-aarch64").mark("qemu_spice_ui_info")
{
  qid = $arg1;
  width = $arg2;
  height = $arg3;
}
probe qemu.user.aarch64.qemu_spice_gl_surface = process("/usr/bin/qemu-aarch64").mark("qemu_spice_gl_surface")
{
  qid = $arg1;
  w = $arg2;
  h = $arg3;
  fourcc = $arg4;
}
probe qemu.user.aarch64.qemu_spice_gl_scanout_disable = process("/usr/bin/qemu-aarch64").mark("qemu_spice_gl_scanout_disable")
{
  qid = $arg1;
}
probe qemu.user.aarch64.qemu_spice_gl_scanout_texture = process("/usr/bin/qemu-aarch64").mark("qemu_spice_gl_scanout_texture")
{
  qid = $arg1;
  w = $arg2;
  h = $arg3;
  fourcc = $arg4;
}
probe qemu.user.aarch64.qemu_spice_gl_cursor = process("/usr/bin/qemu-aarch64").mark("qemu_spice_gl_cursor")
{
  qid = $arg1;
  enabled = $arg2;
  hotspot = $arg3;
}
probe qemu.user.aarch64.qemu_spice_gl_forward_dmabuf = process("/usr/bin/qemu-aarch64").mark("qemu_spice_gl_forward_dmabuf")
{
  qid = $arg1;
  width = $arg2;
  height = $arg3;
}
probe qemu.user.aarch64.qemu_spice_gl_render_dmabuf = process("/usr/bin/qemu-aarch64").mark("qemu_spice_gl_render_dmabuf")
{
  qid = $arg1;
  width = $arg2;
  height = $arg3;
}
probe qemu.user.aarch64.qemu_spice_gl_update = process("/usr/bin/qemu-aarch64").mark("qemu_spice_gl_update")
{
  qid = $arg1;
  x = $arg2;
  y = $arg3;
  w = $arg4;
  h = $arg5;
}
probe qemu.user.aarch64.keymap_parse = process("/usr/bin/qemu-aarch64").mark("keymap_parse")
{
  file = $arg1;
}
probe qemu.user.aarch64.keymap_add = process("/usr/bin/qemu-aarch64").mark("keymap_add")
{
  sym = $arg1;
  code = $arg2;
  line = $arg3;
}
probe qemu.user.aarch64.keymap_unmapped = process("/usr/bin/qemu-aarch64").mark("keymap_unmapped")
{
  sym = $arg1;
}
probe qemu.user.aarch64.xkeymap_extension = process("/usr/bin/qemu-aarch64").mark("xkeymap_extension")
{
  name = $arg1;
}
probe qemu.user.aarch64.xkeymap_vendor = process("/usr/bin/qemu-aarch64").mark("xkeymap_vendor")
{
  name = $arg1;
}
probe qemu.user.aarch64.xkeymap_keycodes = process("/usr/bin/qemu-aarch64").mark("xkeymap_keycodes")
{
  name = $arg1;
}
probe qemu.user.aarch64.xkeymap_keymap = process("/usr/bin/qemu-aarch64").mark("xkeymap_keymap")
{
  name = $arg1;
}
probe qemu.user.aarch64.clipboard_check_serial = process("/usr/bin/qemu-aarch64").mark("clipboard_check_serial")
{
  cur = $arg1;
  recv = $arg2;
  ok = $arg3;
}
probe qemu.user.aarch64.vdagent_open = process("/usr/bin/qemu-aarch64").mark("vdagent_open")
{
}
probe qemu.user.aarch64.vdagent_close = process("/usr/bin/qemu-aarch64").mark("vdagent_close")
{
}
probe qemu.user.aarch64.vdagent_disconnect = process("/usr/bin/qemu-aarch64").mark("vdagent_disconnect")
{
}
probe qemu.user.aarch64.vdagent_send = process("/usr/bin/qemu-aarch64").mark("vdagent_send")
{
  name = $arg1;
}
probe qemu.user.aarch64.vdagent_send_empty_clipboard = process("/usr/bin/qemu-aarch64").mark("vdagent_send_empty_clipboard")
{
}
probe qemu.user.aarch64.vdagent_recv_chunk = process("/usr/bin/qemu-aarch64").mark("vdagent_recv_chunk")
{
  size = $arg1;
}
probe qemu.user.aarch64.vdagent_recv_msg = process("/usr/bin/qemu-aarch64").mark("vdagent_recv_msg")
{
  name = $arg1;
  size = $arg2;
}
probe qemu.user.aarch64.vdagent_peer_cap = process("/usr/bin/qemu-aarch64").mark("vdagent_peer_cap")
{
  name = $arg1;
}
probe qemu.user.aarch64.vdagent_cb_grab_selection = process("/usr/bin/qemu-aarch64").mark("vdagent_cb_grab_selection")
{
  name = $arg1;
}
probe qemu.user.aarch64.vdagent_cb_grab_discard = process("/usr/bin/qemu-aarch64").mark("vdagent_cb_grab_discard")
{
  name = $arg1;
  cur = $arg2;
  recv = $arg3;
}
probe qemu.user.aarch64.vdagent_cb_grab_type = process("/usr/bin/qemu-aarch64").mark("vdagent_cb_grab_type")
{
  name = $arg1;
}
probe qemu.user.aarch64.vdagent_cb_serial_discard = process("/usr/bin/qemu-aarch64").mark("vdagent_cb_serial_discard")
{
  current = $arg1;
  received = $arg2;
}
probe qemu.user.aarch64.dbus_registered_listener = process("/usr/bin/qemu-aarch64").mark("dbus_registered_listener")
{
  bus_name = $arg1;
}
probe qemu.user.aarch64.dbus_listener_vanished = process("/usr/bin/qemu-aarch64").mark("dbus_listener_vanished")
{
  bus_name = $arg1;
}
probe qemu.user.aarch64.dbus_kbd_press = process("/usr/bin/qemu-aarch64").mark("dbus_kbd_press")
{
  keycode = $arg1;
}
probe qemu.user.aarch64.dbus_kbd_release = process("/usr/bin/qemu-aarch64").mark("dbus_kbd_release")
{
  keycode = $arg1;
}
probe qemu.user.aarch64.dbus_mouse_press = process("/usr/bin/qemu-aarch64").mark("dbus_mouse_press")
{
  button = $arg1;
}
probe qemu.user.aarch64.dbus_mouse_release = process("/usr/bin/qemu-aarch64").mark("dbus_mouse_release")
{
  button = $arg1;
}
probe qemu.user.aarch64.dbus_mouse_set_pos = process("/usr/bin/qemu-aarch64").mark("dbus_mouse_set_pos")
{
  x = $arg1;
  y = $arg2;
}
probe qemu.user.aarch64.dbus_mouse_rel_motion = process("/usr/bin/qemu-aarch64").mark("dbus_mouse_rel_motion")
{
  dx = $arg1;
  dy = $arg2;
}
probe qemu.user.aarch64.dbus_update = process("/usr/bin/qemu-aarch64").mark("dbus_update")
{
  x = $arg1;
  y = $arg2;
  w = $arg3;
  h = $arg4;
}
probe qemu.user.aarch64.dbus_clipboard_grab_failed = process("/usr/bin/qemu-aarch64").mark("dbus_clipboard_grab_failed")
{
}
probe qemu.user.aarch64.dbus_clipboard_register = process("/usr/bin/qemu-aarch64").mark("dbus_clipboard_register")
{
  bus_name = $arg1;
}
probe qemu.user.aarch64.dbus_clipboard_unregister = process("/usr/bin/qemu-aarch64").mark("dbus_clipboard_unregister")
{
  bus_name = $arg1;
}
probe qemu.user.aarch64.mpqemu_send_io_error = process("/usr/bin/qemu-aarch64").mark("mpqemu_send_io_error")
{
  cmd = $arg1;
  size = $arg2;
  nfds = $arg3;
}
probe qemu.user.aarch64.mpqemu_recv_io_error = process("/usr/bin/qemu-aarch64").mark("mpqemu_recv_io_error")
{
  cmd = $arg1;
  size = $arg2;
  nfds = $arg3;
}
probe qemu.user.aarch64.vfu_prop = process("/usr/bin/qemu-aarch64").mark("vfu_prop")
{
  prop = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfu_cfg_read = process("/usr/bin/qemu-aarch64").mark("vfu_cfg_read")
{
  offset = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfu_cfg_write = process("/usr/bin/qemu-aarch64").mark("vfu_cfg_write")
{
  offset = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.vfu_dma_register = process("/usr/bin/qemu-aarch64").mark("vfu_dma_register")
{
  gpa = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.vfu_dma_unregister = process("/usr/bin/qemu-aarch64").mark("vfu_dma_unregister")
{
  gpa = $arg1;
}
probe qemu.user.aarch64.vfu_bar_register = process("/usr/bin/qemu-aarch64").mark("vfu_bar_register")
{
  i = $arg1;
  addr = $arg2;
  size = $arg3;
}
probe qemu.user.aarch64.vfu_bar_rw_enter = process("/usr/bin/qemu-aarch64").mark("vfu_bar_rw_enter")
{
  op = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.vfu_bar_rw_exit = process("/usr/bin/qemu-aarch64").mark("vfu_bar_rw_exit")
{
  op = $arg1;
  addr = $arg2;
}
probe qemu.user.aarch64.vfu_interrupt = process("/usr/bin/qemu-aarch64").mark("vfu_interrupt")
{
  pirq = $arg1;
}
probe qemu.user.aarch64.exec_tb = process("/usr/bin/qemu-aarch64").mark("exec_tb")
{
  tb = $arg1;
  pc = $arg2;
}
probe qemu.user.aarch64.exec_tb_nocache = process("/usr/bin/qemu-aarch64").mark("exec_tb_nocache")
{
  tb = $arg1;
  pc = $arg2;
}
probe qemu.user.aarch64.exec_tb_exit = process("/usr/bin/qemu-aarch64").mark("exec_tb_exit")
{
  last_tb = $arg1;
  flags = $arg2;
}
probe qemu.user.aarch64.translate_block = process("/usr/bin/qemu-aarch64").mark("translate_block")
{
  tb = $arg1;
  pc = $arg2;
  tb_code = $arg3;
}
probe qemu.user.aarch64.loader_write_rom = process("/usr/bin/qemu-aarch64").mark("loader_write_rom")
{
  name = $arg1;
  gpa = $arg2;
  size = $arg3;
  isrom = $arg4;
}
probe qemu.user.aarch64.qdev_reset = process("/usr/bin/qemu-aarch64").mark("qdev_reset")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.aarch64.qdev_reset_all = process("/usr/bin/qemu-aarch64").mark("qdev_reset_all")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.aarch64.qdev_reset_tree = process("/usr/bin/qemu-aarch64").mark("qdev_reset_tree")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.aarch64.qbus_reset = process("/usr/bin/qemu-aarch64").mark("qbus_reset")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.aarch64.qbus_reset_all = process("/usr/bin/qemu-aarch64").mark("qbus_reset_all")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.aarch64.qbus_reset_tree = process("/usr/bin/qemu-aarch64").mark("qbus_reset_tree")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.aarch64.qdev_update_parent_bus = process("/usr/bin/qemu-aarch64").mark("qdev_update_parent_bus")
{
  obj = $arg1;
  objtype = $arg2;
  oldp = $arg3;
  oldptype = $arg4;
  newp = $arg5;
  newptype = $arg6;
}
probe qemu.user.aarch64.resettable_reset = process("/usr/bin/qemu-aarch64").mark("resettable_reset")
{
  obj = $arg1;
  cold = $arg2;
}
probe qemu.user.aarch64.resettable_reset_assert_begin = process("/usr/bin/qemu-aarch64").mark("resettable_reset_assert_begin")
{
  obj = $arg1;
  cold = $arg2;
}
probe qemu.user.aarch64.resettable_reset_assert_end = process("/usr/bin/qemu-aarch64").mark("resettable_reset_assert_end")
{
  obj = $arg1;
}
probe qemu.user.aarch64.resettable_reset_release_begin = process("/usr/bin/qemu-aarch64").mark("resettable_reset_release_begin")
{
  obj = $arg1;
  cold = $arg2;
}
probe qemu.user.aarch64.resettable_reset_release_end = process("/usr/bin/qemu-aarch64").mark("resettable_reset_release_end")
{
  obj = $arg1;
}
probe qemu.user.aarch64.resettable_change_parent = process("/usr/bin/qemu-aarch64").mark("resettable_change_parent")
{
  obj = $arg1;
  o = $arg2;
  oc = $arg3;
  n = $arg4;
  nc = $arg5;
}
probe qemu.user.aarch64.resettable_phase_enter_begin = process("/usr/bin/qemu-aarch64").mark("resettable_phase_enter_begin")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
  type = $arg4;
}
probe qemu.user.aarch64.resettable_phase_enter_exec = process("/usr/bin/qemu-aarch64").mark("resettable_phase_enter_exec")
{
  obj = $arg1;
  objtype = $arg2;
  type = $arg3;
  has_method = $arg4;
}
probe qemu.user.aarch64.resettable_phase_enter_end = process("/usr/bin/qemu-aarch64").mark("resettable_phase_enter_end")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
}
probe qemu.user.aarch64.resettable_phase_hold_begin = process("/usr/bin/qemu-aarch64").mark("resettable_phase_hold_begin")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
  type = $arg4;
}
probe qemu.user.aarch64.resettable_phase_hold_exec = process("/usr/bin/qemu-aarch64").mark("resettable_phase_hold_exec")
{
  obj = $arg1;
  objtype = $arg2;
  has_method = $arg3;
}
probe qemu.user.aarch64.resettable_phase_hold_end = process("/usr/bin/qemu-aarch64").mark("resettable_phase_hold_end")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
}
probe qemu.user.aarch64.resettable_phase_exit_begin = process("/usr/bin/qemu-aarch64").mark("resettable_phase_exit_begin")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
  type = $arg4;
}
probe qemu.user.aarch64.resettable_phase_exit_exec = process("/usr/bin/qemu-aarch64").mark("resettable_phase_exit_exec")
{
  obj = $arg1;
  objtype = $arg2;
  has_method = $arg3;
}
probe qemu.user.aarch64.resettable_phase_exit_end = process("/usr/bin/qemu-aarch64").mark("resettable_phase_exit_end")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
}
probe qemu.user.aarch64.resettable_transitional_function = process("/usr/bin/qemu-aarch64").mark("resettable_transitional_function")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.aarch64.clock_set_source = process("/usr/bin/qemu-aarch64").mark("clock_set_source")
{
  clk = $arg1;
  src = $arg2;
}
probe qemu.user.aarch64.clock_disconnect = process("/usr/bin/qemu-aarch64").mark("clock_disconnect")
{
  clk = $arg1;
}
probe qemu.user.aarch64.clock_set = process("/usr/bin/qemu-aarch64").mark("clock_set")
{
  clk = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.clock_propagate = process("/usr/bin/qemu-aarch64").mark("clock_propagate")
{
  clk = $arg1;
}
probe qemu.user.aarch64.clock_update = process("/usr/bin/qemu-aarch64").mark("clock_update")
{
  clk = $arg1;
  src = $arg2;
  hz = $arg3;
  cb = $arg4;
}
probe qemu.user.aarch64.clock_set_mul_div = process("/usr/bin/qemu-aarch64").mark("clock_set_mul_div")
{
  clk = $arg1;
  oldmul = $arg2;
  mul = $arg3;
  olddiv = $arg4;
  div = $arg5;
}
probe qemu.user.aarch64.arm_gt_recalc = process("/usr/bin/qemu-aarch64").mark("arm_gt_recalc")
{
  timer = $arg1;
  irqstate = $arg2;
  nexttick = $arg3;
}
probe qemu.user.aarch64.arm_gt_recalc_disabled = process("/usr/bin/qemu-aarch64").mark("arm_gt_recalc_disabled")
{
  timer = $arg1;
}
probe qemu.user.aarch64.arm_gt_cval_write = process("/usr/bin/qemu-aarch64").mark("arm_gt_cval_write")
{
  timer = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.arm_gt_tval_write = process("/usr/bin/qemu-aarch64").mark("arm_gt_tval_write")
{
  timer = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.arm_gt_ctl_write = process("/usr/bin/qemu-aarch64").mark("arm_gt_ctl_write")
{
  timer = $arg1;
  value = $arg2;
}
probe qemu.user.aarch64.arm_gt_imask_toggle = process("/usr/bin/qemu-aarch64").mark("arm_gt_imask_toggle")
{
  timer = $arg1;
  irqstate = $arg2;
}
probe qemu.user.aarch64.arm_gt_cntvoff_write = process("/usr/bin/qemu-aarch64").mark("arm_gt_cntvoff_write")
{
  value = $arg1;
}
probe qemu.user.aarch64.kvm_arm_fixup_msi_route = process("/usr/bin/qemu-aarch64").mark("kvm_arm_fixup_msi_route")
{
  iova = $arg1;
  gpa = $arg2;
}
probe qemu.user.aarch64.hvf_unhandled_sysreg_read = process("/usr/bin/qemu-aarch64").mark("hvf_unhandled_sysreg_read")
{
  pc = $arg1;
  reg = $arg2;
  op0 = $arg3;
  op1 = $arg4;
  crn = $arg5;
  crm = $arg6;
  op2 = $arg7;
}
probe qemu.user.aarch64.hvf_unhandled_sysreg_write = process("/usr/bin/qemu-aarch64").mark("hvf_unhandled_sysreg_write")
{
  pc = $arg1;
  reg = $arg2;
  op0 = $arg3;
  op1 = $arg4;
  crn = $arg5;
  crm = $arg6;
  op2 = $arg7;
}
probe qemu.user.aarch64.hvf_inject_fiq = process("/usr/bin/qemu-aarch64").mark("hvf_inject_fiq")
{
}
probe qemu.user.aarch64.hvf_inject_irq = process("/usr/bin/qemu-aarch64").mark("hvf_inject_irq")
{
}
probe qemu.user.aarch64.hvf_data_abort = process("/usr/bin/qemu-aarch64").mark("hvf_data_abort")
{
  pc = $arg1;
  va = $arg2;
  pa = $arg3;
  isv = $arg4;
  iswrite = $arg5;
  s1ptw = $arg6;
  len = $arg7;
  srt = $arg8;
}
probe qemu.user.aarch64.hvf_sysreg_read = process("/usr/bin/qemu-aarch64").mark("hvf_sysreg_read")
{
  reg = $arg1;
  op0 = $arg2;
  op1 = $arg3;
  crn = $arg4;
  crm = $arg5;
  op2 = $arg6;
  val = $arg7;
}
probe qemu.user.aarch64.hvf_sysreg_write = process("/usr/bin/qemu-aarch64").mark("hvf_sysreg_write")
{
  reg = $arg1;
  op0 = $arg2;
  op1 = $arg3;
  crn = $arg4;
  crm = $arg5;
  op2 = $arg6;
  val = $arg7;
}
probe qemu.user.aarch64.hvf_unknown_hvc = process("/usr/bin/qemu-aarch64").mark("hvf_unknown_hvc")
{
  x0 = $arg1;
}
probe qemu.user.aarch64.hvf_unknown_smc = process("/usr/bin/qemu-aarch64").mark("hvf_unknown_smc")
{
  x0 = $arg1;
}
probe qemu.user.aarch64.hvf_exit = process("/usr/bin/qemu-aarch64").mark("hvf_exit")
{
  syndrome = $arg1;
  ec = $arg2;
  pc = $arg3;
}
probe qemu.user.aarch64.hvf_psci_call = process("/usr/bin/qemu-aarch64").mark("hvf_psci_call")
{
  x0 = $arg1;
  x1 = $arg2;
  x2 = $arg3;
  x3 = $arg4;
  cpuid = $arg5;
}
probe qemu.user.aarch64.kvm_sev_init = process("/usr/bin/qemu-aarch64").mark("kvm_sev_init")
{
}
probe qemu.user.aarch64.kvm_memcrypt_register_region = process("/usr/bin/qemu-aarch64").mark("kvm_memcrypt_register_region")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.kvm_memcrypt_unregister_region = process("/usr/bin/qemu-aarch64").mark("kvm_memcrypt_unregister_region")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.kvm_sev_change_state = process("/usr/bin/qemu-aarch64").mark("kvm_sev_change_state")
{
  old = $arg1;
  new = $arg2;
}
probe qemu.user.aarch64.kvm_sev_launch_start = process("/usr/bin/qemu-aarch64").mark("kvm_sev_launch_start")
{
  policy = $arg1;
  session = $arg2;
  pdh = $arg3;
}
probe qemu.user.aarch64.kvm_sev_launch_update_data = process("/usr/bin/qemu-aarch64").mark("kvm_sev_launch_update_data")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.kvm_sev_launch_measurement = process("/usr/bin/qemu-aarch64").mark("kvm_sev_launch_measurement")
{
  value = $arg1;
}
probe qemu.user.aarch64.kvm_sev_launch_finish = process("/usr/bin/qemu-aarch64").mark("kvm_sev_launch_finish")
{
}
probe qemu.user.aarch64.kvm_sev_launch_secret = process("/usr/bin/qemu-aarch64").mark("kvm_sev_launch_secret")
{
  hpa = $arg1;
  hva = $arg2;
  secret = $arg3;
  len = $arg4;
}
probe qemu.user.aarch64.kvm_sev_attestation_report = process("/usr/bin/qemu-aarch64").mark("kvm_sev_attestation_report")
{
  mnonce = $arg1;
  data = $arg2;
}
probe qemu.user.aarch64.kvm_x86_fixup_msi_error = process("/usr/bin/qemu-aarch64").mark("kvm_x86_fixup_msi_error")
{
  gsi = $arg1;
}
probe qemu.user.aarch64.kvm_x86_add_msi_route = process("/usr/bin/qemu-aarch64").mark("kvm_x86_add_msi_route")
{
  virq = $arg1;
}
probe qemu.user.aarch64.kvm_x86_remove_msi_route = process("/usr/bin/qemu-aarch64").mark("kvm_x86_remove_msi_route")
{
  virq = $arg1;
}
probe qemu.user.aarch64.kvm_x86_update_msi_routes = process("/usr/bin/qemu-aarch64").mark("kvm_x86_update_msi_routes")
{
  num = $arg1;
}
probe qemu.user.aarch64.mips_translate_c0 = process("/usr/bin/qemu-aarch64").mark("mips_translate_c0")
{
  instr = $arg1;
  rn = $arg2;
  reg = $arg3;
  sel = $arg4;
}
probe qemu.user.aarch64.mips_translate_tr = process("/usr/bin/qemu-aarch64").mark("mips_translate_tr")
{
  instr = $arg1;
  rt = $arg2;
  u = $arg3;
  sel = $arg4;
  h = $arg5;
}
probe qemu.user.aarch64.nios2_mmu_translate_miss = process("/usr/bin/qemu-aarch64").mark("nios2_mmu_translate_miss")
{
  vaddr = $arg1;
  pid = $arg2;
  index = $arg3;
  tag = $arg4;
}
probe qemu.user.aarch64.nios2_mmu_translate_hit = process("/usr/bin/qemu-aarch64").mark("nios2_mmu_translate_hit")
{
  vaddr = $arg1;
  pid = $arg2;
  index = $arg3;
  paddr = $arg4;
  prot = $arg5;
}
probe qemu.user.aarch64.nios2_mmu_flush_pid_miss = process("/usr/bin/qemu-aarch64").mark("nios2_mmu_flush_pid_miss")
{
  pid = $arg1;
  index = $arg2;
  vaddr = $arg3;
}
probe qemu.user.aarch64.nios2_mmu_flush_pid_hit = process("/usr/bin/qemu-aarch64").mark("nios2_mmu_flush_pid_hit")
{
  pid = $arg1;
  index = $arg2;
  vaddr = $arg3;
}
probe qemu.user.aarch64.nios2_mmu_write_tlbacc = process("/usr/bin/qemu-aarch64").mark("nios2_mmu_write_tlbacc")
{
  ig = $arg1;
  c = $arg2;
  r = $arg3;
  w = $arg4;
  x = $arg5;
  g = $arg6;
  pfn = $arg7;
}
probe qemu.user.aarch64.nios2_mmu_write_tlbmisc = process("/usr/bin/qemu-aarch64").mark("nios2_mmu_write_tlbmisc")
{
  way = $arg1;
  r = $arg2;
  w = $arg3;
  t = $arg4;
  b = $arg5;
  p = $arg6;
  d = $arg7;
  pid = $arg8;
}
probe qemu.user.aarch64.nios2_mmu_write_pteaddr = process("/usr/bin/qemu-aarch64").mark("nios2_mmu_write_pteaddr")
{
  ptb = $arg1;
  vpn = $arg2;
}
probe qemu.user.aarch64.kvm_failed_spr_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_spr_set")
{
  spr = $arg1;
  msg = $arg2;
}
probe qemu.user.aarch64.kvm_failed_spr_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_spr_get")
{
  spr = $arg1;
  msg = $arg2;
}
probe qemu.user.aarch64.kvm_failed_fpscr_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_fpscr_set")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_fp_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_fp_set")
{
  fpname = $arg1;
  fpnum = $arg2;
  msg = $arg3;
}
probe qemu.user.aarch64.kvm_failed_vscr_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_vscr_set")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_vr_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_vr_set")
{
  vr = $arg1;
  msg = $arg2;
}
probe qemu.user.aarch64.kvm_failed_fpscr_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_fpscr_get")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_fp_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_fp_get")
{
  fpname = $arg1;
  fpnum = $arg2;
  msg = $arg3;
}
probe qemu.user.aarch64.kvm_failed_vscr_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_vscr_get")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_vr_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_vr_get")
{
  vr = $arg1;
  msg = $arg2;
}
probe qemu.user.aarch64.kvm_failed_vpa_addr_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_vpa_addr_get")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_slb_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_slb_get")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_dtl_get = process("/usr/bin/qemu-aarch64").mark("kvm_failed_dtl_get")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_vpa_addr_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_vpa_addr_set")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_slb_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_slb_set")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_dtl_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_dtl_set")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_null_vpa_addr_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_null_vpa_addr_set")
{
  msg = $arg1;
}
probe qemu.user.aarch64.kvm_failed_put_vpa = process("/usr/bin/qemu-aarch64").mark("kvm_failed_put_vpa")
{
}
probe qemu.user.aarch64.kvm_failed_get_vpa = process("/usr/bin/qemu-aarch64").mark("kvm_failed_get_vpa")
{
}
probe qemu.user.aarch64.kvm_handle_dcr_write = process("/usr/bin/qemu-aarch64").mark("kvm_handle_dcr_write")
{
}
probe qemu.user.aarch64.kvm_handle_dcr_read = process("/usr/bin/qemu-aarch64").mark("kvm_handle_dcr_read")
{
}
probe qemu.user.aarch64.kvm_handle_halt = process("/usr/bin/qemu-aarch64").mark("kvm_handle_halt")
{
}
probe qemu.user.aarch64.kvm_handle_papr_hcall = process("/usr/bin/qemu-aarch64").mark("kvm_handle_papr_hcall")
{
  hcall = $arg1;
}
probe qemu.user.aarch64.kvm_handle_epr = process("/usr/bin/qemu-aarch64").mark("kvm_handle_epr")
{
}
probe qemu.user.aarch64.kvm_handle_watchdog_expiry = process("/usr/bin/qemu-aarch64").mark("kvm_handle_watchdog_expiry")
{
}
probe qemu.user.aarch64.kvm_handle_debug_exception = process("/usr/bin/qemu-aarch64").mark("kvm_handle_debug_exception")
{
}
probe qemu.user.aarch64.kvm_handle_nmi_exception = process("/usr/bin/qemu-aarch64").mark("kvm_handle_nmi_exception")
{
}
probe qemu.user.aarch64.ppc_excp_rfi = process("/usr/bin/qemu-aarch64").mark("ppc_excp_rfi")
{
  nip = $arg1;
  msr = $arg2;
}
probe qemu.user.aarch64.ppc_excp_dsi = process("/usr/bin/qemu-aarch64").mark("ppc_excp_dsi")
{
  dsisr = $arg1;
  dar = $arg2;
}
probe qemu.user.aarch64.ppc_excp_isi = process("/usr/bin/qemu-aarch64").mark("ppc_excp_isi")
{
  msr = $arg1;
  nip = $arg2;
}
probe qemu.user.aarch64.ppc_excp_fp_ignore = process("/usr/bin/qemu-aarch64").mark("ppc_excp_fp_ignore")
{
}
probe qemu.user.aarch64.ppc_excp_inval = process("/usr/bin/qemu-aarch64").mark("ppc_excp_inval")
{
  nip = $arg1;
}
probe qemu.user.aarch64.ppc_excp_print = process("/usr/bin/qemu-aarch64").mark("ppc_excp_print")
{
  excp = $arg1;
}
probe qemu.user.aarch64.riscv_trap = process("/usr/bin/qemu-aarch64").mark("riscv_trap")
{
  hartid = $arg1;
  async = $arg2;
  cause = $arg3;
  epc = $arg4;
  tval = $arg5;
  desc = $arg6;
}
probe qemu.user.aarch64.pmpcfg_csr_read = process("/usr/bin/qemu-aarch64").mark("pmpcfg_csr_read")
{
  mhartid = $arg1;
  reg_index = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.pmpcfg_csr_write = process("/usr/bin/qemu-aarch64").mark("pmpcfg_csr_write")
{
  mhartid = $arg1;
  reg_index = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.pmpaddr_csr_read = process("/usr/bin/qemu-aarch64").mark("pmpaddr_csr_read")
{
  mhartid = $arg1;
  addr_index = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.pmpaddr_csr_write = process("/usr/bin/qemu-aarch64").mark("pmpaddr_csr_write")
{
  mhartid = $arg1;
  addr_index = $arg2;
  val = $arg3;
}
probe qemu.user.aarch64.mseccfg_csr_read = process("/usr/bin/qemu-aarch64").mark("mseccfg_csr_read")
{
  mhartid = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.mseccfg_csr_write = process("/usr/bin/qemu-aarch64").mark("mseccfg_csr_write")
{
  mhartid = $arg1;
  val = $arg2;
}
probe qemu.user.aarch64.get_skeys_nonzero = process("/usr/bin/qemu-aarch64").mark("get_skeys_nonzero")
{
  rc = $arg1;
}
probe qemu.user.aarch64.set_skeys_nonzero = process("/usr/bin/qemu-aarch64").mark("set_skeys_nonzero")
{
  rc = $arg1;
}
probe qemu.user.aarch64.ioinst = process("/usr/bin/qemu-aarch64").mark("ioinst")
{
  insn = $arg1;
}
probe qemu.user.aarch64.ioinst_sch_id = process("/usr/bin/qemu-aarch64").mark("ioinst_sch_id")
{
  insn = $arg1;
  cssid = $arg2;
  ssid = $arg3;
  schid = $arg4;
}
probe qemu.user.aarch64.ioinst_chp_id = process("/usr/bin/qemu-aarch64").mark("ioinst_chp_id")
{
  insn = $arg1;
  cssid = $arg2;
  chpid = $arg3;
}
probe qemu.user.aarch64.ioinst_chsc_cmd = process("/usr/bin/qemu-aarch64").mark("ioinst_chsc_cmd")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.user.aarch64.cpu_set_state = process("/usr/bin/qemu-aarch64").mark("cpu_set_state")
{
  cpu_index = $arg1;
  state = $arg2;
}
probe qemu.user.aarch64.cpu_halt = process("/usr/bin/qemu-aarch64").mark("cpu_halt")
{
  cpu_index = $arg1;
}
probe qemu.user.aarch64.cpu_unhalt = process("/usr/bin/qemu-aarch64").mark("cpu_unhalt")
{
  cpu_index = $arg1;
}
probe qemu.user.aarch64.sigp_finished = process("/usr/bin/qemu-aarch64").mark("sigp_finished")
{
  order = $arg1;
  cpu_index = $arg2;
  dst_index = $arg3;
  cc = $arg4;
}
probe qemu.user.aarch64.kvm_enable_cmma = process("/usr/bin/qemu-aarch64").mark("kvm_enable_cmma")
{
  rc = $arg1;
}
probe qemu.user.aarch64.kvm_clear_cmma = process("/usr/bin/qemu-aarch64").mark("kvm_clear_cmma")
{
  rc = $arg1;
}
probe qemu.user.aarch64.kvm_failed_cpu_state_set = process("/usr/bin/qemu-aarch64").mark("kvm_failed_cpu_state_set")
{
  cpu_index = $arg1;
  state = $arg2;
  msg = $arg3;
}
probe qemu.user.aarch64.kvm_assign_subch_ioeventfd = process("/usr/bin/qemu-aarch64").mark("kvm_assign_subch_ioeventfd")
{
  fd = $arg1;
  addr = $arg2;
  assign = $arg3;
  datamatch = $arg4;
}
probe qemu.user.aarch64.mmu_helper_dfault = process("/usr/bin/qemu-aarch64").mark("mmu_helper_dfault")
{
  address = $arg1;
  context = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
}
probe qemu.user.aarch64.mmu_helper_dprot = process("/usr/bin/qemu-aarch64").mark("mmu_helper_dprot")
{
  address = $arg1;
  context = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
}
probe qemu.user.aarch64.mmu_helper_dmiss = process("/usr/bin/qemu-aarch64").mark("mmu_helper_dmiss")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.user.aarch64.mmu_helper_tfault = process("/usr/bin/qemu-aarch64").mark("mmu_helper_tfault")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.user.aarch64.mmu_helper_tmiss = process("/usr/bin/qemu-aarch64").mark("mmu_helper_tmiss")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.user.aarch64.mmu_helper_get_phys_addr_code = process("/usr/bin/qemu-aarch64").mark("mmu_helper_get_phys_addr_code")
{
  tl = $arg1;
  mmu_idx = $arg2;
  prim_context = $arg3;
  sec_context = $arg4;
  address = $arg5;
}
probe qemu.user.aarch64.mmu_helper_get_phys_addr_data = process("/usr/bin/qemu-aarch64").mark("mmu_helper_get_phys_addr_data")
{
  tl = $arg1;
  mmu_idx = $arg2;
  prim_context = $arg3;
  sec_context = $arg4;
  address = $arg5;
}
probe qemu.user.aarch64.mmu_helper_mmu_fault = process("/usr/bin/qemu-aarch64").mark("mmu_helper_mmu_fault")
{
  address = $arg1;
  paddr = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
  prim_context = $arg5;
  sec_context = $arg6;
}
probe qemu.user.aarch64.sun4m_cpu_interrupt = process("/usr/bin/qemu-aarch64").mark("sun4m_cpu_interrupt")
{
  level = $arg1;
}
probe qemu.user.aarch64.sun4m_cpu_reset_interrupt = process("/usr/bin/qemu-aarch64").mark("sun4m_cpu_reset_interrupt")
{
  level = $arg1;
}
probe qemu.user.aarch64.int_helper_set_softint = process("/usr/bin/qemu-aarch64").mark("int_helper_set_softint")
{
  softint = $arg1;
}
probe qemu.user.aarch64.int_helper_clear_softint = process("/usr/bin/qemu-aarch64").mark("int_helper_clear_softint")
{
  softint = $arg1;
}
probe qemu.user.aarch64.int_helper_write_softint = process("/usr/bin/qemu-aarch64").mark("int_helper_write_softint")
{
  softint = $arg1;
}
probe qemu.user.aarch64.sparc64_cpu_check_irqs_reset_irq = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_check_irqs_reset_irq")
{
  intno = $arg1;
}
probe qemu.user.aarch64.sparc64_cpu_check_irqs_noset_irq = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_check_irqs_noset_irq")
{
  tl = $arg1;
  tt = $arg2;
  intno = $arg3;
}
probe qemu.user.aarch64.sparc64_cpu_check_irqs_set_irq = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_check_irqs_set_irq")
{
  i = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.aarch64.sparc64_cpu_check_irqs_disabled = process("/usr/bin/qemu-aarch64").mark("sparc64_cpu_check_irqs_disabled")
{
  pil = $arg1;
  pil_in = $arg2;
  softint = $arg3;
  intno = $arg4;
}
probe qemu.user.aarch64.win_helper_gregset_error = process("/usr/bin/qemu-aarch64").mark("win_helper_gregset_error")
{
  pstate = $arg1;
}
probe qemu.user.aarch64.win_helper_switch_pstate = process("/usr/bin/qemu-aarch64").mark("win_helper_switch_pstate")
{
  pstate_regs = $arg1;
  new_pstate_regs = $arg2;
}
probe qemu.user.aarch64.win_helper_no_switch_pstate = process("/usr/bin/qemu-aarch64").mark("win_helper_no_switch_pstate")
{
  new_pstate_regs = $arg1;
}
probe qemu.user.aarch64.win_helper_wrpil = process("/usr/bin/qemu-aarch64").mark("win_helper_wrpil")
{
  psrpil = $arg1;
  new_pil = $arg2;
}
probe qemu.user.aarch64.win_helper_done = process("/usr/bin/qemu-aarch64").mark("win_helper_done")
{
  tl = $arg1;
}
probe qemu.user.aarch64.win_helper_retry = process("/usr/bin/qemu-aarch64").mark("win_helper_retry")
{
  tl = $arg1;
}
probe qemu.user.aarch64.qmp_enter_query_pr_managers = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_pr_managers")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_pr_managers = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_pr_managers")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_eject = process("/usr/bin/qemu-aarch64").mark("qmp_enter_eject")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_eject = process("/usr/bin/qemu-aarch64").mark("qmp_exit_eject")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_open_tray = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_open_tray")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_open_tray = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_open_tray")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_close_tray = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_close_tray")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_close_tray = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_close_tray")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_remove_medium = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_remove_medium")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_remove_medium = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_remove_medium")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_insert_medium = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_insert_medium")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_insert_medium = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_insert_medium")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_change_medium = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_change_medium")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_change_medium = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_change_medium")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_set_io_throttle = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_set_io_throttle")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_set_io_throttle = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_set_io_throttle")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_latency_histogram_set = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_latency_histogram_set")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_latency_histogram_set = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_latency_histogram_set")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_block = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_block")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_block = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_block")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_blockstats = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_blockstats")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_blockstats = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_blockstats")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_block_jobs = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_block_jobs")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_block_jobs = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_block_jobs")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_resize = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_resize")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_resize = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_resize")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_snapshot_sync = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_snapshot_sync")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_snapshot_sync = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_snapshot_sync")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_snapshot = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_snapshot")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_snapshot = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_snapshot")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_change_backing_file = process("/usr/bin/qemu-aarch64").mark("qmp_enter_change_backing_file")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_change_backing_file = process("/usr/bin/qemu-aarch64").mark("qmp_exit_change_backing_file")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_commit = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_commit")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_commit = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_commit")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_drive_backup = process("/usr/bin/qemu-aarch64").mark("qmp_enter_drive_backup")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_drive_backup = process("/usr/bin/qemu-aarch64").mark("qmp_exit_drive_backup")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_backup = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_backup")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_backup = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_backup")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_named_block_nodes = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_named_block_nodes")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_named_block_nodes = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_named_block_nodes")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_debug_query_block_graph = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_debug_query_block_graph")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_debug_query_block_graph = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_debug_query_block_graph")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_drive_mirror = process("/usr/bin/qemu-aarch64").mark("qmp_enter_drive_mirror")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_drive_mirror = process("/usr/bin/qemu-aarch64").mark("qmp_exit_drive_mirror")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_dirty_bitmap_add = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_dirty_bitmap_add")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_dirty_bitmap_add = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_dirty_bitmap_add")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_dirty_bitmap_remove = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_dirty_bitmap_remove")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_dirty_bitmap_remove = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_dirty_bitmap_remove")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_dirty_bitmap_clear = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_dirty_bitmap_clear")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_dirty_bitmap_clear = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_dirty_bitmap_clear")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_dirty_bitmap_enable = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_dirty_bitmap_enable")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_dirty_bitmap_enable = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_dirty_bitmap_enable")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_dirty_bitmap_disable = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_dirty_bitmap_disable")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_dirty_bitmap_disable = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_dirty_bitmap_disable")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_dirty_bitmap_merge = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_dirty_bitmap_merge")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_dirty_bitmap_merge = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_dirty_bitmap_merge")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_debug_block_dirty_bitmap_sha256 = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_debug_block_dirty_bitmap_sha256")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_debug_block_dirty_bitmap_sha256 = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_debug_block_dirty_bitmap_sha256")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_mirror = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_mirror")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_mirror = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_mirror")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_stream = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_stream")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_stream = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_stream")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_job_set_speed = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_job_set_speed")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_job_set_speed = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_job_set_speed")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_job_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_job_cancel")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_job_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_job_cancel")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_job_pause = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_job_pause")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_job_pause = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_job_pause")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_job_resume = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_job_resume")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_job_resume = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_job_resume")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_job_complete = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_job_complete")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_job_complete = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_job_complete")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_job_dismiss = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_job_dismiss")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_job_dismiss = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_job_dismiss")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_job_finalize = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_job_finalize")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_job_finalize = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_job_finalize")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_add = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_add")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_add = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_add")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_reopen = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_reopen")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_reopen = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_reopen")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_del = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_del")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_del = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_del")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_create = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_create")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_create = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_create")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_blockdev_amend = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_blockdev_amend")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_blockdev_amend = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_blockdev_amend")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_set_write_threshold = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_set_write_threshold")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_set_write_threshold = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_set_write_threshold")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_blockdev_change = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_blockdev_change")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_blockdev_change = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_blockdev_change")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_blockdev_set_iothread = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_blockdev_set_iothread")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_blockdev_set_iothread = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_blockdev_set_iothread")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_snapshot_internal_sync = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_snapshot_internal_sync")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_snapshot_internal_sync = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_snapshot_internal_sync")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_blockdev_snapshot_delete_internal_sync = process("/usr/bin/qemu-aarch64").mark("qmp_enter_blockdev_snapshot_delete_internal_sync")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_blockdev_snapshot_delete_internal_sync = process("/usr/bin/qemu-aarch64").mark("qmp_exit_blockdev_snapshot_delete_internal_sync")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_nbd_server_start = process("/usr/bin/qemu-aarch64").mark("qmp_enter_nbd_server_start")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_nbd_server_start = process("/usr/bin/qemu-aarch64").mark("qmp_exit_nbd_server_start")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_nbd_server_add = process("/usr/bin/qemu-aarch64").mark("qmp_enter_nbd_server_add")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_nbd_server_add = process("/usr/bin/qemu-aarch64").mark("qmp_exit_nbd_server_add")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_nbd_server_remove = process("/usr/bin/qemu-aarch64").mark("qmp_enter_nbd_server_remove")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_nbd_server_remove = process("/usr/bin/qemu-aarch64").mark("qmp_exit_nbd_server_remove")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_nbd_server_stop = process("/usr/bin/qemu-aarch64").mark("qmp_enter_nbd_server_stop")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_nbd_server_stop = process("/usr/bin/qemu-aarch64").mark("qmp_exit_nbd_server_stop")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_export_add = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_export_add")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_export_add = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_export_add")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_block_export_del = process("/usr/bin/qemu-aarch64").mark("qmp_enter_block_export_del")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_block_export_del = process("/usr/bin/qemu-aarch64").mark("qmp_exit_block_export_del")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_block_exports = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_block_exports")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_block_exports = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_block_exports")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_chardev = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_chardev")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_chardev = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_chardev")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_chardev_backends = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_chardev_backends")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_chardev_backends = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_chardev_backends")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_ringbuf_write = process("/usr/bin/qemu-aarch64").mark("qmp_enter_ringbuf_write")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_ringbuf_write = process("/usr/bin/qemu-aarch64").mark("qmp_exit_ringbuf_write")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_ringbuf_read = process("/usr/bin/qemu-aarch64").mark("qmp_enter_ringbuf_read")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_ringbuf_read = process("/usr/bin/qemu-aarch64").mark("qmp_exit_ringbuf_read")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_chardev_add = process("/usr/bin/qemu-aarch64").mark("qmp_enter_chardev_add")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_chardev_add = process("/usr/bin/qemu-aarch64").mark("qmp_exit_chardev_add")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_chardev_change = process("/usr/bin/qemu-aarch64").mark("qmp_enter_chardev_change")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_chardev_change = process("/usr/bin/qemu-aarch64").mark("qmp_exit_chardev_change")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_chardev_remove = process("/usr/bin/qemu-aarch64").mark("qmp_enter_chardev_remove")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_chardev_remove = process("/usr/bin/qemu-aarch64").mark("qmp_exit_chardev_remove")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_chardev_send_break = process("/usr/bin/qemu-aarch64").mark("qmp_enter_chardev_send_break")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_chardev_send_break = process("/usr/bin/qemu-aarch64").mark("qmp_exit_chardev_send_break")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_qmp_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_enter_qmp_capabilities")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_qmp_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_exit_qmp_capabilities")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_version = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_version")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_version = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_version")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_commands = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_commands")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_commands = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_commands")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_quit = process("/usr/bin/qemu-aarch64").mark("qmp_enter_quit")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_quit = process("/usr/bin/qemu-aarch64").mark("qmp_exit_quit")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_dump_guest_memory = process("/usr/bin/qemu-aarch64").mark("qmp_enter_dump_guest_memory")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_dump_guest_memory = process("/usr/bin/qemu-aarch64").mark("qmp_exit_dump_guest_memory")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_dump = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_dump")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_dump = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_dump")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_dump_guest_memory_capability = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_dump_guest_memory_capability")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_dump_guest_memory_capability = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_dump_guest_memory_capability")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_qmp_schema = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_qmp_schema")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_qmp_schema = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_qmp_schema")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_job_pause = process("/usr/bin/qemu-aarch64").mark("qmp_enter_job_pause")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_job_pause = process("/usr/bin/qemu-aarch64").mark("qmp_exit_job_pause")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_job_resume = process("/usr/bin/qemu-aarch64").mark("qmp_enter_job_resume")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_job_resume = process("/usr/bin/qemu-aarch64").mark("qmp_exit_job_resume")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_job_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_enter_job_cancel")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_job_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_exit_job_cancel")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_job_complete = process("/usr/bin/qemu-aarch64").mark("qmp_enter_job_complete")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_job_complete = process("/usr/bin/qemu-aarch64").mark("qmp_exit_job_complete")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_job_dismiss = process("/usr/bin/qemu-aarch64").mark("qmp_enter_job_dismiss")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_job_dismiss = process("/usr/bin/qemu-aarch64").mark("qmp_exit_job_dismiss")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_job_finalize = process("/usr/bin/qemu-aarch64").mark("qmp_enter_job_finalize")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_job_finalize = process("/usr/bin/qemu-aarch64").mark("qmp_exit_job_finalize")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_jobs = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_jobs")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_jobs = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_jobs")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_cpus_fast = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_cpus_fast")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_cpus_fast = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_cpus_fast")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_machines = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_machines")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_machines = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_machines")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_current_machine = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_current_machine")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_current_machine = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_current_machine")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_target = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_target")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_target = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_target")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_uuid = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_uuid")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_uuid = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_uuid")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_vm_generation_id = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_vm_generation_id")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_vm_generation_id = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_vm_generation_id")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_system_reset = process("/usr/bin/qemu-aarch64").mark("qmp_enter_system_reset")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_system_reset = process("/usr/bin/qemu-aarch64").mark("qmp_exit_system_reset")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_system_powerdown = process("/usr/bin/qemu-aarch64").mark("qmp_enter_system_powerdown")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_system_powerdown = process("/usr/bin/qemu-aarch64").mark("qmp_exit_system_powerdown")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_system_wakeup = process("/usr/bin/qemu-aarch64").mark("qmp_enter_system_wakeup")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_system_wakeup = process("/usr/bin/qemu-aarch64").mark("qmp_exit_system_wakeup")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_inject_nmi = process("/usr/bin/qemu-aarch64").mark("qmp_enter_inject_nmi")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_inject_nmi = process("/usr/bin/qemu-aarch64").mark("qmp_exit_inject_nmi")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_kvm = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_kvm")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_kvm = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_kvm")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_memsave = process("/usr/bin/qemu-aarch64").mark("qmp_enter_memsave")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_memsave = process("/usr/bin/qemu-aarch64").mark("qmp_exit_memsave")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_pmemsave = process("/usr/bin/qemu-aarch64").mark("qmp_enter_pmemsave")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_pmemsave = process("/usr/bin/qemu-aarch64").mark("qmp_exit_pmemsave")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_memdev = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_memdev")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_memdev = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_memdev")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_hotpluggable_cpus = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_hotpluggable_cpus")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_hotpluggable_cpus = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_hotpluggable_cpus")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_set_numa_node = process("/usr/bin/qemu-aarch64").mark("qmp_enter_set_numa_node")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_set_numa_node = process("/usr/bin/qemu-aarch64").mark("qmp_exit_set_numa_node")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_balloon = process("/usr/bin/qemu-aarch64").mark("qmp_enter_balloon")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_balloon = process("/usr/bin/qemu-aarch64").mark("qmp_exit_balloon")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_balloon = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_balloon")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_balloon = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_balloon")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_memory_size_summary = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_memory_size_summary")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_memory_size_summary = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_memory_size_summary")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_memory_devices = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_memory_devices")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_memory_devices = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_memory_devices")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_irq = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_irq")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_irq = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_irq")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_jit = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_jit")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_jit = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_jit")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_numa = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_numa")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_numa = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_numa")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_opcount = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_opcount")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_opcount = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_opcount")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_profile = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_profile")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_profile = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_profile")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_ramblock = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_ramblock")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_ramblock = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_ramblock")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_rdma = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_rdma")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_rdma = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_rdma")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_roms = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_roms")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_roms = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_roms")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_usb = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_usb")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_usb = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_usb")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_dumpdtb = process("/usr/bin/qemu-aarch64").mark("qmp_enter_dumpdtb")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_dumpdtb = process("/usr/bin/qemu-aarch64").mark("qmp_exit_dumpdtb")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_migrate = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_migrate")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_migrate = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_migrate")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_set_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_set_capabilities")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_set_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_set_capabilities")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_migrate_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_migrate_capabilities")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_migrate_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_migrate_capabilities")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_set_parameters = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_set_parameters")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_set_parameters = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_set_parameters")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_migrate_parameters = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_migrate_parameters")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_migrate_parameters = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_migrate_parameters")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_client_migrate_info = process("/usr/bin/qemu-aarch64").mark("qmp_enter_client_migrate_info")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_client_migrate_info = process("/usr/bin/qemu-aarch64").mark("qmp_exit_client_migrate_info")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_start_postcopy = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_start_postcopy")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_start_postcopy = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_start_postcopy")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_colo_lost_heartbeat = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_colo_lost_heartbeat")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_colo_lost_heartbeat = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_colo_lost_heartbeat")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_cancel")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_cancel = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_cancel")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_continue = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_continue")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_continue = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_continue")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_incoming = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_incoming")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_incoming = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_incoming")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_xen_save_devices_state = process("/usr/bin/qemu-aarch64").mark("qmp_enter_xen_save_devices_state")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_xen_save_devices_state = process("/usr/bin/qemu-aarch64").mark("qmp_exit_xen_save_devices_state")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_xen_set_global_dirty_log = process("/usr/bin/qemu-aarch64").mark("qmp_enter_xen_set_global_dirty_log")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_xen_set_global_dirty_log = process("/usr/bin/qemu-aarch64").mark("qmp_exit_xen_set_global_dirty_log")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_xen_load_devices_state = process("/usr/bin/qemu-aarch64").mark("qmp_enter_xen_load_devices_state")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_xen_load_devices_state = process("/usr/bin/qemu-aarch64").mark("qmp_exit_xen_load_devices_state")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_xen_set_replication = process("/usr/bin/qemu-aarch64").mark("qmp_enter_xen_set_replication")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_xen_set_replication = process("/usr/bin/qemu-aarch64").mark("qmp_exit_xen_set_replication")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_xen_replication_status = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_xen_replication_status")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_xen_replication_status = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_xen_replication_status")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_xen_colo_do_checkpoint = process("/usr/bin/qemu-aarch64").mark("qmp_enter_xen_colo_do_checkpoint")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_xen_colo_do_checkpoint = process("/usr/bin/qemu-aarch64").mark("qmp_exit_xen_colo_do_checkpoint")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_colo_status = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_colo_status")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_colo_status = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_colo_status")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_recover = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_recover")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_recover = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_recover")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_migrate_pause = process("/usr/bin/qemu-aarch64").mark("qmp_enter_migrate_pause")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_migrate_pause = process("/usr/bin/qemu-aarch64").mark("qmp_exit_migrate_pause")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_calc_dirty_rate = process("/usr/bin/qemu-aarch64").mark("qmp_enter_calc_dirty_rate")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_calc_dirty_rate = process("/usr/bin/qemu-aarch64").mark("qmp_exit_calc_dirty_rate")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_dirty_rate = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_dirty_rate")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_dirty_rate = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_dirty_rate")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_set_vcpu_dirty_limit = process("/usr/bin/qemu-aarch64").mark("qmp_enter_set_vcpu_dirty_limit")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_set_vcpu_dirty_limit = process("/usr/bin/qemu-aarch64").mark("qmp_exit_set_vcpu_dirty_limit")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_cancel_vcpu_dirty_limit = process("/usr/bin/qemu-aarch64").mark("qmp_enter_cancel_vcpu_dirty_limit")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_cancel_vcpu_dirty_limit = process("/usr/bin/qemu-aarch64").mark("qmp_exit_cancel_vcpu_dirty_limit")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_vcpu_dirty_limit = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_vcpu_dirty_limit")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_vcpu_dirty_limit = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_vcpu_dirty_limit")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_snapshot_save = process("/usr/bin/qemu-aarch64").mark("qmp_enter_snapshot_save")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_snapshot_save = process("/usr/bin/qemu-aarch64").mark("qmp_exit_snapshot_save")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_snapshot_load = process("/usr/bin/qemu-aarch64").mark("qmp_enter_snapshot_load")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_snapshot_load = process("/usr/bin/qemu-aarch64").mark("qmp_exit_snapshot_load")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_snapshot_delete = process("/usr/bin/qemu-aarch64").mark("qmp_enter_snapshot_delete")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_snapshot_delete = process("/usr/bin/qemu-aarch64").mark("qmp_exit_snapshot_delete")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_add_client = process("/usr/bin/qemu-aarch64").mark("qmp_enter_add_client")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_add_client = process("/usr/bin/qemu-aarch64").mark("qmp_exit_add_client")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_name = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_name")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_name = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_name")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_iothreads = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_iothreads")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_iothreads = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_iothreads")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_stop = process("/usr/bin/qemu-aarch64").mark("qmp_enter_stop")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_stop = process("/usr/bin/qemu-aarch64").mark("qmp_exit_stop")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_cont = process("/usr/bin/qemu-aarch64").mark("qmp_enter_cont")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_cont = process("/usr/bin/qemu-aarch64").mark("qmp_exit_cont")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_exit_preconfig = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_exit_preconfig")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_exit_preconfig = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_exit_preconfig")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_human_monitor_command = process("/usr/bin/qemu-aarch64").mark("qmp_enter_human_monitor_command")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_human_monitor_command = process("/usr/bin/qemu-aarch64").mark("qmp_exit_human_monitor_command")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_getfd = process("/usr/bin/qemu-aarch64").mark("qmp_enter_getfd")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_getfd = process("/usr/bin/qemu-aarch64").mark("qmp_exit_getfd")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_closefd = process("/usr/bin/qemu-aarch64").mark("qmp_enter_closefd")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_closefd = process("/usr/bin/qemu-aarch64").mark("qmp_exit_closefd")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_add_fd = process("/usr/bin/qemu-aarch64").mark("qmp_enter_add_fd")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_add_fd = process("/usr/bin/qemu-aarch64").mark("qmp_exit_add_fd")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_remove_fd = process("/usr/bin/qemu-aarch64").mark("qmp_enter_remove_fd")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_remove_fd = process("/usr/bin/qemu-aarch64").mark("qmp_exit_remove_fd")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_fdsets = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_fdsets")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_fdsets = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_fdsets")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_command_line_options = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_command_line_options")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_command_line_options = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_command_line_options")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_set_link = process("/usr/bin/qemu-aarch64").mark("qmp_enter_set_link")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_set_link = process("/usr/bin/qemu-aarch64").mark("qmp_exit_set_link")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_netdev_add = process("/usr/bin/qemu-aarch64").mark("qmp_enter_netdev_add")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_netdev_add = process("/usr/bin/qemu-aarch64").mark("qmp_exit_netdev_add")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_netdev_del = process("/usr/bin/qemu-aarch64").mark("qmp_enter_netdev_del")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_netdev_del = process("/usr/bin/qemu-aarch64").mark("qmp_exit_netdev_del")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_rx_filter = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_rx_filter")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_rx_filter = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_rx_filter")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_announce_self = process("/usr/bin/qemu-aarch64").mark("qmp_enter_announce_self")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_announce_self = process("/usr/bin/qemu-aarch64").mark("qmp_exit_announce_self")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_qom_list = process("/usr/bin/qemu-aarch64").mark("qmp_enter_qom_list")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_qom_list = process("/usr/bin/qemu-aarch64").mark("qmp_exit_qom_list")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_qom_get = process("/usr/bin/qemu-aarch64").mark("qmp_enter_qom_get")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_qom_get = process("/usr/bin/qemu-aarch64").mark("qmp_exit_qom_get")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_qom_set = process("/usr/bin/qemu-aarch64").mark("qmp_enter_qom_set")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_qom_set = process("/usr/bin/qemu-aarch64").mark("qmp_exit_qom_set")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_qom_list_types = process("/usr/bin/qemu-aarch64").mark("qmp_enter_qom_list_types")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_qom_list_types = process("/usr/bin/qemu-aarch64").mark("qmp_exit_qom_list_types")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_qom_list_properties = process("/usr/bin/qemu-aarch64").mark("qmp_enter_qom_list_properties")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_qom_list_properties = process("/usr/bin/qemu-aarch64").mark("qmp_exit_qom_list_properties")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_object_add = process("/usr/bin/qemu-aarch64").mark("qmp_enter_object_add")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_object_add = process("/usr/bin/qemu-aarch64").mark("qmp_exit_object_add")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_object_del = process("/usr/bin/qemu-aarch64").mark("qmp_enter_object_del")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_object_del = process("/usr/bin/qemu-aarch64").mark("qmp_exit_object_del")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_replay = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_replay")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_replay = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_replay")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_replay_break = process("/usr/bin/qemu-aarch64").mark("qmp_enter_replay_break")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_replay_break = process("/usr/bin/qemu-aarch64").mark("qmp_exit_replay_break")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_replay_delete_break = process("/usr/bin/qemu-aarch64").mark("qmp_enter_replay_delete_break")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_replay_delete_break = process("/usr/bin/qemu-aarch64").mark("qmp_exit_replay_delete_break")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_replay_seek = process("/usr/bin/qemu-aarch64").mark("qmp_enter_replay_seek")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_replay_seek = process("/usr/bin/qemu-aarch64").mark("qmp_exit_replay_seek")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_status = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_status")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_status = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_status")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_watchdog_set_action = process("/usr/bin/qemu-aarch64").mark("qmp_enter_watchdog_set_action")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_watchdog_set_action = process("/usr/bin/qemu-aarch64").mark("qmp_exit_watchdog_set_action")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_set_action = process("/usr/bin/qemu-aarch64").mark("qmp_enter_set_action")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_set_action = process("/usr/bin/qemu-aarch64").mark("qmp_exit_set_action")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_stats = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_stats")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_stats = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_stats")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_stats_schemas = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_stats_schemas")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_stats_schemas = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_stats_schemas")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_trace_event_get_state = process("/usr/bin/qemu-aarch64").mark("qmp_enter_trace_event_get_state")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_trace_event_get_state = process("/usr/bin/qemu-aarch64").mark("qmp_exit_trace_event_get_state")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_trace_event_set_state = process("/usr/bin/qemu-aarch64").mark("qmp_enter_trace_event_set_state")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_trace_event_set_state = process("/usr/bin/qemu-aarch64").mark("qmp_exit_trace_event_set_state")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_transaction = process("/usr/bin/qemu-aarch64").mark("qmp_enter_transaction")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_transaction = process("/usr/bin/qemu-aarch64").mark("qmp_exit_transaction")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_virtio = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_virtio")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_virtio = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_virtio")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_virtio_status = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_virtio_status")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_virtio_status = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_virtio_status")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_virtio_queue_status = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_virtio_queue_status")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_virtio_queue_status = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_virtio_queue_status")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_virtio_vhost_queue_status = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_virtio_vhost_queue_status")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_virtio_vhost_queue_status = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_virtio_vhost_queue_status")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_x_query_virtio_queue_element = process("/usr/bin/qemu-aarch64").mark("qmp_enter_x_query_virtio_queue_element")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_x_query_virtio_queue_element = process("/usr/bin/qemu-aarch64").mark("qmp_exit_x_query_virtio_queue_element")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_yank = process("/usr/bin/qemu-aarch64").mark("qmp_enter_yank")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_yank = process("/usr/bin/qemu-aarch64").mark("qmp_exit_yank")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_yank = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_yank")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_yank = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_yank")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_acpi_ospm_status = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_acpi_ospm_status")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_acpi_ospm_status = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_acpi_ospm_status")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_device_list_properties = process("/usr/bin/qemu-aarch64").mark("qmp_enter_device_list_properties")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_device_list_properties = process("/usr/bin/qemu-aarch64").mark("qmp_exit_device_list_properties")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_device_del = process("/usr/bin/qemu-aarch64").mark("qmp_enter_device_del")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_device_del = process("/usr/bin/qemu-aarch64").mark("qmp_exit_device_del")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_pci = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_pci")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_pci = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_pci")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_rocker = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_rocker")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_rocker = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_rocker")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_rocker_ports = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_rocker_ports")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_rocker_ports = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_rocker_ports")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_rocker_of_dpa_flows = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_rocker_of_dpa_flows")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_rocker_of_dpa_flows = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_rocker_of_dpa_flows")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_rocker_of_dpa_groups = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_rocker_of_dpa_groups")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_rocker_of_dpa_groups = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_rocker_of_dpa_groups")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_tpm_models = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_tpm_models")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_tpm_models = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_tpm_models")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_tpm_types = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_tpm_types")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_tpm_types = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_tpm_types")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_tpm = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_tpm")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_tpm = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_tpm")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_set_password = process("/usr/bin/qemu-aarch64").mark("qmp_enter_set_password")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_set_password = process("/usr/bin/qemu-aarch64").mark("qmp_exit_set_password")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_expire_password = process("/usr/bin/qemu-aarch64").mark("qmp_enter_expire_password")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_expire_password = process("/usr/bin/qemu-aarch64").mark("qmp_exit_expire_password")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_screendump = process("/usr/bin/qemu-aarch64").mark("qmp_enter_screendump")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_screendump = process("/usr/bin/qemu-aarch64").mark("qmp_exit_screendump")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_spice = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_spice")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_spice = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_spice")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_vnc = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_vnc")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_vnc = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_vnc")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_vnc_servers = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_vnc_servers")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_vnc_servers = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_vnc_servers")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_change_vnc_password = process("/usr/bin/qemu-aarch64").mark("qmp_enter_change_vnc_password")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_change_vnc_password = process("/usr/bin/qemu-aarch64").mark("qmp_exit_change_vnc_password")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_mice = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_mice")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_mice = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_mice")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_send_key = process("/usr/bin/qemu-aarch64").mark("qmp_enter_send_key")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_send_key = process("/usr/bin/qemu-aarch64").mark("qmp_exit_send_key")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_input_send_event = process("/usr/bin/qemu-aarch64").mark("qmp_enter_input_send_event")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_input_send_event = process("/usr/bin/qemu-aarch64").mark("qmp_exit_input_send_event")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_display_options = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_display_options")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_display_options = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_display_options")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_display_reload = process("/usr/bin/qemu-aarch64").mark("qmp_enter_display_reload")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_display_reload = process("/usr/bin/qemu-aarch64").mark("qmp_exit_display_reload")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_display_update = process("/usr/bin/qemu-aarch64").mark("qmp_enter_display_update")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_display_update = process("/usr/bin/qemu-aarch64").mark("qmp_exit_display_update")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_cpu_model_comparison = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_cpu_model_comparison")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_cpu_model_comparison = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_cpu_model_comparison")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_cpu_model_baseline = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_cpu_model_baseline")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_cpu_model_baseline = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_cpu_model_baseline")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_cpu_model_expansion = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_cpu_model_expansion")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_cpu_model_expansion = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_cpu_model_expansion")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_cpu_definitions = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_cpu_definitions")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_cpu_definitions = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_cpu_definitions")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_rtc_reset_reinjection = process("/usr/bin/qemu-aarch64").mark("qmp_enter_rtc_reset_reinjection")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_rtc_reset_reinjection = process("/usr/bin/qemu-aarch64").mark("qmp_exit_rtc_reset_reinjection")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_sev = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_sev")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_sev = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_sev")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_sev_launch_measure = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_sev_launch_measure")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_sev_launch_measure = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_sev_launch_measure")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_sev_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_sev_capabilities")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_sev_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_sev_capabilities")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_sev_inject_launch_secret = process("/usr/bin/qemu-aarch64").mark("qmp_enter_sev_inject_launch_secret")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_sev_inject_launch_secret = process("/usr/bin/qemu-aarch64").mark("qmp_exit_sev_inject_launch_secret")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_sev_attestation_report = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_sev_attestation_report")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_sev_attestation_report = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_sev_attestation_report")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_dump_skeys = process("/usr/bin/qemu-aarch64").mark("qmp_enter_dump_skeys")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_dump_skeys = process("/usr/bin/qemu-aarch64").mark("qmp_exit_dump_skeys")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_gic_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_gic_capabilities")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_gic_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_gic_capabilities")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_sgx = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_sgx")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_sgx = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_sgx")
{
  result = $arg1;
  succeeded = $arg2;
}
probe qemu.user.aarch64.qmp_enter_query_sgx_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_enter_query_sgx_capabilities")
{
  json = $arg1;
}
probe qemu.user.aarch64.qmp_exit_query_sgx_capabilities = process("/usr/bin/qemu-aarch64").mark("qmp_exit_query_sgx_capabilities")
{
  result = $arg1;
  succeeded = $arg2;
}

