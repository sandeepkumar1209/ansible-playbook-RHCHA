/* This file is autogenerated by tracetool, do not edit. */

probe qemu.user.or1k.static.breakpoint_insert = process("/usr/bin/qemu-or1k-static").mark("breakpoint_insert")
{
  cpu_index = $arg1;
  pc = $arg2;
  flags = $arg3;
}
probe qemu.user.or1k.static.breakpoint_remove = process("/usr/bin/qemu-or1k-static").mark("breakpoint_remove")
{
  cpu_index = $arg1;
  pc = $arg2;
  flags = $arg3;
}
probe qemu.user.or1k.static.breakpoint_singlestep = process("/usr/bin/qemu-or1k-static").mark("breakpoint_singlestep")
{
  cpu_index = $arg1;
  enabled = $arg2;
}
probe qemu.user.or1k.static.dma_blk_io = process("/usr/bin/qemu-or1k-static").mark("dma_blk_io")
{
  dbs = $arg1;
  bs = $arg2;
  offset = $arg3;
  to_dev = $arg4;
}
probe qemu.user.or1k.static.dma_aio_cancel = process("/usr/bin/qemu-or1k-static").mark("dma_aio_cancel")
{
  dbs = $arg1;
}
probe qemu.user.or1k.static.dma_complete = process("/usr/bin/qemu-or1k-static").mark("dma_complete")
{
  dbs = $arg1;
  ret = $arg2;
  cb = $arg3;
}
probe qemu.user.or1k.static.dma_blk_cb = process("/usr/bin/qemu-or1k-static").mark("dma_blk_cb")
{
  dbs = $arg1;
  ret = $arg2;
}
probe qemu.user.or1k.static.dma_map_wait = process("/usr/bin/qemu-or1k-static").mark("dma_map_wait")
{
  dbs = $arg1;
}
probe qemu.user.or1k.static.find_ram_offset = process("/usr/bin/qemu-or1k-static").mark("find_ram_offset")
{
  size = $arg1;
  offset = $arg2;
}
probe qemu.user.or1k.static.find_ram_offset_loop = process("/usr/bin/qemu-or1k-static").mark("find_ram_offset_loop")
{
  size = $arg1;
  candidate = $arg2;
  offset = $arg3;
  next_ = $arg4;
  mingap = $arg5;
}
probe qemu.user.or1k.static.ram_block_discard_range = process("/usr/bin/qemu-or1k-static").mark("ram_block_discard_range")
{
  rbname = $arg1;
  hva = $arg2;
  length = $arg3;
  need_madvise = $arg4;
  need_fallocate = $arg5;
  ret = $arg6;
}
probe qemu.user.or1k.static.memory_notdirty_write_access = process("/usr/bin/qemu-or1k-static").mark("memory_notdirty_write_access")
{
  vaddr = $arg1;
  ram_addr = $arg2;
  size = $arg3;
}
probe qemu.user.or1k.static.memory_notdirty_set_dirty = process("/usr/bin/qemu-or1k-static").mark("memory_notdirty_set_dirty")
{
  vaddr = $arg1;
}
probe qemu.user.or1k.static.job_state_transition = process("/usr/bin/qemu-or1k-static").mark("job_state_transition")
{
  job = $arg1;
  ret = $arg2;
  legal = $arg3;
  s0 = $arg4;
  s1 = $arg5;
}
probe qemu.user.or1k.static.job_apply_verb = process("/usr/bin/qemu-or1k-static").mark("job_apply_verb")
{
  job = $arg1;
  state = $arg2;
  verb = $arg3;
  legal = $arg4;
}
probe qemu.user.or1k.static.job_completed = process("/usr/bin/qemu-or1k-static").mark("job_completed")
{
  job = $arg1;
  ret = $arg2;
}
probe qemu.user.or1k.static.qmp_job_cancel = process("/usr/bin/qemu-or1k-static").mark("qmp_job_cancel")
{
  job = $arg1;
}
probe qemu.user.or1k.static.qmp_job_pause = process("/usr/bin/qemu-or1k-static").mark("qmp_job_pause")
{
  job = $arg1;
}
probe qemu.user.or1k.static.qmp_job_resume = process("/usr/bin/qemu-or1k-static").mark("qmp_job_resume")
{
  job = $arg1;
}
probe qemu.user.or1k.static.qmp_job_complete = process("/usr/bin/qemu-or1k-static").mark("qmp_job_complete")
{
  job = $arg1;
}
probe qemu.user.or1k.static.qmp_job_finalize = process("/usr/bin/qemu-or1k-static").mark("qmp_job_finalize")
{
  job = $arg1;
}
probe qemu.user.or1k.static.qmp_job_dismiss = process("/usr/bin/qemu-or1k-static").mark("qmp_job_dismiss")
{
  job = $arg1;
}
probe qemu.user.or1k.static.guest_cpu_enter = process("/usr/bin/qemu-or1k-static").mark("guest_cpu_enter")
{
  __cpu = $arg1;
}
probe qemu.user.or1k.static.guest_cpu_exit = process("/usr/bin/qemu-or1k-static").mark("guest_cpu_exit")
{
  __cpu = $arg1;
}
probe qemu.user.or1k.static.guest_cpu_reset = process("/usr/bin/qemu-or1k-static").mark("guest_cpu_reset")
{
  __cpu = $arg1;
}
probe qemu.user.or1k.static.guest_user_syscall = process("/usr/bin/qemu-or1k-static").mark("guest_user_syscall")
{
  __cpu = $arg1;
  num = $arg2;
  arg1 = $arg3;
  arg2 = $arg4;
  arg3 = $arg5;
  arg4 = $arg6;
  arg5 = $arg7;
  arg6 = $arg8;
  arg7 = $arg9;
  arg8 = $arg10;
}
probe qemu.user.or1k.static.guest_user_syscall_ret = process("/usr/bin/qemu-or1k-static").mark("guest_user_syscall_ret")
{
  __cpu = $arg1;
  num = $arg2;
  ret = $arg3;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_load_dh = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_load_dh")
{
  creds = $arg1;
  filename = $arg2;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_get_path = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_get_path")
{
  creds = $arg1;
  filename = $arg2;
  path = $arg3;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_anon_load = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_anon_load")
{
  creds = $arg1;
  dir = $arg2;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_psk_load = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_psk_load")
{
  creds = $arg1;
  dir = $arg2;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_x509_load = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_x509_load")
{
  creds = $arg1;
  dir = $arg2;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_x509_check_basic_constraints = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_x509_check_basic_constraints")
{
  creds = $arg1;
  file = $arg2;
  status = $arg3;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_x509_check_key_usage = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_x509_check_key_usage")
{
  creds = $arg1;
  file = $arg2;
  status = $arg3;
  usage = $arg4;
  critical = $arg5;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_x509_check_key_purpose = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_x509_check_key_purpose")
{
  creds = $arg1;
  file = $arg2;
  status = $arg3;
  usage = $arg4;
  critical = $arg5;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_x509_load_cert = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_x509_load_cert")
{
  creds = $arg1;
  isServer = $arg2;
  file = $arg3;
}
probe qemu.user.or1k.static.qcrypto_tls_creds_x509_load_cert_list = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_creds_x509_load_cert_list")
{
  creds = $arg1;
  file = $arg2;
}
probe qemu.user.or1k.static.qcrypto_tls_session_new = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_session_new")
{
  session = $arg1;
  creds = $arg2;
  hostname = $arg3;
  authzid = $arg4;
  endpoint = $arg5;
}
probe qemu.user.or1k.static.qcrypto_tls_session_check_creds = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_session_check_creds")
{
  session = $arg1;
  status = $arg2;
}
probe qemu.user.or1k.static.qcrypto_tls_cipher_suite_priority = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_cipher_suite_priority")
{
  name = $arg1;
}
probe qemu.user.or1k.static.qcrypto_tls_cipher_suite_info = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_cipher_suite_info")
{
  data0 = $arg1;
  data1 = $arg2;
  version = $arg3;
  name = $arg4;
}
probe qemu.user.or1k.static.qcrypto_tls_cipher_suite_count = process("/usr/bin/qemu-or1k-static").mark("qcrypto_tls_cipher_suite_count")
{
  count = $arg1;
}
probe qemu.user.or1k.static.visit_free = process("/usr/bin/qemu-or1k-static").mark("visit_free")
{
  v = $arg1;
}
probe qemu.user.or1k.static.visit_complete = process("/usr/bin/qemu-or1k-static").mark("visit_complete")
{
  v = $arg1;
  opaque = $arg2;
}
probe qemu.user.or1k.static.visit_start_struct = process("/usr/bin/qemu-or1k-static").mark("visit_start_struct")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
  size = $arg4;
}
probe qemu.user.or1k.static.visit_check_struct = process("/usr/bin/qemu-or1k-static").mark("visit_check_struct")
{
  v = $arg1;
}
probe qemu.user.or1k.static.visit_end_struct = process("/usr/bin/qemu-or1k-static").mark("visit_end_struct")
{
  v = $arg1;
  obj = $arg2;
}
probe qemu.user.or1k.static.visit_start_list = process("/usr/bin/qemu-or1k-static").mark("visit_start_list")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
  size = $arg4;
}
probe qemu.user.or1k.static.visit_next_list = process("/usr/bin/qemu-or1k-static").mark("visit_next_list")
{
  v = $arg1;
  tail = $arg2;
  size = $arg3;
}
probe qemu.user.or1k.static.visit_check_list = process("/usr/bin/qemu-or1k-static").mark("visit_check_list")
{
  v = $arg1;
}
probe qemu.user.or1k.static.visit_end_list = process("/usr/bin/qemu-or1k-static").mark("visit_end_list")
{
  v = $arg1;
  obj = $arg2;
}
probe qemu.user.or1k.static.visit_start_alternate = process("/usr/bin/qemu-or1k-static").mark("visit_start_alternate")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
  size = $arg4;
}
probe qemu.user.or1k.static.visit_end_alternate = process("/usr/bin/qemu-or1k-static").mark("visit_end_alternate")
{
  v = $arg1;
  obj = $arg2;
}
probe qemu.user.or1k.static.visit_optional = process("/usr/bin/qemu-or1k-static").mark("visit_optional")
{
  v = $arg1;
  name = $arg2;
  present = $arg3;
}
probe qemu.user.or1k.static.visit_policy_reject = process("/usr/bin/qemu-or1k-static").mark("visit_policy_reject")
{
  v = $arg1;
  name = $arg2;
}
probe qemu.user.or1k.static.visit_policy_skip = process("/usr/bin/qemu-or1k-static").mark("visit_policy_skip")
{
  v = $arg1;
  name = $arg2;
}
probe qemu.user.or1k.static.visit_type_enum = process("/usr/bin/qemu-or1k-static").mark("visit_type_enum")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_int = process("/usr/bin/qemu-or1k-static").mark("visit_type_int")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_uint8 = process("/usr/bin/qemu-or1k-static").mark("visit_type_uint8")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_uint16 = process("/usr/bin/qemu-or1k-static").mark("visit_type_uint16")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_uint32 = process("/usr/bin/qemu-or1k-static").mark("visit_type_uint32")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_uint64 = process("/usr/bin/qemu-or1k-static").mark("visit_type_uint64")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_int8 = process("/usr/bin/qemu-or1k-static").mark("visit_type_int8")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_int16 = process("/usr/bin/qemu-or1k-static").mark("visit_type_int16")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_int32 = process("/usr/bin/qemu-or1k-static").mark("visit_type_int32")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_int64 = process("/usr/bin/qemu-or1k-static").mark("visit_type_int64")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_size = process("/usr/bin/qemu-or1k-static").mark("visit_type_size")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_bool = process("/usr/bin/qemu-or1k-static").mark("visit_type_bool")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_str = process("/usr/bin/qemu-or1k-static").mark("visit_type_str")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_number = process("/usr/bin/qemu-or1k-static").mark("visit_type_number")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_any = process("/usr/bin/qemu-or1k-static").mark("visit_type_any")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.visit_type_null = process("/usr/bin/qemu-or1k-static").mark("visit_type_null")
{
  v = $arg1;
  name = $arg2;
  obj = $arg3;
}
probe qemu.user.or1k.static.object_dynamic_cast_assert = process("/usr/bin/qemu-or1k-static").mark("object_dynamic_cast_assert")
{
  type = $arg1;
  target = $arg2;
  file = $arg3;
  line = $arg4;
  func = $arg5;
}
probe qemu.user.or1k.static.object_class_dynamic_cast_assert = process("/usr/bin/qemu-or1k-static").mark("object_class_dynamic_cast_assert")
{
  type = $arg1;
  target = $arg2;
  file = $arg3;
  line = $arg4;
  func = $arg5;
}
probe qemu.user.or1k.static.handle_hmp_command = process("/usr/bin/qemu-or1k-static").mark("handle_hmp_command")
{
  mon = $arg1;
  cmdline = $arg2;
}
probe qemu.user.or1k.static.monitor_protocol_event_handler = process("/usr/bin/qemu-or1k-static").mark("monitor_protocol_event_handler")
{
  event = $arg1;
  qdict = $arg2;
}
probe qemu.user.or1k.static.monitor_protocol_event_emit = process("/usr/bin/qemu-or1k-static").mark("monitor_protocol_event_emit")
{
  event = $arg1;
  data = $arg2;
}
probe qemu.user.or1k.static.monitor_protocol_event_queue = process("/usr/bin/qemu-or1k-static").mark("monitor_protocol_event_queue")
{
  event = $arg1;
  qdict = $arg2;
  rate = $arg3;
}
probe qemu.user.or1k.static.monitor_suspend = process("/usr/bin/qemu-or1k-static").mark("monitor_suspend")
{
  ptr = $arg1;
  cnt = $arg2;
}
probe qemu.user.or1k.static.monitor_qmp_in_band_enqueue = process("/usr/bin/qemu-or1k-static").mark("monitor_qmp_in_band_enqueue")
{
  req = $arg1;
  mon = $arg2;
  len = $arg3;
}
probe qemu.user.or1k.static.monitor_qmp_in_band_dequeue = process("/usr/bin/qemu-or1k-static").mark("monitor_qmp_in_band_dequeue")
{
  req = $arg1;
  len = $arg2;
}
probe qemu.user.or1k.static.monitor_qmp_cmd_in_band = process("/usr/bin/qemu-or1k-static").mark("monitor_qmp_cmd_in_band")
{
  id = $arg1;
}
probe qemu.user.or1k.static.monitor_qmp_err_in_band = process("/usr/bin/qemu-or1k-static").mark("monitor_qmp_err_in_band")
{
  desc = $arg1;
}
probe qemu.user.or1k.static.monitor_qmp_cmd_out_of_band = process("/usr/bin/qemu-or1k-static").mark("monitor_qmp_cmd_out_of_band")
{
  id = $arg1;
}
probe qemu.user.or1k.static.monitor_qmp_respond = process("/usr/bin/qemu-or1k-static").mark("monitor_qmp_respond")
{
  mon = $arg1;
  json = $arg2;
}
probe qemu.user.or1k.static.handle_qmp_command = process("/usr/bin/qemu-or1k-static").mark("handle_qmp_command")
{
  mon = $arg1;
  req = $arg2;
}
probe qemu.user.or1k.static.run_poll_handlers_begin = process("/usr/bin/qemu-or1k-static").mark("run_poll_handlers_begin")
{
  ctx = $arg1;
  max_ns = $arg2;
  timeout = $arg3;
}
probe qemu.user.or1k.static.run_poll_handlers_end = process("/usr/bin/qemu-or1k-static").mark("run_poll_handlers_end")
{
  ctx = $arg1;
  progress = $arg2;
  timeout = $arg3;
}
probe qemu.user.or1k.static.poll_shrink = process("/usr/bin/qemu-or1k-static").mark("poll_shrink")
{
  ctx = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.poll_grow = process("/usr/bin/qemu-or1k-static").mark("poll_grow")
{
  ctx = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.poll_add = process("/usr/bin/qemu-or1k-static").mark("poll_add")
{
  ctx = $arg1;
  node = $arg2;
  fd = $arg3;
  revents = $arg4;
}
probe qemu.user.or1k.static.poll_remove = process("/usr/bin/qemu-or1k-static").mark("poll_remove")
{
  ctx = $arg1;
  node = $arg2;
  fd = $arg3;
}
probe qemu.user.or1k.static.aio_co_schedule = process("/usr/bin/qemu-or1k-static").mark("aio_co_schedule")
{
  ctx = $arg1;
  co = $arg2;
}
probe qemu.user.or1k.static.aio_co_schedule_bh_cb = process("/usr/bin/qemu-or1k-static").mark("aio_co_schedule_bh_cb")
{
  ctx = $arg1;
  co = $arg2;
}
probe qemu.user.or1k.static.thread_pool_submit = process("/usr/bin/qemu-or1k-static").mark("thread_pool_submit")
{
  pool = $arg1;
  req = $arg2;
  opaque = $arg3;
}
probe qemu.user.or1k.static.thread_pool_complete = process("/usr/bin/qemu-or1k-static").mark("thread_pool_complete")
{
  pool = $arg1;
  req = $arg2;
  opaque = $arg3;
  ret = $arg4;
}
probe qemu.user.or1k.static.thread_pool_cancel = process("/usr/bin/qemu-or1k-static").mark("thread_pool_cancel")
{
  req = $arg1;
  opaque = $arg2;
}
probe qemu.user.or1k.static.buffer_resize = process("/usr/bin/qemu-or1k-static").mark("buffer_resize")
{
  buf = $arg1;
  olen = $arg2;
  len = $arg3;
}
probe qemu.user.or1k.static.buffer_move_empty = process("/usr/bin/qemu-or1k-static").mark("buffer_move_empty")
{
  buf = $arg1;
  len = $arg2;
  from = $arg3;
}
probe qemu.user.or1k.static.buffer_move = process("/usr/bin/qemu-or1k-static").mark("buffer_move")
{
  buf = $arg1;
  len = $arg2;
  from = $arg3;
}
probe qemu.user.or1k.static.buffer_free = process("/usr/bin/qemu-or1k-static").mark("buffer_free")
{
  buf = $arg1;
  len = $arg2;
}
probe qemu.user.or1k.static.qemu_file_monitor_add_watch = process("/usr/bin/qemu-or1k-static").mark("qemu_file_monitor_add_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  filename = $arg3;
  cb = $arg4;
  opaque = $arg5;
  id = $arg6;
}
probe qemu.user.or1k.static.qemu_file_monitor_remove_watch = process("/usr/bin/qemu-or1k-static").mark("qemu_file_monitor_remove_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  id = $arg3;
}
probe qemu.user.or1k.static.qemu_file_monitor_new = process("/usr/bin/qemu-or1k-static").mark("qemu_file_monitor_new")
{
  mon = $arg1;
  fd = $arg2;
}
probe qemu.user.or1k.static.qemu_file_monitor_enable_watch = process("/usr/bin/qemu-or1k-static").mark("qemu_file_monitor_enable_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  id = $arg3;
}
probe qemu.user.or1k.static.qemu_file_monitor_disable_watch = process("/usr/bin/qemu-or1k-static").mark("qemu_file_monitor_disable_watch")
{
  mon = $arg1;
  dirpath = $arg2;
  id = $arg3;
}
probe qemu.user.or1k.static.qemu_file_monitor_event = process("/usr/bin/qemu-or1k-static").mark("qemu_file_monitor_event")
{
  mon = $arg1;
  dirpath = $arg2;
  filename = $arg3;
  mask = $arg4;
  id = $arg5;
}
probe qemu.user.or1k.static.qemu_file_monitor_dispatch = process("/usr/bin/qemu-or1k-static").mark("qemu_file_monitor_dispatch")
{
  mon = $arg1;
  dirpath = $arg2;
  filename = $arg3;
  ev = $arg4;
  cb = $arg5;
  opaque = $arg6;
  id = $arg7;
}
probe qemu.user.or1k.static.qemu_aio_coroutine_enter = process("/usr/bin/qemu-or1k-static").mark("qemu_aio_coroutine_enter")
{
  ctx = $arg1;
  from = $arg2;
  to = $arg3;
  opaque = $arg4;
}
probe qemu.user.or1k.static.qemu_coroutine_yield = process("/usr/bin/qemu-or1k-static").mark("qemu_coroutine_yield")
{
  from = $arg1;
  to = $arg2;
}
probe qemu.user.or1k.static.qemu_coroutine_terminate = process("/usr/bin/qemu-or1k-static").mark("qemu_coroutine_terminate")
{
  co = $arg1;
}
probe qemu.user.or1k.static.qemu_co_mutex_lock_uncontended = process("/usr/bin/qemu-or1k-static").mark("qemu_co_mutex_lock_uncontended")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.or1k.static.qemu_co_mutex_lock_entry = process("/usr/bin/qemu-or1k-static").mark("qemu_co_mutex_lock_entry")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.or1k.static.qemu_co_mutex_lock_return = process("/usr/bin/qemu-or1k-static").mark("qemu_co_mutex_lock_return")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.or1k.static.qemu_co_mutex_unlock_entry = process("/usr/bin/qemu-or1k-static").mark("qemu_co_mutex_unlock_entry")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.or1k.static.qemu_co_mutex_unlock_return = process("/usr/bin/qemu-or1k-static").mark("qemu_co_mutex_unlock_return")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.user.or1k.static.qemu_memalign = process("/usr/bin/qemu-or1k-static").mark("qemu_memalign")
{
  alignment = $arg1;
  size = $arg2;
  ptr = $arg3;
}
probe qemu.user.or1k.static.qemu_anon_ram_alloc = process("/usr/bin/qemu-or1k-static").mark("qemu_anon_ram_alloc")
{
  size = $arg1;
  ptr = $arg2;
}
probe qemu.user.or1k.static.qemu_vfree = process("/usr/bin/qemu-or1k-static").mark("qemu_vfree")
{
  ptr = $arg1;
}
probe qemu.user.or1k.static.qemu_anon_ram_free = process("/usr/bin/qemu-or1k-static").mark("qemu_anon_ram_free")
{
  ptr = $arg1;
  size = $arg2;
}
probe qemu.user.or1k.static.hbitmap_iter_skip_words = process("/usr/bin/qemu-or1k-static").mark("hbitmap_iter_skip_words")
{
  hb = $arg1;
  hbi = $arg2;
  pos = $arg3;
  cur = $arg4;
}
probe qemu.user.or1k.static.hbitmap_reset = process("/usr/bin/qemu-or1k-static").mark("hbitmap_reset")
{
  hb = $arg1;
  start = $arg2;
  count = $arg3;
  sbit = $arg4;
  ebit = $arg5;
}
probe qemu.user.or1k.static.hbitmap_set = process("/usr/bin/qemu-or1k-static").mark("hbitmap_set")
{
  hb = $arg1;
  start = $arg2;
  count = $arg3;
  sbit = $arg4;
  ebit = $arg5;
}
probe qemu.user.or1k.static.lockcnt_fast_path_attempt = process("/usr/bin/qemu-or1k-static").mark("lockcnt_fast_path_attempt")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.lockcnt_fast_path_success = process("/usr/bin/qemu-or1k-static").mark("lockcnt_fast_path_success")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.lockcnt_unlock_attempt = process("/usr/bin/qemu-or1k-static").mark("lockcnt_unlock_attempt")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.lockcnt_unlock_success = process("/usr/bin/qemu-or1k-static").mark("lockcnt_unlock_success")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.lockcnt_futex_wait_prepare = process("/usr/bin/qemu-or1k-static").mark("lockcnt_futex_wait_prepare")
{
  lockcnt = $arg1;
  expected = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.lockcnt_futex_wait = process("/usr/bin/qemu-or1k-static").mark("lockcnt_futex_wait")
{
  lockcnt = $arg1;
  val = $arg2;
}
probe qemu.user.or1k.static.lockcnt_futex_wait_resume = process("/usr/bin/qemu-or1k-static").mark("lockcnt_futex_wait_resume")
{
  lockcnt = $arg1;
  new = $arg2;
}
probe qemu.user.or1k.static.lockcnt_futex_wake = process("/usr/bin/qemu-or1k-static").mark("lockcnt_futex_wake")
{
  lockcnt = $arg1;
}
probe qemu.user.or1k.static.socket_listen = process("/usr/bin/qemu-or1k-static").mark("socket_listen")
{
  num = $arg1;
}
probe qemu.user.or1k.static.qemu_mutex_lock = process("/usr/bin/qemu-or1k-static").mark("qemu_mutex_lock")
{
  mutex = $arg1;
  file = $arg2;
  line = $arg3;
}
probe qemu.user.or1k.static.qemu_mutex_locked = process("/usr/bin/qemu-or1k-static").mark("qemu_mutex_locked")
{
  mutex = $arg1;
  file = $arg2;
  line = $arg3;
}
probe qemu.user.or1k.static.qemu_mutex_unlock = process("/usr/bin/qemu-or1k-static").mark("qemu_mutex_unlock")
{
  mutex = $arg1;
  file = $arg2;
  line = $arg3;
}
probe qemu.user.or1k.static.qemu_vfio_dma_reset_temporary = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_dma_reset_temporary")
{
  s = $arg1;
}
probe qemu.user.or1k.static.qemu_vfio_ram_block_added = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_ram_block_added")
{
  s = $arg1;
  p = $arg2;
  size = $arg3;
}
probe qemu.user.or1k.static.qemu_vfio_ram_block_removed = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_ram_block_removed")
{
  s = $arg1;
  p = $arg2;
  size = $arg3;
}
probe qemu.user.or1k.static.qemu_vfio_dump_mapping = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_dump_mapping")
{
  host = $arg1;
  iova = $arg2;
  size = $arg3;
}
probe qemu.user.or1k.static.qemu_vfio_find_mapping = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_find_mapping")
{
  s = $arg1;
  p = $arg2;
}
probe qemu.user.or1k.static.qemu_vfio_new_mapping = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_new_mapping")
{
  s = $arg1;
  host = $arg2;
  size = $arg3;
  index = $arg4;
  iova = $arg5;
}
probe qemu.user.or1k.static.qemu_vfio_do_mapping = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_do_mapping")
{
  s = $arg1;
  host = $arg2;
  iova = $arg3;
  size = $arg4;
}
probe qemu.user.or1k.static.qemu_vfio_dma_map = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_dma_map")
{
  s = $arg1;
  host = $arg2;
  size = $arg3;
  temporary = $arg4;
  iova = $arg5;
}
probe qemu.user.or1k.static.qemu_vfio_dma_mapped = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_dma_mapped")
{
  s = $arg1;
  host = $arg2;
  iova = $arg3;
  size = $arg4;
}
probe qemu.user.or1k.static.qemu_vfio_dma_unmap = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_dma_unmap")
{
  s = $arg1;
  host = $arg2;
}
probe qemu.user.or1k.static.qemu_vfio_pci_read_config = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_pci_read_config")
{
  buf = $arg1;
  ofs = $arg2;
  size = $arg3;
  region_ofs = $arg4;
  region_size = $arg5;
}
probe qemu.user.or1k.static.qemu_vfio_pci_write_config = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_pci_write_config")
{
  buf = $arg1;
  ofs = $arg2;
  size = $arg3;
  region_ofs = $arg4;
  region_size = $arg5;
}
probe qemu.user.or1k.static.qemu_vfio_region_info = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_region_info")
{
  desc = $arg1;
  region_ofs = $arg2;
  region_size = $arg3;
  cap_offset = $arg4;
}
probe qemu.user.or1k.static.qemu_vfio_pci_map_bar = process("/usr/bin/qemu-or1k-static").mark("qemu_vfio_pci_map_bar")
{
  index = $arg1;
  region_ofs = $arg2;
  region_size = $arg3;
  ofs = $arg4;
  host = $arg5;
}
probe qemu.user.or1k.static.uffd_query_features_nosys = process("/usr/bin/qemu-or1k-static").mark("uffd_query_features_nosys")
{
  err = $arg1;
}
probe qemu.user.or1k.static.uffd_query_features_api_failed = process("/usr/bin/qemu-or1k-static").mark("uffd_query_features_api_failed")
{
  err = $arg1;
}
probe qemu.user.or1k.static.uffd_create_fd_nosys = process("/usr/bin/qemu-or1k-static").mark("uffd_create_fd_nosys")
{
  err = $arg1;
}
probe qemu.user.or1k.static.uffd_create_fd_api_failed = process("/usr/bin/qemu-or1k-static").mark("uffd_create_fd_api_failed")
{
  err = $arg1;
}
probe qemu.user.or1k.static.uffd_create_fd_api_noioctl = process("/usr/bin/qemu-or1k-static").mark("uffd_create_fd_api_noioctl")
{
  ioctl_req = $arg1;
  ioctl_supp = $arg2;
}
probe qemu.user.or1k.static.uffd_register_memory_failed = process("/usr/bin/qemu-or1k-static").mark("uffd_register_memory_failed")
{
  addr = $arg1;
  length = $arg2;
  mode = $arg3;
  err = $arg4;
}
probe qemu.user.or1k.static.uffd_unregister_memory_failed = process("/usr/bin/qemu-or1k-static").mark("uffd_unregister_memory_failed")
{
  addr = $arg1;
  length = $arg2;
  err = $arg3;
}
probe qemu.user.or1k.static.module_load_module = process("/usr/bin/qemu-or1k-static").mark("module_load_module")
{
  name = $arg1;
}
probe qemu.user.or1k.static.module_lookup_object_type = process("/usr/bin/qemu-or1k-static").mark("module_lookup_object_type")
{
  name = $arg1;
}
probe qemu.user.or1k.static.gdbstub_op_start = process("/usr/bin/qemu-or1k-static").mark("gdbstub_op_start")
{
  device = $arg1;
}
probe qemu.user.or1k.static.gdbstub_op_exiting = process("/usr/bin/qemu-or1k-static").mark("gdbstub_op_exiting")
{
  code = $arg1;
}
probe qemu.user.or1k.static.gdbstub_op_continue = process("/usr/bin/qemu-or1k-static").mark("gdbstub_op_continue")
{
}
probe qemu.user.or1k.static.gdbstub_op_continue_cpu = process("/usr/bin/qemu-or1k-static").mark("gdbstub_op_continue_cpu")
{
  cpu_index = $arg1;
}
probe qemu.user.or1k.static.gdbstub_op_stepping = process("/usr/bin/qemu-or1k-static").mark("gdbstub_op_stepping")
{
  cpu_index = $arg1;
}
probe qemu.user.or1k.static.gdbstub_op_extra_info = process("/usr/bin/qemu-or1k-static").mark("gdbstub_op_extra_info")
{
  info = $arg1;
}
probe qemu.user.or1k.static.gdbstub_hit_watchpoint = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_watchpoint")
{
  type = $arg1;
  cpu_gdb_index = $arg2;
  vaddr = $arg3;
}
probe qemu.user.or1k.static.gdbstub_hit_internal_error = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_internal_error")
{
}
probe qemu.user.or1k.static.gdbstub_hit_break = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_break")
{
}
probe qemu.user.or1k.static.gdbstub_hit_paused = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_paused")
{
}
probe qemu.user.or1k.static.gdbstub_hit_shutdown = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_shutdown")
{
}
probe qemu.user.or1k.static.gdbstub_hit_io_error = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_io_error")
{
}
probe qemu.user.or1k.static.gdbstub_hit_watchdog = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_watchdog")
{
}
probe qemu.user.or1k.static.gdbstub_hit_unknown = process("/usr/bin/qemu-or1k-static").mark("gdbstub_hit_unknown")
{
  state = $arg1;
}
probe qemu.user.or1k.static.gdbstub_io_reply = process("/usr/bin/qemu-or1k-static").mark("gdbstub_io_reply")
{
  message = $arg1;
}
probe qemu.user.or1k.static.gdbstub_io_binaryreply = process("/usr/bin/qemu-or1k-static").mark("gdbstub_io_binaryreply")
{
  ofs = $arg1;
  line = $arg2;
}
probe qemu.user.or1k.static.gdbstub_io_command = process("/usr/bin/qemu-or1k-static").mark("gdbstub_io_command")
{
  command = $arg1;
}
probe qemu.user.or1k.static.gdbstub_io_got_ack = process("/usr/bin/qemu-or1k-static").mark("gdbstub_io_got_ack")
{
}
probe qemu.user.or1k.static.gdbstub_io_got_unexpected = process("/usr/bin/qemu-or1k-static").mark("gdbstub_io_got_unexpected")
{
  ch = $arg1;
}
probe qemu.user.or1k.static.gdbstub_err_got_nack = process("/usr/bin/qemu-or1k-static").mark("gdbstub_err_got_nack")
{
}
probe qemu.user.or1k.static.gdbstub_err_garbage = process("/usr/bin/qemu-or1k-static").mark("gdbstub_err_garbage")
{
  ch = $arg1;
}
probe qemu.user.or1k.static.gdbstub_err_overrun = process("/usr/bin/qemu-or1k-static").mark("gdbstub_err_overrun")
{
}
probe qemu.user.or1k.static.gdbstub_err_invalid_repeat = process("/usr/bin/qemu-or1k-static").mark("gdbstub_err_invalid_repeat")
{
  ch = $arg1;
}
probe qemu.user.or1k.static.gdbstub_err_invalid_rle = process("/usr/bin/qemu-or1k-static").mark("gdbstub_err_invalid_rle")
{
}
probe qemu.user.or1k.static.gdbstub_err_checksum_invalid = process("/usr/bin/qemu-or1k-static").mark("gdbstub_err_checksum_invalid")
{
  ch = $arg1;
}
probe qemu.user.or1k.static.gdbstub_err_checksum_incorrect = process("/usr/bin/qemu-or1k-static").mark("gdbstub_err_checksum_incorrect")
{
  expected = $arg1;
  got = $arg2;
}
probe qemu.user.or1k.static.signal_table_init = process("/usr/bin/qemu-or1k-static").mark("signal_table_init")
{
  i = $arg1;
}
probe qemu.user.or1k.static.signal_do_sigaction_guest = process("/usr/bin/qemu-or1k-static").mark("signal_do_sigaction_guest")
{
  sig = $arg1;
  max = $arg2;
}
probe qemu.user.or1k.static.signal_do_sigaction_host = process("/usr/bin/qemu-or1k-static").mark("signal_do_sigaction_host")
{
  sig = $arg1;
  max = $arg2;
}
probe qemu.user.or1k.static.user_setup_frame = process("/usr/bin/qemu-or1k-static").mark("user_setup_frame")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.or1k.static.user_setup_rt_frame = process("/usr/bin/qemu-or1k-static").mark("user_setup_rt_frame")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.or1k.static.user_do_rt_sigreturn = process("/usr/bin/qemu-or1k-static").mark("user_do_rt_sigreturn")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.or1k.static.user_do_sigreturn = process("/usr/bin/qemu-or1k-static").mark("user_do_sigreturn")
{
  env = $arg1;
  frame_addr = $arg2;
}
probe qemu.user.or1k.static.user_dump_core_and_abort = process("/usr/bin/qemu-or1k-static").mark("user_dump_core_and_abort")
{
  env = $arg1;
  target_sig = $arg2;
  host_sig = $arg3;
}
probe qemu.user.or1k.static.user_handle_signal = process("/usr/bin/qemu-or1k-static").mark("user_handle_signal")
{
  env = $arg1;
  target_sig = $arg2;
}
probe qemu.user.or1k.static.user_host_signal = process("/usr/bin/qemu-or1k-static").mark("user_host_signal")
{
  env = $arg1;
  host_sig = $arg2;
  target_sig = $arg3;
}
probe qemu.user.or1k.static.user_queue_signal = process("/usr/bin/qemu-or1k-static").mark("user_queue_signal")
{
  env = $arg1;
  target_sig = $arg2;
}
probe qemu.user.or1k.static.user_s390x_restore_sigregs = process("/usr/bin/qemu-or1k-static").mark("user_s390x_restore_sigregs")
{
  env = $arg1;
  sc_psw_addr = $arg2;
  env_psw_addr = $arg3;
}
probe qemu.user.or1k.static.target_mprotect = process("/usr/bin/qemu-or1k-static").mark("target_mprotect")
{
  start = $arg1;
  len = $arg2;
  flags = $arg3;
}
probe qemu.user.or1k.static.target_mmap = process("/usr/bin/qemu-or1k-static").mark("target_mmap")
{
  start = $arg1;
  len = $arg2;
  pflags = $arg3;
  mflags = $arg4;
  fd = $arg5;
  offset = $arg6;
}
probe qemu.user.or1k.static.target_mmap_complete = process("/usr/bin/qemu-or1k-static").mark("target_mmap_complete")
{
  retaddr = $arg1;
}
probe qemu.user.or1k.static.target_munmap = process("/usr/bin/qemu-or1k-static").mark("target_munmap")
{
  start = $arg1;
  len = $arg2;
}
probe qemu.user.or1k.static.exec_tb = process("/usr/bin/qemu-or1k-static").mark("exec_tb")
{
  tb = $arg1;
  pc = $arg2;
}
probe qemu.user.or1k.static.exec_tb_nocache = process("/usr/bin/qemu-or1k-static").mark("exec_tb_nocache")
{
  tb = $arg1;
  pc = $arg2;
}
probe qemu.user.or1k.static.exec_tb_exit = process("/usr/bin/qemu-or1k-static").mark("exec_tb_exit")
{
  last_tb = $arg1;
  flags = $arg2;
}
probe qemu.user.or1k.static.translate_block = process("/usr/bin/qemu-or1k-static").mark("translate_block")
{
  tb = $arg1;
  pc = $arg2;
  tb_code = $arg3;
}
probe qemu.user.or1k.static.loader_write_rom = process("/usr/bin/qemu-or1k-static").mark("loader_write_rom")
{
  name = $arg1;
  gpa = $arg2;
  size = $arg3;
  isrom = $arg4;
}
probe qemu.user.or1k.static.qdev_reset = process("/usr/bin/qemu-or1k-static").mark("qdev_reset")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.or1k.static.qdev_reset_all = process("/usr/bin/qemu-or1k-static").mark("qdev_reset_all")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.or1k.static.qdev_reset_tree = process("/usr/bin/qemu-or1k-static").mark("qdev_reset_tree")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.or1k.static.qbus_reset = process("/usr/bin/qemu-or1k-static").mark("qbus_reset")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.or1k.static.qbus_reset_all = process("/usr/bin/qemu-or1k-static").mark("qbus_reset_all")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.or1k.static.qbus_reset_tree = process("/usr/bin/qemu-or1k-static").mark("qbus_reset_tree")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.or1k.static.qdev_update_parent_bus = process("/usr/bin/qemu-or1k-static").mark("qdev_update_parent_bus")
{
  obj = $arg1;
  objtype = $arg2;
  oldp = $arg3;
  oldptype = $arg4;
  newp = $arg5;
  newptype = $arg6;
}
probe qemu.user.or1k.static.resettable_reset = process("/usr/bin/qemu-or1k-static").mark("resettable_reset")
{
  obj = $arg1;
  cold = $arg2;
}
probe qemu.user.or1k.static.resettable_reset_assert_begin = process("/usr/bin/qemu-or1k-static").mark("resettable_reset_assert_begin")
{
  obj = $arg1;
  cold = $arg2;
}
probe qemu.user.or1k.static.resettable_reset_assert_end = process("/usr/bin/qemu-or1k-static").mark("resettable_reset_assert_end")
{
  obj = $arg1;
}
probe qemu.user.or1k.static.resettable_reset_release_begin = process("/usr/bin/qemu-or1k-static").mark("resettable_reset_release_begin")
{
  obj = $arg1;
  cold = $arg2;
}
probe qemu.user.or1k.static.resettable_reset_release_end = process("/usr/bin/qemu-or1k-static").mark("resettable_reset_release_end")
{
  obj = $arg1;
}
probe qemu.user.or1k.static.resettable_change_parent = process("/usr/bin/qemu-or1k-static").mark("resettable_change_parent")
{
  obj = $arg1;
  o = $arg2;
  oc = $arg3;
  n = $arg4;
  nc = $arg5;
}
probe qemu.user.or1k.static.resettable_phase_enter_begin = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_enter_begin")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
  type = $arg4;
}
probe qemu.user.or1k.static.resettable_phase_enter_exec = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_enter_exec")
{
  obj = $arg1;
  objtype = $arg2;
  type = $arg3;
  has_method = $arg4;
}
probe qemu.user.or1k.static.resettable_phase_enter_end = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_enter_end")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
}
probe qemu.user.or1k.static.resettable_phase_hold_begin = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_hold_begin")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
  type = $arg4;
}
probe qemu.user.or1k.static.resettable_phase_hold_exec = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_hold_exec")
{
  obj = $arg1;
  objtype = $arg2;
  has_method = $arg3;
}
probe qemu.user.or1k.static.resettable_phase_hold_end = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_hold_end")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
}
probe qemu.user.or1k.static.resettable_phase_exit_begin = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_exit_begin")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
  type = $arg4;
}
probe qemu.user.or1k.static.resettable_phase_exit_exec = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_exit_exec")
{
  obj = $arg1;
  objtype = $arg2;
  has_method = $arg3;
}
probe qemu.user.or1k.static.resettable_phase_exit_end = process("/usr/bin/qemu-or1k-static").mark("resettable_phase_exit_end")
{
  obj = $arg1;
  objtype = $arg2;
  count = $arg3;
}
probe qemu.user.or1k.static.resettable_transitional_function = process("/usr/bin/qemu-or1k-static").mark("resettable_transitional_function")
{
  obj = $arg1;
  objtype = $arg2;
}
probe qemu.user.or1k.static.clock_set_source = process("/usr/bin/qemu-or1k-static").mark("clock_set_source")
{
  clk = $arg1;
  src = $arg2;
}
probe qemu.user.or1k.static.clock_disconnect = process("/usr/bin/qemu-or1k-static").mark("clock_disconnect")
{
  clk = $arg1;
}
probe qemu.user.or1k.static.clock_set = process("/usr/bin/qemu-or1k-static").mark("clock_set")
{
  clk = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.clock_propagate = process("/usr/bin/qemu-or1k-static").mark("clock_propagate")
{
  clk = $arg1;
}
probe qemu.user.or1k.static.clock_update = process("/usr/bin/qemu-or1k-static").mark("clock_update")
{
  clk = $arg1;
  src = $arg2;
  hz = $arg3;
  cb = $arg4;
}
probe qemu.user.or1k.static.clock_set_mul_div = process("/usr/bin/qemu-or1k-static").mark("clock_set_mul_div")
{
  clk = $arg1;
  oldmul = $arg2;
  mul = $arg3;
  olddiv = $arg4;
  div = $arg5;
}
probe qemu.user.or1k.static.arm_gt_recalc = process("/usr/bin/qemu-or1k-static").mark("arm_gt_recalc")
{
  timer = $arg1;
  irqstate = $arg2;
  nexttick = $arg3;
}
probe qemu.user.or1k.static.arm_gt_recalc_disabled = process("/usr/bin/qemu-or1k-static").mark("arm_gt_recalc_disabled")
{
  timer = $arg1;
}
probe qemu.user.or1k.static.arm_gt_cval_write = process("/usr/bin/qemu-or1k-static").mark("arm_gt_cval_write")
{
  timer = $arg1;
  value = $arg2;
}
probe qemu.user.or1k.static.arm_gt_tval_write = process("/usr/bin/qemu-or1k-static").mark("arm_gt_tval_write")
{
  timer = $arg1;
  value = $arg2;
}
probe qemu.user.or1k.static.arm_gt_ctl_write = process("/usr/bin/qemu-or1k-static").mark("arm_gt_ctl_write")
{
  timer = $arg1;
  value = $arg2;
}
probe qemu.user.or1k.static.arm_gt_imask_toggle = process("/usr/bin/qemu-or1k-static").mark("arm_gt_imask_toggle")
{
  timer = $arg1;
  irqstate = $arg2;
}
probe qemu.user.or1k.static.arm_gt_cntvoff_write = process("/usr/bin/qemu-or1k-static").mark("arm_gt_cntvoff_write")
{
  value = $arg1;
}
probe qemu.user.or1k.static.kvm_arm_fixup_msi_route = process("/usr/bin/qemu-or1k-static").mark("kvm_arm_fixup_msi_route")
{
  iova = $arg1;
  gpa = $arg2;
}
probe qemu.user.or1k.static.hvf_unhandled_sysreg_read = process("/usr/bin/qemu-or1k-static").mark("hvf_unhandled_sysreg_read")
{
  pc = $arg1;
  reg = $arg2;
  op0 = $arg3;
  op1 = $arg4;
  crn = $arg5;
  crm = $arg6;
  op2 = $arg7;
}
probe qemu.user.or1k.static.hvf_unhandled_sysreg_write = process("/usr/bin/qemu-or1k-static").mark("hvf_unhandled_sysreg_write")
{
  pc = $arg1;
  reg = $arg2;
  op0 = $arg3;
  op1 = $arg4;
  crn = $arg5;
  crm = $arg6;
  op2 = $arg7;
}
probe qemu.user.or1k.static.hvf_inject_fiq = process("/usr/bin/qemu-or1k-static").mark("hvf_inject_fiq")
{
}
probe qemu.user.or1k.static.hvf_inject_irq = process("/usr/bin/qemu-or1k-static").mark("hvf_inject_irq")
{
}
probe qemu.user.or1k.static.hvf_data_abort = process("/usr/bin/qemu-or1k-static").mark("hvf_data_abort")
{
  pc = $arg1;
  va = $arg2;
  pa = $arg3;
  isv = $arg4;
  iswrite = $arg5;
  s1ptw = $arg6;
  len = $arg7;
  srt = $arg8;
}
probe qemu.user.or1k.static.hvf_sysreg_read = process("/usr/bin/qemu-or1k-static").mark("hvf_sysreg_read")
{
  reg = $arg1;
  op0 = $arg2;
  op1 = $arg3;
  crn = $arg4;
  crm = $arg5;
  op2 = $arg6;
  val = $arg7;
}
probe qemu.user.or1k.static.hvf_sysreg_write = process("/usr/bin/qemu-or1k-static").mark("hvf_sysreg_write")
{
  reg = $arg1;
  op0 = $arg2;
  op1 = $arg3;
  crn = $arg4;
  crm = $arg5;
  op2 = $arg6;
  val = $arg7;
}
probe qemu.user.or1k.static.hvf_unknown_hvc = process("/usr/bin/qemu-or1k-static").mark("hvf_unknown_hvc")
{
  x0 = $arg1;
}
probe qemu.user.or1k.static.hvf_unknown_smc = process("/usr/bin/qemu-or1k-static").mark("hvf_unknown_smc")
{
  x0 = $arg1;
}
probe qemu.user.or1k.static.hvf_exit = process("/usr/bin/qemu-or1k-static").mark("hvf_exit")
{
  syndrome = $arg1;
  ec = $arg2;
  pc = $arg3;
}
probe qemu.user.or1k.static.hvf_psci_call = process("/usr/bin/qemu-or1k-static").mark("hvf_psci_call")
{
  x0 = $arg1;
  x1 = $arg2;
  x2 = $arg3;
  x3 = $arg4;
  cpuid = $arg5;
}
probe qemu.user.or1k.static.kvm_sev_init = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_init")
{
}
probe qemu.user.or1k.static.kvm_memcrypt_register_region = process("/usr/bin/qemu-or1k-static").mark("kvm_memcrypt_register_region")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.or1k.static.kvm_memcrypt_unregister_region = process("/usr/bin/qemu-or1k-static").mark("kvm_memcrypt_unregister_region")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.or1k.static.kvm_sev_change_state = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_change_state")
{
  old = $arg1;
  new = $arg2;
}
probe qemu.user.or1k.static.kvm_sev_launch_start = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_launch_start")
{
  policy = $arg1;
  session = $arg2;
  pdh = $arg3;
}
probe qemu.user.or1k.static.kvm_sev_launch_update_data = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_launch_update_data")
{
  addr = $arg1;
  len = $arg2;
}
probe qemu.user.or1k.static.kvm_sev_launch_measurement = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_launch_measurement")
{
  value = $arg1;
}
probe qemu.user.or1k.static.kvm_sev_launch_finish = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_launch_finish")
{
}
probe qemu.user.or1k.static.kvm_sev_launch_secret = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_launch_secret")
{
  hpa = $arg1;
  hva = $arg2;
  secret = $arg3;
  len = $arg4;
}
probe qemu.user.or1k.static.kvm_sev_attestation_report = process("/usr/bin/qemu-or1k-static").mark("kvm_sev_attestation_report")
{
  mnonce = $arg1;
  data = $arg2;
}
probe qemu.user.or1k.static.kvm_x86_fixup_msi_error = process("/usr/bin/qemu-or1k-static").mark("kvm_x86_fixup_msi_error")
{
  gsi = $arg1;
}
probe qemu.user.or1k.static.kvm_x86_add_msi_route = process("/usr/bin/qemu-or1k-static").mark("kvm_x86_add_msi_route")
{
  virq = $arg1;
}
probe qemu.user.or1k.static.kvm_x86_remove_msi_route = process("/usr/bin/qemu-or1k-static").mark("kvm_x86_remove_msi_route")
{
  virq = $arg1;
}
probe qemu.user.or1k.static.kvm_x86_update_msi_routes = process("/usr/bin/qemu-or1k-static").mark("kvm_x86_update_msi_routes")
{
  num = $arg1;
}
probe qemu.user.or1k.static.mips_translate_c0 = process("/usr/bin/qemu-or1k-static").mark("mips_translate_c0")
{
  instr = $arg1;
  rn = $arg2;
  reg = $arg3;
  sel = $arg4;
}
probe qemu.user.or1k.static.mips_translate_tr = process("/usr/bin/qemu-or1k-static").mark("mips_translate_tr")
{
  instr = $arg1;
  rt = $arg2;
  u = $arg3;
  sel = $arg4;
  h = $arg5;
}
probe qemu.user.or1k.static.nios2_mmu_translate_miss = process("/usr/bin/qemu-or1k-static").mark("nios2_mmu_translate_miss")
{
  vaddr = $arg1;
  pid = $arg2;
  index = $arg3;
  tag = $arg4;
}
probe qemu.user.or1k.static.nios2_mmu_translate_hit = process("/usr/bin/qemu-or1k-static").mark("nios2_mmu_translate_hit")
{
  vaddr = $arg1;
  pid = $arg2;
  index = $arg3;
  paddr = $arg4;
  prot = $arg5;
}
probe qemu.user.or1k.static.nios2_mmu_flush_pid_miss = process("/usr/bin/qemu-or1k-static").mark("nios2_mmu_flush_pid_miss")
{
  pid = $arg1;
  index = $arg2;
  vaddr = $arg3;
}
probe qemu.user.or1k.static.nios2_mmu_flush_pid_hit = process("/usr/bin/qemu-or1k-static").mark("nios2_mmu_flush_pid_hit")
{
  pid = $arg1;
  index = $arg2;
  vaddr = $arg3;
}
probe qemu.user.or1k.static.nios2_mmu_write_tlbacc = process("/usr/bin/qemu-or1k-static").mark("nios2_mmu_write_tlbacc")
{
  ig = $arg1;
  c = $arg2;
  r = $arg3;
  w = $arg4;
  x = $arg5;
  g = $arg6;
  pfn = $arg7;
}
probe qemu.user.or1k.static.nios2_mmu_write_tlbmisc = process("/usr/bin/qemu-or1k-static").mark("nios2_mmu_write_tlbmisc")
{
  way = $arg1;
  r = $arg2;
  w = $arg3;
  t = $arg4;
  b = $arg5;
  p = $arg6;
  d = $arg7;
  pid = $arg8;
}
probe qemu.user.or1k.static.nios2_mmu_write_pteaddr = process("/usr/bin/qemu-or1k-static").mark("nios2_mmu_write_pteaddr")
{
  ptb = $arg1;
  vpn = $arg2;
}
probe qemu.user.or1k.static.kvm_failed_spr_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_spr_set")
{
  spr = $arg1;
  msg = $arg2;
}
probe qemu.user.or1k.static.kvm_failed_spr_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_spr_get")
{
  spr = $arg1;
  msg = $arg2;
}
probe qemu.user.or1k.static.kvm_failed_fpscr_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_fpscr_set")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_fp_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_fp_set")
{
  fpname = $arg1;
  fpnum = $arg2;
  msg = $arg3;
}
probe qemu.user.or1k.static.kvm_failed_vscr_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_vscr_set")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_vr_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_vr_set")
{
  vr = $arg1;
  msg = $arg2;
}
probe qemu.user.or1k.static.kvm_failed_fpscr_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_fpscr_get")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_fp_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_fp_get")
{
  fpname = $arg1;
  fpnum = $arg2;
  msg = $arg3;
}
probe qemu.user.or1k.static.kvm_failed_vscr_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_vscr_get")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_vr_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_vr_get")
{
  vr = $arg1;
  msg = $arg2;
}
probe qemu.user.or1k.static.kvm_failed_vpa_addr_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_vpa_addr_get")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_slb_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_slb_get")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_dtl_get = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_dtl_get")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_vpa_addr_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_vpa_addr_set")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_slb_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_slb_set")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_dtl_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_dtl_set")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_null_vpa_addr_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_null_vpa_addr_set")
{
  msg = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_put_vpa = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_put_vpa")
{
}
probe qemu.user.or1k.static.kvm_failed_get_vpa = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_get_vpa")
{
}
probe qemu.user.or1k.static.kvm_handle_dcr_write = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_dcr_write")
{
}
probe qemu.user.or1k.static.kvm_handle_dcr_read = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_dcr_read")
{
}
probe qemu.user.or1k.static.kvm_handle_halt = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_halt")
{
}
probe qemu.user.or1k.static.kvm_handle_papr_hcall = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_papr_hcall")
{
  hcall = $arg1;
}
probe qemu.user.or1k.static.kvm_handle_epr = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_epr")
{
}
probe qemu.user.or1k.static.kvm_handle_watchdog_expiry = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_watchdog_expiry")
{
}
probe qemu.user.or1k.static.kvm_handle_debug_exception = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_debug_exception")
{
}
probe qemu.user.or1k.static.kvm_handle_nmi_exception = process("/usr/bin/qemu-or1k-static").mark("kvm_handle_nmi_exception")
{
}
probe qemu.user.or1k.static.ppc_excp_rfi = process("/usr/bin/qemu-or1k-static").mark("ppc_excp_rfi")
{
  nip = $arg1;
  msr = $arg2;
}
probe qemu.user.or1k.static.ppc_excp_dsi = process("/usr/bin/qemu-or1k-static").mark("ppc_excp_dsi")
{
  dsisr = $arg1;
  dar = $arg2;
}
probe qemu.user.or1k.static.ppc_excp_isi = process("/usr/bin/qemu-or1k-static").mark("ppc_excp_isi")
{
  msr = $arg1;
  nip = $arg2;
}
probe qemu.user.or1k.static.ppc_excp_fp_ignore = process("/usr/bin/qemu-or1k-static").mark("ppc_excp_fp_ignore")
{
}
probe qemu.user.or1k.static.ppc_excp_inval = process("/usr/bin/qemu-or1k-static").mark("ppc_excp_inval")
{
  nip = $arg1;
}
probe qemu.user.or1k.static.ppc_excp_print = process("/usr/bin/qemu-or1k-static").mark("ppc_excp_print")
{
  excp = $arg1;
}
probe qemu.user.or1k.static.riscv_trap = process("/usr/bin/qemu-or1k-static").mark("riscv_trap")
{
  hartid = $arg1;
  async = $arg2;
  cause = $arg3;
  epc = $arg4;
  tval = $arg5;
  desc = $arg6;
}
probe qemu.user.or1k.static.pmpcfg_csr_read = process("/usr/bin/qemu-or1k-static").mark("pmpcfg_csr_read")
{
  mhartid = $arg1;
  reg_index = $arg2;
  val = $arg3;
}
probe qemu.user.or1k.static.pmpcfg_csr_write = process("/usr/bin/qemu-or1k-static").mark("pmpcfg_csr_write")
{
  mhartid = $arg1;
  reg_index = $arg2;
  val = $arg3;
}
probe qemu.user.or1k.static.pmpaddr_csr_read = process("/usr/bin/qemu-or1k-static").mark("pmpaddr_csr_read")
{
  mhartid = $arg1;
  addr_index = $arg2;
  val = $arg3;
}
probe qemu.user.or1k.static.pmpaddr_csr_write = process("/usr/bin/qemu-or1k-static").mark("pmpaddr_csr_write")
{
  mhartid = $arg1;
  addr_index = $arg2;
  val = $arg3;
}
probe qemu.user.or1k.static.mseccfg_csr_read = process("/usr/bin/qemu-or1k-static").mark("mseccfg_csr_read")
{
  mhartid = $arg1;
  val = $arg2;
}
probe qemu.user.or1k.static.mseccfg_csr_write = process("/usr/bin/qemu-or1k-static").mark("mseccfg_csr_write")
{
  mhartid = $arg1;
  val = $arg2;
}
probe qemu.user.or1k.static.get_skeys_nonzero = process("/usr/bin/qemu-or1k-static").mark("get_skeys_nonzero")
{
  rc = $arg1;
}
probe qemu.user.or1k.static.set_skeys_nonzero = process("/usr/bin/qemu-or1k-static").mark("set_skeys_nonzero")
{
  rc = $arg1;
}
probe qemu.user.or1k.static.ioinst = process("/usr/bin/qemu-or1k-static").mark("ioinst")
{
  insn = $arg1;
}
probe qemu.user.or1k.static.ioinst_sch_id = process("/usr/bin/qemu-or1k-static").mark("ioinst_sch_id")
{
  insn = $arg1;
  cssid = $arg2;
  ssid = $arg3;
  schid = $arg4;
}
probe qemu.user.or1k.static.ioinst_chp_id = process("/usr/bin/qemu-or1k-static").mark("ioinst_chp_id")
{
  insn = $arg1;
  cssid = $arg2;
  chpid = $arg3;
}
probe qemu.user.or1k.static.ioinst_chsc_cmd = process("/usr/bin/qemu-or1k-static").mark("ioinst_chsc_cmd")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.user.or1k.static.cpu_set_state = process("/usr/bin/qemu-or1k-static").mark("cpu_set_state")
{
  cpu_index = $arg1;
  state = $arg2;
}
probe qemu.user.or1k.static.cpu_halt = process("/usr/bin/qemu-or1k-static").mark("cpu_halt")
{
  cpu_index = $arg1;
}
probe qemu.user.or1k.static.cpu_unhalt = process("/usr/bin/qemu-or1k-static").mark("cpu_unhalt")
{
  cpu_index = $arg1;
}
probe qemu.user.or1k.static.sigp_finished = process("/usr/bin/qemu-or1k-static").mark("sigp_finished")
{
  order = $arg1;
  cpu_index = $arg2;
  dst_index = $arg3;
  cc = $arg4;
}
probe qemu.user.or1k.static.kvm_enable_cmma = process("/usr/bin/qemu-or1k-static").mark("kvm_enable_cmma")
{
  rc = $arg1;
}
probe qemu.user.or1k.static.kvm_clear_cmma = process("/usr/bin/qemu-or1k-static").mark("kvm_clear_cmma")
{
  rc = $arg1;
}
probe qemu.user.or1k.static.kvm_failed_cpu_state_set = process("/usr/bin/qemu-or1k-static").mark("kvm_failed_cpu_state_set")
{
  cpu_index = $arg1;
  state = $arg2;
  msg = $arg3;
}
probe qemu.user.or1k.static.kvm_assign_subch_ioeventfd = process("/usr/bin/qemu-or1k-static").mark("kvm_assign_subch_ioeventfd")
{
  fd = $arg1;
  addr = $arg2;
  assign = $arg3;
  datamatch = $arg4;
}
probe qemu.user.or1k.static.mmu_helper_dfault = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_dfault")
{
  address = $arg1;
  context = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
}
probe qemu.user.or1k.static.mmu_helper_dprot = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_dprot")
{
  address = $arg1;
  context = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
}
probe qemu.user.or1k.static.mmu_helper_dmiss = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_dmiss")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.user.or1k.static.mmu_helper_tfault = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_tfault")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.user.or1k.static.mmu_helper_tmiss = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_tmiss")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.user.or1k.static.mmu_helper_get_phys_addr_code = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_get_phys_addr_code")
{
  tl = $arg1;
  mmu_idx = $arg2;
  prim_context = $arg3;
  sec_context = $arg4;
  address = $arg5;
}
probe qemu.user.or1k.static.mmu_helper_get_phys_addr_data = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_get_phys_addr_data")
{
  tl = $arg1;
  mmu_idx = $arg2;
  prim_context = $arg3;
  sec_context = $arg4;
  address = $arg5;
}
probe qemu.user.or1k.static.mmu_helper_mmu_fault = process("/usr/bin/qemu-or1k-static").mark("mmu_helper_mmu_fault")
{
  address = $arg1;
  paddr = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
  prim_context = $arg5;
  sec_context = $arg6;
}
probe qemu.user.or1k.static.sun4m_cpu_interrupt = process("/usr/bin/qemu-or1k-static").mark("sun4m_cpu_interrupt")
{
  level = $arg1;
}
probe qemu.user.or1k.static.sun4m_cpu_reset_interrupt = process("/usr/bin/qemu-or1k-static").mark("sun4m_cpu_reset_interrupt")
{
  level = $arg1;
}
probe qemu.user.or1k.static.int_helper_set_softint = process("/usr/bin/qemu-or1k-static").mark("int_helper_set_softint")
{
  softint = $arg1;
}
probe qemu.user.or1k.static.int_helper_clear_softint = process("/usr/bin/qemu-or1k-static").mark("int_helper_clear_softint")
{
  softint = $arg1;
}
probe qemu.user.or1k.static.int_helper_write_softint = process("/usr/bin/qemu-or1k-static").mark("int_helper_write_softint")
{
  softint = $arg1;
}
probe qemu.user.or1k.static.sparc64_cpu_check_irqs_reset_irq = process("/usr/bin/qemu-or1k-static").mark("sparc64_cpu_check_irqs_reset_irq")
{
  intno = $arg1;
}
probe qemu.user.or1k.static.sparc64_cpu_check_irqs_noset_irq = process("/usr/bin/qemu-or1k-static").mark("sparc64_cpu_check_irqs_noset_irq")
{
  tl = $arg1;
  tt = $arg2;
  intno = $arg3;
}
probe qemu.user.or1k.static.sparc64_cpu_check_irqs_set_irq = process("/usr/bin/qemu-or1k-static").mark("sparc64_cpu_check_irqs_set_irq")
{
  i = $arg1;
  old = $arg2;
  new = $arg3;
}
probe qemu.user.or1k.static.sparc64_cpu_check_irqs_disabled = process("/usr/bin/qemu-or1k-static").mark("sparc64_cpu_check_irqs_disabled")
{
  pil = $arg1;
  pil_in = $arg2;
  softint = $arg3;
  intno = $arg4;
}
probe qemu.user.or1k.static.win_helper_gregset_error = process("/usr/bin/qemu-or1k-static").mark("win_helper_gregset_error")
{
  pstate = $arg1;
}
probe qemu.user.or1k.static.win_helper_switch_pstate = process("/usr/bin/qemu-or1k-static").mark("win_helper_switch_pstate")
{
  pstate_regs = $arg1;
  new_pstate_regs = $arg2;
}
probe qemu.user.or1k.static.win_helper_no_switch_pstate = process("/usr/bin/qemu-or1k-static").mark("win_helper_no_switch_pstate")
{
  new_pstate_regs = $arg1;
}
probe qemu.user.or1k.static.win_helper_wrpil = process("/usr/bin/qemu-or1k-static").mark("win_helper_wrpil")
{
  psrpil = $arg1;
  new_pil = $arg2;
}
probe qemu.user.or1k.static.win_helper_done = process("/usr/bin/qemu-or1k-static").mark("win_helper_done")
{
  tl = $arg1;
}
probe qemu.user.or1k.static.win_helper_retry = process("/usr/bin/qemu-or1k-static").mark("win_helper_retry")
{
  tl = $arg1;
}

